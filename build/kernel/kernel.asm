
kernel:     file format elf32-i386


Disassembly of section .text:

80100000 <multiboot_header>:
80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
80100006:	00 00                	add    %al,(%eax)
80100008:	fe 4f 52             	decb   0x52(%edi)
8010000b:	e4                   	.byte 0xe4

8010000c <entry>:

# Entering xv6 on boot processor, with paging off.
.globl entry
entry:
  # Turn on page size extension for 4Mbyte pages
  movl    %cr4, %eax
8010000c:	0f 20 e0             	mov    %cr4,%eax
  orl     $(CR4_PSE), %eax
8010000f:	83 c8 10             	or     $0x10,%eax
  movl    %eax, %cr4
80100012:	0f 22 e0             	mov    %eax,%cr4
  # Set page directory
  movl    $(V2P_WO(entrypgdir)), %eax
80100015:	b8 00 b0 10 00       	mov    $0x10b000,%eax
  movl    %eax, %cr3
8010001a:	0f 22 d8             	mov    %eax,%cr3
  # Turn on paging.
  movl    %cr0, %eax
8010001d:	0f 20 c0             	mov    %cr0,%eax
  orl     $(CR0_PG|CR0_WP), %eax
80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
  movl    %eax, %cr0
80100025:	0f 22 c0             	mov    %eax,%cr0

  # Set up the stack pointer.
  movl $(stack + KSTACKSIZE), %esp
80100028:	bc 00 72 11 80       	mov    $0x80117200,%esp

  # Jump to main(), and switch to executing at
  # high addresses. The indirect call is needed because
  # the assembler produces a PC-relative instruction
  # for a direct jump.
  mov $main, %eax
8010002d:	b8 3f 4a 10 80       	mov    $0x80104a3f,%eax
  jmp *%eax
80100032:	ff e0                	jmp    *%eax

80100034 <swtch>:
# a struct context, and save its address in *old.
# Switch stacks to new and pop previously-saved registers.

.globl swtch
swtch:
  movl 4(%esp), %eax
80100034:	8b 44 24 04          	mov    0x4(%esp),%eax
  movl 8(%esp), %edx
80100038:	8b 54 24 08          	mov    0x8(%esp),%edx

  # Save old callee-saved registers
  pushl %ebp
8010003c:	55                   	push   %ebp
  pushl %ebx
8010003d:	53                   	push   %ebx
  pushl %esi
8010003e:	56                   	push   %esi
  pushl %edi
8010003f:	57                   	push   %edi

  # Switch stacks
  movl %esp, (%eax)
80100040:	89 20                	mov    %esp,(%eax)
  movl %edx, %esp
80100042:	89 d4                	mov    %edx,%esp

  # Load new callee-saved registers
  popl %edi
80100044:	5f                   	pop    %edi
  popl %esi
80100045:	5e                   	pop    %esi
  popl %ebx
80100046:	5b                   	pop    %ebx
  popl %ebp
80100047:	5d                   	pop    %ebp
  ret
80100048:	c3                   	ret    

80100049 <alltraps>:

  # vectors.S sends all traps here.
.globl alltraps
alltraps:
  # Build trap frame.
  pushl %ds
80100049:	1e                   	push   %ds
  pushl %es
8010004a:	06                   	push   %es
  pushl %fs
8010004b:	0f a0                	push   %fs
  pushl %gs
8010004d:	0f a8                	push   %gs
  pushal
8010004f:	60                   	pusha  
  
  # Set up data segments.
  movw $(SEG_KDATA<<3), %ax
80100050:	66 b8 10 00          	mov    $0x10,%ax
  movw %ax, %ds
80100054:	8e d8                	mov    %eax,%ds
  movw %ax, %es
80100056:	8e c0                	mov    %eax,%es

  # Call trap(tf), where tf=%esp
  pushl %esp
80100058:	54                   	push   %esp
  call trap
80100059:	e8 f6 7b 00 00       	call   80107c54 <trap>
  addl $4, %esp
8010005e:	83 c4 04             	add    $0x4,%esp

80100061 <trapret>:

  # Return falls through to trapret...
.globl trapret
trapret:
  popal
80100061:	61                   	popa   
  popl %gs
80100062:	0f a9                	pop    %gs
  popl %fs
80100064:	0f a1                	pop    %fs
  popl %es
80100066:	07                   	pop    %es
  popl %ds
80100067:	1f                   	pop    %ds
  addl $0x8, %esp  # trapno and errcode
80100068:	83 c4 08             	add    $0x8,%esp
  iret
8010006b:	cf                   	iret   

8010006c <vector0>:
# generated by vectors.pl - do not edit
# handlers
.globl alltraps
.globl vector0
vector0:
  pushl $0
8010006c:	6a 00                	push   $0x0
  pushl $0
8010006e:	6a 00                	push   $0x0
  jmp alltraps
80100070:	e9 d4 ff ff ff       	jmp    80100049 <alltraps>

80100075 <vector1>:
.globl vector1
vector1:
  pushl $0
80100075:	6a 00                	push   $0x0
  pushl $1
80100077:	6a 01                	push   $0x1
  jmp alltraps
80100079:	e9 cb ff ff ff       	jmp    80100049 <alltraps>

8010007e <vector2>:
.globl vector2
vector2:
  pushl $0
8010007e:	6a 00                	push   $0x0
  pushl $2
80100080:	6a 02                	push   $0x2
  jmp alltraps
80100082:	e9 c2 ff ff ff       	jmp    80100049 <alltraps>

80100087 <vector3>:
.globl vector3
vector3:
  pushl $0
80100087:	6a 00                	push   $0x0
  pushl $3
80100089:	6a 03                	push   $0x3
  jmp alltraps
8010008b:	e9 b9 ff ff ff       	jmp    80100049 <alltraps>

80100090 <vector4>:
.globl vector4
vector4:
  pushl $0
80100090:	6a 00                	push   $0x0
  pushl $4
80100092:	6a 04                	push   $0x4
  jmp alltraps
80100094:	e9 b0 ff ff ff       	jmp    80100049 <alltraps>

80100099 <vector5>:
.globl vector5
vector5:
  pushl $0
80100099:	6a 00                	push   $0x0
  pushl $5
8010009b:	6a 05                	push   $0x5
  jmp alltraps
8010009d:	e9 a7 ff ff ff       	jmp    80100049 <alltraps>

801000a2 <vector6>:
.globl vector6
vector6:
  pushl $0
801000a2:	6a 00                	push   $0x0
  pushl $6
801000a4:	6a 06                	push   $0x6
  jmp alltraps
801000a6:	e9 9e ff ff ff       	jmp    80100049 <alltraps>

801000ab <vector7>:
.globl vector7
vector7:
  pushl $0
801000ab:	6a 00                	push   $0x0
  pushl $7
801000ad:	6a 07                	push   $0x7
  jmp alltraps
801000af:	e9 95 ff ff ff       	jmp    80100049 <alltraps>

801000b4 <vector8>:
.globl vector8
vector8:
  pushl $8
801000b4:	6a 08                	push   $0x8
  jmp alltraps
801000b6:	e9 8e ff ff ff       	jmp    80100049 <alltraps>

801000bb <vector9>:
.globl vector9
vector9:
  pushl $0
801000bb:	6a 00                	push   $0x0
  pushl $9
801000bd:	6a 09                	push   $0x9
  jmp alltraps
801000bf:	e9 85 ff ff ff       	jmp    80100049 <alltraps>

801000c4 <vector10>:
.globl vector10
vector10:
  pushl $10
801000c4:	6a 0a                	push   $0xa
  jmp alltraps
801000c6:	e9 7e ff ff ff       	jmp    80100049 <alltraps>

801000cb <vector11>:
.globl vector11
vector11:
  pushl $11
801000cb:	6a 0b                	push   $0xb
  jmp alltraps
801000cd:	e9 77 ff ff ff       	jmp    80100049 <alltraps>

801000d2 <vector12>:
.globl vector12
vector12:
  pushl $12
801000d2:	6a 0c                	push   $0xc
  jmp alltraps
801000d4:	e9 70 ff ff ff       	jmp    80100049 <alltraps>

801000d9 <vector13>:
.globl vector13
vector13:
  pushl $13
801000d9:	6a 0d                	push   $0xd
  jmp alltraps
801000db:	e9 69 ff ff ff       	jmp    80100049 <alltraps>

801000e0 <vector14>:
.globl vector14
vector14:
  pushl $14
801000e0:	6a 0e                	push   $0xe
  jmp alltraps
801000e2:	e9 62 ff ff ff       	jmp    80100049 <alltraps>

801000e7 <vector15>:
.globl vector15
vector15:
  pushl $0
801000e7:	6a 00                	push   $0x0
  pushl $15
801000e9:	6a 0f                	push   $0xf
  jmp alltraps
801000eb:	e9 59 ff ff ff       	jmp    80100049 <alltraps>

801000f0 <vector16>:
.globl vector16
vector16:
  pushl $0
801000f0:	6a 00                	push   $0x0
  pushl $16
801000f2:	6a 10                	push   $0x10
  jmp alltraps
801000f4:	e9 50 ff ff ff       	jmp    80100049 <alltraps>

801000f9 <vector17>:
.globl vector17
vector17:
  pushl $17
801000f9:	6a 11                	push   $0x11
  jmp alltraps
801000fb:	e9 49 ff ff ff       	jmp    80100049 <alltraps>

80100100 <vector18>:
.globl vector18
vector18:
  pushl $0
80100100:	6a 00                	push   $0x0
  pushl $18
80100102:	6a 12                	push   $0x12
  jmp alltraps
80100104:	e9 40 ff ff ff       	jmp    80100049 <alltraps>

80100109 <vector19>:
.globl vector19
vector19:
  pushl $0
80100109:	6a 00                	push   $0x0
  pushl $19
8010010b:	6a 13                	push   $0x13
  jmp alltraps
8010010d:	e9 37 ff ff ff       	jmp    80100049 <alltraps>

80100112 <vector20>:
.globl vector20
vector20:
  pushl $0
80100112:	6a 00                	push   $0x0
  pushl $20
80100114:	6a 14                	push   $0x14
  jmp alltraps
80100116:	e9 2e ff ff ff       	jmp    80100049 <alltraps>

8010011b <vector21>:
.globl vector21
vector21:
  pushl $0
8010011b:	6a 00                	push   $0x0
  pushl $21
8010011d:	6a 15                	push   $0x15
  jmp alltraps
8010011f:	e9 25 ff ff ff       	jmp    80100049 <alltraps>

80100124 <vector22>:
.globl vector22
vector22:
  pushl $0
80100124:	6a 00                	push   $0x0
  pushl $22
80100126:	6a 16                	push   $0x16
  jmp alltraps
80100128:	e9 1c ff ff ff       	jmp    80100049 <alltraps>

8010012d <vector23>:
.globl vector23
vector23:
  pushl $0
8010012d:	6a 00                	push   $0x0
  pushl $23
8010012f:	6a 17                	push   $0x17
  jmp alltraps
80100131:	e9 13 ff ff ff       	jmp    80100049 <alltraps>

80100136 <vector24>:
.globl vector24
vector24:
  pushl $0
80100136:	6a 00                	push   $0x0
  pushl $24
80100138:	6a 18                	push   $0x18
  jmp alltraps
8010013a:	e9 0a ff ff ff       	jmp    80100049 <alltraps>

8010013f <vector25>:
.globl vector25
vector25:
  pushl $0
8010013f:	6a 00                	push   $0x0
  pushl $25
80100141:	6a 19                	push   $0x19
  jmp alltraps
80100143:	e9 01 ff ff ff       	jmp    80100049 <alltraps>

80100148 <vector26>:
.globl vector26
vector26:
  pushl $0
80100148:	6a 00                	push   $0x0
  pushl $26
8010014a:	6a 1a                	push   $0x1a
  jmp alltraps
8010014c:	e9 f8 fe ff ff       	jmp    80100049 <alltraps>

80100151 <vector27>:
.globl vector27
vector27:
  pushl $0
80100151:	6a 00                	push   $0x0
  pushl $27
80100153:	6a 1b                	push   $0x1b
  jmp alltraps
80100155:	e9 ef fe ff ff       	jmp    80100049 <alltraps>

8010015a <vector28>:
.globl vector28
vector28:
  pushl $0
8010015a:	6a 00                	push   $0x0
  pushl $28
8010015c:	6a 1c                	push   $0x1c
  jmp alltraps
8010015e:	e9 e6 fe ff ff       	jmp    80100049 <alltraps>

80100163 <vector29>:
.globl vector29
vector29:
  pushl $0
80100163:	6a 00                	push   $0x0
  pushl $29
80100165:	6a 1d                	push   $0x1d
  jmp alltraps
80100167:	e9 dd fe ff ff       	jmp    80100049 <alltraps>

8010016c <vector30>:
.globl vector30
vector30:
  pushl $0
8010016c:	6a 00                	push   $0x0
  pushl $30
8010016e:	6a 1e                	push   $0x1e
  jmp alltraps
80100170:	e9 d4 fe ff ff       	jmp    80100049 <alltraps>

80100175 <vector31>:
.globl vector31
vector31:
  pushl $0
80100175:	6a 00                	push   $0x0
  pushl $31
80100177:	6a 1f                	push   $0x1f
  jmp alltraps
80100179:	e9 cb fe ff ff       	jmp    80100049 <alltraps>

8010017e <vector32>:
.globl vector32
vector32:
  pushl $0
8010017e:	6a 00                	push   $0x0
  pushl $32
80100180:	6a 20                	push   $0x20
  jmp alltraps
80100182:	e9 c2 fe ff ff       	jmp    80100049 <alltraps>

80100187 <vector33>:
.globl vector33
vector33:
  pushl $0
80100187:	6a 00                	push   $0x0
  pushl $33
80100189:	6a 21                	push   $0x21
  jmp alltraps
8010018b:	e9 b9 fe ff ff       	jmp    80100049 <alltraps>

80100190 <vector34>:
.globl vector34
vector34:
  pushl $0
80100190:	6a 00                	push   $0x0
  pushl $34
80100192:	6a 22                	push   $0x22
  jmp alltraps
80100194:	e9 b0 fe ff ff       	jmp    80100049 <alltraps>

80100199 <vector35>:
.globl vector35
vector35:
  pushl $0
80100199:	6a 00                	push   $0x0
  pushl $35
8010019b:	6a 23                	push   $0x23
  jmp alltraps
8010019d:	e9 a7 fe ff ff       	jmp    80100049 <alltraps>

801001a2 <vector36>:
.globl vector36
vector36:
  pushl $0
801001a2:	6a 00                	push   $0x0
  pushl $36
801001a4:	6a 24                	push   $0x24
  jmp alltraps
801001a6:	e9 9e fe ff ff       	jmp    80100049 <alltraps>

801001ab <vector37>:
.globl vector37
vector37:
  pushl $0
801001ab:	6a 00                	push   $0x0
  pushl $37
801001ad:	6a 25                	push   $0x25
  jmp alltraps
801001af:	e9 95 fe ff ff       	jmp    80100049 <alltraps>

801001b4 <vector38>:
.globl vector38
vector38:
  pushl $0
801001b4:	6a 00                	push   $0x0
  pushl $38
801001b6:	6a 26                	push   $0x26
  jmp alltraps
801001b8:	e9 8c fe ff ff       	jmp    80100049 <alltraps>

801001bd <vector39>:
.globl vector39
vector39:
  pushl $0
801001bd:	6a 00                	push   $0x0
  pushl $39
801001bf:	6a 27                	push   $0x27
  jmp alltraps
801001c1:	e9 83 fe ff ff       	jmp    80100049 <alltraps>

801001c6 <vector40>:
.globl vector40
vector40:
  pushl $0
801001c6:	6a 00                	push   $0x0
  pushl $40
801001c8:	6a 28                	push   $0x28
  jmp alltraps
801001ca:	e9 7a fe ff ff       	jmp    80100049 <alltraps>

801001cf <vector41>:
.globl vector41
vector41:
  pushl $0
801001cf:	6a 00                	push   $0x0
  pushl $41
801001d1:	6a 29                	push   $0x29
  jmp alltraps
801001d3:	e9 71 fe ff ff       	jmp    80100049 <alltraps>

801001d8 <vector42>:
.globl vector42
vector42:
  pushl $0
801001d8:	6a 00                	push   $0x0
  pushl $42
801001da:	6a 2a                	push   $0x2a
  jmp alltraps
801001dc:	e9 68 fe ff ff       	jmp    80100049 <alltraps>

801001e1 <vector43>:
.globl vector43
vector43:
  pushl $0
801001e1:	6a 00                	push   $0x0
  pushl $43
801001e3:	6a 2b                	push   $0x2b
  jmp alltraps
801001e5:	e9 5f fe ff ff       	jmp    80100049 <alltraps>

801001ea <vector44>:
.globl vector44
vector44:
  pushl $0
801001ea:	6a 00                	push   $0x0
  pushl $44
801001ec:	6a 2c                	push   $0x2c
  jmp alltraps
801001ee:	e9 56 fe ff ff       	jmp    80100049 <alltraps>

801001f3 <vector45>:
.globl vector45
vector45:
  pushl $0
801001f3:	6a 00                	push   $0x0
  pushl $45
801001f5:	6a 2d                	push   $0x2d
  jmp alltraps
801001f7:	e9 4d fe ff ff       	jmp    80100049 <alltraps>

801001fc <vector46>:
.globl vector46
vector46:
  pushl $0
801001fc:	6a 00                	push   $0x0
  pushl $46
801001fe:	6a 2e                	push   $0x2e
  jmp alltraps
80100200:	e9 44 fe ff ff       	jmp    80100049 <alltraps>

80100205 <vector47>:
.globl vector47
vector47:
  pushl $0
80100205:	6a 00                	push   $0x0
  pushl $47
80100207:	6a 2f                	push   $0x2f
  jmp alltraps
80100209:	e9 3b fe ff ff       	jmp    80100049 <alltraps>

8010020e <vector48>:
.globl vector48
vector48:
  pushl $0
8010020e:	6a 00                	push   $0x0
  pushl $48
80100210:	6a 30                	push   $0x30
  jmp alltraps
80100212:	e9 32 fe ff ff       	jmp    80100049 <alltraps>

80100217 <vector49>:
.globl vector49
vector49:
  pushl $0
80100217:	6a 00                	push   $0x0
  pushl $49
80100219:	6a 31                	push   $0x31
  jmp alltraps
8010021b:	e9 29 fe ff ff       	jmp    80100049 <alltraps>

80100220 <vector50>:
.globl vector50
vector50:
  pushl $0
80100220:	6a 00                	push   $0x0
  pushl $50
80100222:	6a 32                	push   $0x32
  jmp alltraps
80100224:	e9 20 fe ff ff       	jmp    80100049 <alltraps>

80100229 <vector51>:
.globl vector51
vector51:
  pushl $0
80100229:	6a 00                	push   $0x0
  pushl $51
8010022b:	6a 33                	push   $0x33
  jmp alltraps
8010022d:	e9 17 fe ff ff       	jmp    80100049 <alltraps>

80100232 <vector52>:
.globl vector52
vector52:
  pushl $0
80100232:	6a 00                	push   $0x0
  pushl $52
80100234:	6a 34                	push   $0x34
  jmp alltraps
80100236:	e9 0e fe ff ff       	jmp    80100049 <alltraps>

8010023b <vector53>:
.globl vector53
vector53:
  pushl $0
8010023b:	6a 00                	push   $0x0
  pushl $53
8010023d:	6a 35                	push   $0x35
  jmp alltraps
8010023f:	e9 05 fe ff ff       	jmp    80100049 <alltraps>

80100244 <vector54>:
.globl vector54
vector54:
  pushl $0
80100244:	6a 00                	push   $0x0
  pushl $54
80100246:	6a 36                	push   $0x36
  jmp alltraps
80100248:	e9 fc fd ff ff       	jmp    80100049 <alltraps>

8010024d <vector55>:
.globl vector55
vector55:
  pushl $0
8010024d:	6a 00                	push   $0x0
  pushl $55
8010024f:	6a 37                	push   $0x37
  jmp alltraps
80100251:	e9 f3 fd ff ff       	jmp    80100049 <alltraps>

80100256 <vector56>:
.globl vector56
vector56:
  pushl $0
80100256:	6a 00                	push   $0x0
  pushl $56
80100258:	6a 38                	push   $0x38
  jmp alltraps
8010025a:	e9 ea fd ff ff       	jmp    80100049 <alltraps>

8010025f <vector57>:
.globl vector57
vector57:
  pushl $0
8010025f:	6a 00                	push   $0x0
  pushl $57
80100261:	6a 39                	push   $0x39
  jmp alltraps
80100263:	e9 e1 fd ff ff       	jmp    80100049 <alltraps>

80100268 <vector58>:
.globl vector58
vector58:
  pushl $0
80100268:	6a 00                	push   $0x0
  pushl $58
8010026a:	6a 3a                	push   $0x3a
  jmp alltraps
8010026c:	e9 d8 fd ff ff       	jmp    80100049 <alltraps>

80100271 <vector59>:
.globl vector59
vector59:
  pushl $0
80100271:	6a 00                	push   $0x0
  pushl $59
80100273:	6a 3b                	push   $0x3b
  jmp alltraps
80100275:	e9 cf fd ff ff       	jmp    80100049 <alltraps>

8010027a <vector60>:
.globl vector60
vector60:
  pushl $0
8010027a:	6a 00                	push   $0x0
  pushl $60
8010027c:	6a 3c                	push   $0x3c
  jmp alltraps
8010027e:	e9 c6 fd ff ff       	jmp    80100049 <alltraps>

80100283 <vector61>:
.globl vector61
vector61:
  pushl $0
80100283:	6a 00                	push   $0x0
  pushl $61
80100285:	6a 3d                	push   $0x3d
  jmp alltraps
80100287:	e9 bd fd ff ff       	jmp    80100049 <alltraps>

8010028c <vector62>:
.globl vector62
vector62:
  pushl $0
8010028c:	6a 00                	push   $0x0
  pushl $62
8010028e:	6a 3e                	push   $0x3e
  jmp alltraps
80100290:	e9 b4 fd ff ff       	jmp    80100049 <alltraps>

80100295 <vector63>:
.globl vector63
vector63:
  pushl $0
80100295:	6a 00                	push   $0x0
  pushl $63
80100297:	6a 3f                	push   $0x3f
  jmp alltraps
80100299:	e9 ab fd ff ff       	jmp    80100049 <alltraps>

8010029e <vector64>:
.globl vector64
vector64:
  pushl $0
8010029e:	6a 00                	push   $0x0
  pushl $64
801002a0:	6a 40                	push   $0x40
  jmp alltraps
801002a2:	e9 a2 fd ff ff       	jmp    80100049 <alltraps>

801002a7 <vector65>:
.globl vector65
vector65:
  pushl $0
801002a7:	6a 00                	push   $0x0
  pushl $65
801002a9:	6a 41                	push   $0x41
  jmp alltraps
801002ab:	e9 99 fd ff ff       	jmp    80100049 <alltraps>

801002b0 <vector66>:
.globl vector66
vector66:
  pushl $0
801002b0:	6a 00                	push   $0x0
  pushl $66
801002b2:	6a 42                	push   $0x42
  jmp alltraps
801002b4:	e9 90 fd ff ff       	jmp    80100049 <alltraps>

801002b9 <vector67>:
.globl vector67
vector67:
  pushl $0
801002b9:	6a 00                	push   $0x0
  pushl $67
801002bb:	6a 43                	push   $0x43
  jmp alltraps
801002bd:	e9 87 fd ff ff       	jmp    80100049 <alltraps>

801002c2 <vector68>:
.globl vector68
vector68:
  pushl $0
801002c2:	6a 00                	push   $0x0
  pushl $68
801002c4:	6a 44                	push   $0x44
  jmp alltraps
801002c6:	e9 7e fd ff ff       	jmp    80100049 <alltraps>

801002cb <vector69>:
.globl vector69
vector69:
  pushl $0
801002cb:	6a 00                	push   $0x0
  pushl $69
801002cd:	6a 45                	push   $0x45
  jmp alltraps
801002cf:	e9 75 fd ff ff       	jmp    80100049 <alltraps>

801002d4 <vector70>:
.globl vector70
vector70:
  pushl $0
801002d4:	6a 00                	push   $0x0
  pushl $70
801002d6:	6a 46                	push   $0x46
  jmp alltraps
801002d8:	e9 6c fd ff ff       	jmp    80100049 <alltraps>

801002dd <vector71>:
.globl vector71
vector71:
  pushl $0
801002dd:	6a 00                	push   $0x0
  pushl $71
801002df:	6a 47                	push   $0x47
  jmp alltraps
801002e1:	e9 63 fd ff ff       	jmp    80100049 <alltraps>

801002e6 <vector72>:
.globl vector72
vector72:
  pushl $0
801002e6:	6a 00                	push   $0x0
  pushl $72
801002e8:	6a 48                	push   $0x48
  jmp alltraps
801002ea:	e9 5a fd ff ff       	jmp    80100049 <alltraps>

801002ef <vector73>:
.globl vector73
vector73:
  pushl $0
801002ef:	6a 00                	push   $0x0
  pushl $73
801002f1:	6a 49                	push   $0x49
  jmp alltraps
801002f3:	e9 51 fd ff ff       	jmp    80100049 <alltraps>

801002f8 <vector74>:
.globl vector74
vector74:
  pushl $0
801002f8:	6a 00                	push   $0x0
  pushl $74
801002fa:	6a 4a                	push   $0x4a
  jmp alltraps
801002fc:	e9 48 fd ff ff       	jmp    80100049 <alltraps>

80100301 <vector75>:
.globl vector75
vector75:
  pushl $0
80100301:	6a 00                	push   $0x0
  pushl $75
80100303:	6a 4b                	push   $0x4b
  jmp alltraps
80100305:	e9 3f fd ff ff       	jmp    80100049 <alltraps>

8010030a <vector76>:
.globl vector76
vector76:
  pushl $0
8010030a:	6a 00                	push   $0x0
  pushl $76
8010030c:	6a 4c                	push   $0x4c
  jmp alltraps
8010030e:	e9 36 fd ff ff       	jmp    80100049 <alltraps>

80100313 <vector77>:
.globl vector77
vector77:
  pushl $0
80100313:	6a 00                	push   $0x0
  pushl $77
80100315:	6a 4d                	push   $0x4d
  jmp alltraps
80100317:	e9 2d fd ff ff       	jmp    80100049 <alltraps>

8010031c <vector78>:
.globl vector78
vector78:
  pushl $0
8010031c:	6a 00                	push   $0x0
  pushl $78
8010031e:	6a 4e                	push   $0x4e
  jmp alltraps
80100320:	e9 24 fd ff ff       	jmp    80100049 <alltraps>

80100325 <vector79>:
.globl vector79
vector79:
  pushl $0
80100325:	6a 00                	push   $0x0
  pushl $79
80100327:	6a 4f                	push   $0x4f
  jmp alltraps
80100329:	e9 1b fd ff ff       	jmp    80100049 <alltraps>

8010032e <vector80>:
.globl vector80
vector80:
  pushl $0
8010032e:	6a 00                	push   $0x0
  pushl $80
80100330:	6a 50                	push   $0x50
  jmp alltraps
80100332:	e9 12 fd ff ff       	jmp    80100049 <alltraps>

80100337 <vector81>:
.globl vector81
vector81:
  pushl $0
80100337:	6a 00                	push   $0x0
  pushl $81
80100339:	6a 51                	push   $0x51
  jmp alltraps
8010033b:	e9 09 fd ff ff       	jmp    80100049 <alltraps>

80100340 <vector82>:
.globl vector82
vector82:
  pushl $0
80100340:	6a 00                	push   $0x0
  pushl $82
80100342:	6a 52                	push   $0x52
  jmp alltraps
80100344:	e9 00 fd ff ff       	jmp    80100049 <alltraps>

80100349 <vector83>:
.globl vector83
vector83:
  pushl $0
80100349:	6a 00                	push   $0x0
  pushl $83
8010034b:	6a 53                	push   $0x53
  jmp alltraps
8010034d:	e9 f7 fc ff ff       	jmp    80100049 <alltraps>

80100352 <vector84>:
.globl vector84
vector84:
  pushl $0
80100352:	6a 00                	push   $0x0
  pushl $84
80100354:	6a 54                	push   $0x54
  jmp alltraps
80100356:	e9 ee fc ff ff       	jmp    80100049 <alltraps>

8010035b <vector85>:
.globl vector85
vector85:
  pushl $0
8010035b:	6a 00                	push   $0x0
  pushl $85
8010035d:	6a 55                	push   $0x55
  jmp alltraps
8010035f:	e9 e5 fc ff ff       	jmp    80100049 <alltraps>

80100364 <vector86>:
.globl vector86
vector86:
  pushl $0
80100364:	6a 00                	push   $0x0
  pushl $86
80100366:	6a 56                	push   $0x56
  jmp alltraps
80100368:	e9 dc fc ff ff       	jmp    80100049 <alltraps>

8010036d <vector87>:
.globl vector87
vector87:
  pushl $0
8010036d:	6a 00                	push   $0x0
  pushl $87
8010036f:	6a 57                	push   $0x57
  jmp alltraps
80100371:	e9 d3 fc ff ff       	jmp    80100049 <alltraps>

80100376 <vector88>:
.globl vector88
vector88:
  pushl $0
80100376:	6a 00                	push   $0x0
  pushl $88
80100378:	6a 58                	push   $0x58
  jmp alltraps
8010037a:	e9 ca fc ff ff       	jmp    80100049 <alltraps>

8010037f <vector89>:
.globl vector89
vector89:
  pushl $0
8010037f:	6a 00                	push   $0x0
  pushl $89
80100381:	6a 59                	push   $0x59
  jmp alltraps
80100383:	e9 c1 fc ff ff       	jmp    80100049 <alltraps>

80100388 <vector90>:
.globl vector90
vector90:
  pushl $0
80100388:	6a 00                	push   $0x0
  pushl $90
8010038a:	6a 5a                	push   $0x5a
  jmp alltraps
8010038c:	e9 b8 fc ff ff       	jmp    80100049 <alltraps>

80100391 <vector91>:
.globl vector91
vector91:
  pushl $0
80100391:	6a 00                	push   $0x0
  pushl $91
80100393:	6a 5b                	push   $0x5b
  jmp alltraps
80100395:	e9 af fc ff ff       	jmp    80100049 <alltraps>

8010039a <vector92>:
.globl vector92
vector92:
  pushl $0
8010039a:	6a 00                	push   $0x0
  pushl $92
8010039c:	6a 5c                	push   $0x5c
  jmp alltraps
8010039e:	e9 a6 fc ff ff       	jmp    80100049 <alltraps>

801003a3 <vector93>:
.globl vector93
vector93:
  pushl $0
801003a3:	6a 00                	push   $0x0
  pushl $93
801003a5:	6a 5d                	push   $0x5d
  jmp alltraps
801003a7:	e9 9d fc ff ff       	jmp    80100049 <alltraps>

801003ac <vector94>:
.globl vector94
vector94:
  pushl $0
801003ac:	6a 00                	push   $0x0
  pushl $94
801003ae:	6a 5e                	push   $0x5e
  jmp alltraps
801003b0:	e9 94 fc ff ff       	jmp    80100049 <alltraps>

801003b5 <vector95>:
.globl vector95
vector95:
  pushl $0
801003b5:	6a 00                	push   $0x0
  pushl $95
801003b7:	6a 5f                	push   $0x5f
  jmp alltraps
801003b9:	e9 8b fc ff ff       	jmp    80100049 <alltraps>

801003be <vector96>:
.globl vector96
vector96:
  pushl $0
801003be:	6a 00                	push   $0x0
  pushl $96
801003c0:	6a 60                	push   $0x60
  jmp alltraps
801003c2:	e9 82 fc ff ff       	jmp    80100049 <alltraps>

801003c7 <vector97>:
.globl vector97
vector97:
  pushl $0
801003c7:	6a 00                	push   $0x0
  pushl $97
801003c9:	6a 61                	push   $0x61
  jmp alltraps
801003cb:	e9 79 fc ff ff       	jmp    80100049 <alltraps>

801003d0 <vector98>:
.globl vector98
vector98:
  pushl $0
801003d0:	6a 00                	push   $0x0
  pushl $98
801003d2:	6a 62                	push   $0x62
  jmp alltraps
801003d4:	e9 70 fc ff ff       	jmp    80100049 <alltraps>

801003d9 <vector99>:
.globl vector99
vector99:
  pushl $0
801003d9:	6a 00                	push   $0x0
  pushl $99
801003db:	6a 63                	push   $0x63
  jmp alltraps
801003dd:	e9 67 fc ff ff       	jmp    80100049 <alltraps>

801003e2 <vector100>:
.globl vector100
vector100:
  pushl $0
801003e2:	6a 00                	push   $0x0
  pushl $100
801003e4:	6a 64                	push   $0x64
  jmp alltraps
801003e6:	e9 5e fc ff ff       	jmp    80100049 <alltraps>

801003eb <vector101>:
.globl vector101
vector101:
  pushl $0
801003eb:	6a 00                	push   $0x0
  pushl $101
801003ed:	6a 65                	push   $0x65
  jmp alltraps
801003ef:	e9 55 fc ff ff       	jmp    80100049 <alltraps>

801003f4 <vector102>:
.globl vector102
vector102:
  pushl $0
801003f4:	6a 00                	push   $0x0
  pushl $102
801003f6:	6a 66                	push   $0x66
  jmp alltraps
801003f8:	e9 4c fc ff ff       	jmp    80100049 <alltraps>

801003fd <vector103>:
.globl vector103
vector103:
  pushl $0
801003fd:	6a 00                	push   $0x0
  pushl $103
801003ff:	6a 67                	push   $0x67
  jmp alltraps
80100401:	e9 43 fc ff ff       	jmp    80100049 <alltraps>

80100406 <vector104>:
.globl vector104
vector104:
  pushl $0
80100406:	6a 00                	push   $0x0
  pushl $104
80100408:	6a 68                	push   $0x68
  jmp alltraps
8010040a:	e9 3a fc ff ff       	jmp    80100049 <alltraps>

8010040f <vector105>:
.globl vector105
vector105:
  pushl $0
8010040f:	6a 00                	push   $0x0
  pushl $105
80100411:	6a 69                	push   $0x69
  jmp alltraps
80100413:	e9 31 fc ff ff       	jmp    80100049 <alltraps>

80100418 <vector106>:
.globl vector106
vector106:
  pushl $0
80100418:	6a 00                	push   $0x0
  pushl $106
8010041a:	6a 6a                	push   $0x6a
  jmp alltraps
8010041c:	e9 28 fc ff ff       	jmp    80100049 <alltraps>

80100421 <vector107>:
.globl vector107
vector107:
  pushl $0
80100421:	6a 00                	push   $0x0
  pushl $107
80100423:	6a 6b                	push   $0x6b
  jmp alltraps
80100425:	e9 1f fc ff ff       	jmp    80100049 <alltraps>

8010042a <vector108>:
.globl vector108
vector108:
  pushl $0
8010042a:	6a 00                	push   $0x0
  pushl $108
8010042c:	6a 6c                	push   $0x6c
  jmp alltraps
8010042e:	e9 16 fc ff ff       	jmp    80100049 <alltraps>

80100433 <vector109>:
.globl vector109
vector109:
  pushl $0
80100433:	6a 00                	push   $0x0
  pushl $109
80100435:	6a 6d                	push   $0x6d
  jmp alltraps
80100437:	e9 0d fc ff ff       	jmp    80100049 <alltraps>

8010043c <vector110>:
.globl vector110
vector110:
  pushl $0
8010043c:	6a 00                	push   $0x0
  pushl $110
8010043e:	6a 6e                	push   $0x6e
  jmp alltraps
80100440:	e9 04 fc ff ff       	jmp    80100049 <alltraps>

80100445 <vector111>:
.globl vector111
vector111:
  pushl $0
80100445:	6a 00                	push   $0x0
  pushl $111
80100447:	6a 6f                	push   $0x6f
  jmp alltraps
80100449:	e9 fb fb ff ff       	jmp    80100049 <alltraps>

8010044e <vector112>:
.globl vector112
vector112:
  pushl $0
8010044e:	6a 00                	push   $0x0
  pushl $112
80100450:	6a 70                	push   $0x70
  jmp alltraps
80100452:	e9 f2 fb ff ff       	jmp    80100049 <alltraps>

80100457 <vector113>:
.globl vector113
vector113:
  pushl $0
80100457:	6a 00                	push   $0x0
  pushl $113
80100459:	6a 71                	push   $0x71
  jmp alltraps
8010045b:	e9 e9 fb ff ff       	jmp    80100049 <alltraps>

80100460 <vector114>:
.globl vector114
vector114:
  pushl $0
80100460:	6a 00                	push   $0x0
  pushl $114
80100462:	6a 72                	push   $0x72
  jmp alltraps
80100464:	e9 e0 fb ff ff       	jmp    80100049 <alltraps>

80100469 <vector115>:
.globl vector115
vector115:
  pushl $0
80100469:	6a 00                	push   $0x0
  pushl $115
8010046b:	6a 73                	push   $0x73
  jmp alltraps
8010046d:	e9 d7 fb ff ff       	jmp    80100049 <alltraps>

80100472 <vector116>:
.globl vector116
vector116:
  pushl $0
80100472:	6a 00                	push   $0x0
  pushl $116
80100474:	6a 74                	push   $0x74
  jmp alltraps
80100476:	e9 ce fb ff ff       	jmp    80100049 <alltraps>

8010047b <vector117>:
.globl vector117
vector117:
  pushl $0
8010047b:	6a 00                	push   $0x0
  pushl $117
8010047d:	6a 75                	push   $0x75
  jmp alltraps
8010047f:	e9 c5 fb ff ff       	jmp    80100049 <alltraps>

80100484 <vector118>:
.globl vector118
vector118:
  pushl $0
80100484:	6a 00                	push   $0x0
  pushl $118
80100486:	6a 76                	push   $0x76
  jmp alltraps
80100488:	e9 bc fb ff ff       	jmp    80100049 <alltraps>

8010048d <vector119>:
.globl vector119
vector119:
  pushl $0
8010048d:	6a 00                	push   $0x0
  pushl $119
8010048f:	6a 77                	push   $0x77
  jmp alltraps
80100491:	e9 b3 fb ff ff       	jmp    80100049 <alltraps>

80100496 <vector120>:
.globl vector120
vector120:
  pushl $0
80100496:	6a 00                	push   $0x0
  pushl $120
80100498:	6a 78                	push   $0x78
  jmp alltraps
8010049a:	e9 aa fb ff ff       	jmp    80100049 <alltraps>

8010049f <vector121>:
.globl vector121
vector121:
  pushl $0
8010049f:	6a 00                	push   $0x0
  pushl $121
801004a1:	6a 79                	push   $0x79
  jmp alltraps
801004a3:	e9 a1 fb ff ff       	jmp    80100049 <alltraps>

801004a8 <vector122>:
.globl vector122
vector122:
  pushl $0
801004a8:	6a 00                	push   $0x0
  pushl $122
801004aa:	6a 7a                	push   $0x7a
  jmp alltraps
801004ac:	e9 98 fb ff ff       	jmp    80100049 <alltraps>

801004b1 <vector123>:
.globl vector123
vector123:
  pushl $0
801004b1:	6a 00                	push   $0x0
  pushl $123
801004b3:	6a 7b                	push   $0x7b
  jmp alltraps
801004b5:	e9 8f fb ff ff       	jmp    80100049 <alltraps>

801004ba <vector124>:
.globl vector124
vector124:
  pushl $0
801004ba:	6a 00                	push   $0x0
  pushl $124
801004bc:	6a 7c                	push   $0x7c
  jmp alltraps
801004be:	e9 86 fb ff ff       	jmp    80100049 <alltraps>

801004c3 <vector125>:
.globl vector125
vector125:
  pushl $0
801004c3:	6a 00                	push   $0x0
  pushl $125
801004c5:	6a 7d                	push   $0x7d
  jmp alltraps
801004c7:	e9 7d fb ff ff       	jmp    80100049 <alltraps>

801004cc <vector126>:
.globl vector126
vector126:
  pushl $0
801004cc:	6a 00                	push   $0x0
  pushl $126
801004ce:	6a 7e                	push   $0x7e
  jmp alltraps
801004d0:	e9 74 fb ff ff       	jmp    80100049 <alltraps>

801004d5 <vector127>:
.globl vector127
vector127:
  pushl $0
801004d5:	6a 00                	push   $0x0
  pushl $127
801004d7:	6a 7f                	push   $0x7f
  jmp alltraps
801004d9:	e9 6b fb ff ff       	jmp    80100049 <alltraps>

801004de <vector128>:
.globl vector128
vector128:
  pushl $0
801004de:	6a 00                	push   $0x0
  pushl $128
801004e0:	68 80 00 00 00       	push   $0x80
  jmp alltraps
801004e5:	e9 5f fb ff ff       	jmp    80100049 <alltraps>

801004ea <vector129>:
.globl vector129
vector129:
  pushl $0
801004ea:	6a 00                	push   $0x0
  pushl $129
801004ec:	68 81 00 00 00       	push   $0x81
  jmp alltraps
801004f1:	e9 53 fb ff ff       	jmp    80100049 <alltraps>

801004f6 <vector130>:
.globl vector130
vector130:
  pushl $0
801004f6:	6a 00                	push   $0x0
  pushl $130
801004f8:	68 82 00 00 00       	push   $0x82
  jmp alltraps
801004fd:	e9 47 fb ff ff       	jmp    80100049 <alltraps>

80100502 <vector131>:
.globl vector131
vector131:
  pushl $0
80100502:	6a 00                	push   $0x0
  pushl $131
80100504:	68 83 00 00 00       	push   $0x83
  jmp alltraps
80100509:	e9 3b fb ff ff       	jmp    80100049 <alltraps>

8010050e <vector132>:
.globl vector132
vector132:
  pushl $0
8010050e:	6a 00                	push   $0x0
  pushl $132
80100510:	68 84 00 00 00       	push   $0x84
  jmp alltraps
80100515:	e9 2f fb ff ff       	jmp    80100049 <alltraps>

8010051a <vector133>:
.globl vector133
vector133:
  pushl $0
8010051a:	6a 00                	push   $0x0
  pushl $133
8010051c:	68 85 00 00 00       	push   $0x85
  jmp alltraps
80100521:	e9 23 fb ff ff       	jmp    80100049 <alltraps>

80100526 <vector134>:
.globl vector134
vector134:
  pushl $0
80100526:	6a 00                	push   $0x0
  pushl $134
80100528:	68 86 00 00 00       	push   $0x86
  jmp alltraps
8010052d:	e9 17 fb ff ff       	jmp    80100049 <alltraps>

80100532 <vector135>:
.globl vector135
vector135:
  pushl $0
80100532:	6a 00                	push   $0x0
  pushl $135
80100534:	68 87 00 00 00       	push   $0x87
  jmp alltraps
80100539:	e9 0b fb ff ff       	jmp    80100049 <alltraps>

8010053e <vector136>:
.globl vector136
vector136:
  pushl $0
8010053e:	6a 00                	push   $0x0
  pushl $136
80100540:	68 88 00 00 00       	push   $0x88
  jmp alltraps
80100545:	e9 ff fa ff ff       	jmp    80100049 <alltraps>

8010054a <vector137>:
.globl vector137
vector137:
  pushl $0
8010054a:	6a 00                	push   $0x0
  pushl $137
8010054c:	68 89 00 00 00       	push   $0x89
  jmp alltraps
80100551:	e9 f3 fa ff ff       	jmp    80100049 <alltraps>

80100556 <vector138>:
.globl vector138
vector138:
  pushl $0
80100556:	6a 00                	push   $0x0
  pushl $138
80100558:	68 8a 00 00 00       	push   $0x8a
  jmp alltraps
8010055d:	e9 e7 fa ff ff       	jmp    80100049 <alltraps>

80100562 <vector139>:
.globl vector139
vector139:
  pushl $0
80100562:	6a 00                	push   $0x0
  pushl $139
80100564:	68 8b 00 00 00       	push   $0x8b
  jmp alltraps
80100569:	e9 db fa ff ff       	jmp    80100049 <alltraps>

8010056e <vector140>:
.globl vector140
vector140:
  pushl $0
8010056e:	6a 00                	push   $0x0
  pushl $140
80100570:	68 8c 00 00 00       	push   $0x8c
  jmp alltraps
80100575:	e9 cf fa ff ff       	jmp    80100049 <alltraps>

8010057a <vector141>:
.globl vector141
vector141:
  pushl $0
8010057a:	6a 00                	push   $0x0
  pushl $141
8010057c:	68 8d 00 00 00       	push   $0x8d
  jmp alltraps
80100581:	e9 c3 fa ff ff       	jmp    80100049 <alltraps>

80100586 <vector142>:
.globl vector142
vector142:
  pushl $0
80100586:	6a 00                	push   $0x0
  pushl $142
80100588:	68 8e 00 00 00       	push   $0x8e
  jmp alltraps
8010058d:	e9 b7 fa ff ff       	jmp    80100049 <alltraps>

80100592 <vector143>:
.globl vector143
vector143:
  pushl $0
80100592:	6a 00                	push   $0x0
  pushl $143
80100594:	68 8f 00 00 00       	push   $0x8f
  jmp alltraps
80100599:	e9 ab fa ff ff       	jmp    80100049 <alltraps>

8010059e <vector144>:
.globl vector144
vector144:
  pushl $0
8010059e:	6a 00                	push   $0x0
  pushl $144
801005a0:	68 90 00 00 00       	push   $0x90
  jmp alltraps
801005a5:	e9 9f fa ff ff       	jmp    80100049 <alltraps>

801005aa <vector145>:
.globl vector145
vector145:
  pushl $0
801005aa:	6a 00                	push   $0x0
  pushl $145
801005ac:	68 91 00 00 00       	push   $0x91
  jmp alltraps
801005b1:	e9 93 fa ff ff       	jmp    80100049 <alltraps>

801005b6 <vector146>:
.globl vector146
vector146:
  pushl $0
801005b6:	6a 00                	push   $0x0
  pushl $146
801005b8:	68 92 00 00 00       	push   $0x92
  jmp alltraps
801005bd:	e9 87 fa ff ff       	jmp    80100049 <alltraps>

801005c2 <vector147>:
.globl vector147
vector147:
  pushl $0
801005c2:	6a 00                	push   $0x0
  pushl $147
801005c4:	68 93 00 00 00       	push   $0x93
  jmp alltraps
801005c9:	e9 7b fa ff ff       	jmp    80100049 <alltraps>

801005ce <vector148>:
.globl vector148
vector148:
  pushl $0
801005ce:	6a 00                	push   $0x0
  pushl $148
801005d0:	68 94 00 00 00       	push   $0x94
  jmp alltraps
801005d5:	e9 6f fa ff ff       	jmp    80100049 <alltraps>

801005da <vector149>:
.globl vector149
vector149:
  pushl $0
801005da:	6a 00                	push   $0x0
  pushl $149
801005dc:	68 95 00 00 00       	push   $0x95
  jmp alltraps
801005e1:	e9 63 fa ff ff       	jmp    80100049 <alltraps>

801005e6 <vector150>:
.globl vector150
vector150:
  pushl $0
801005e6:	6a 00                	push   $0x0
  pushl $150
801005e8:	68 96 00 00 00       	push   $0x96
  jmp alltraps
801005ed:	e9 57 fa ff ff       	jmp    80100049 <alltraps>

801005f2 <vector151>:
.globl vector151
vector151:
  pushl $0
801005f2:	6a 00                	push   $0x0
  pushl $151
801005f4:	68 97 00 00 00       	push   $0x97
  jmp alltraps
801005f9:	e9 4b fa ff ff       	jmp    80100049 <alltraps>

801005fe <vector152>:
.globl vector152
vector152:
  pushl $0
801005fe:	6a 00                	push   $0x0
  pushl $152
80100600:	68 98 00 00 00       	push   $0x98
  jmp alltraps
80100605:	e9 3f fa ff ff       	jmp    80100049 <alltraps>

8010060a <vector153>:
.globl vector153
vector153:
  pushl $0
8010060a:	6a 00                	push   $0x0
  pushl $153
8010060c:	68 99 00 00 00       	push   $0x99
  jmp alltraps
80100611:	e9 33 fa ff ff       	jmp    80100049 <alltraps>

80100616 <vector154>:
.globl vector154
vector154:
  pushl $0
80100616:	6a 00                	push   $0x0
  pushl $154
80100618:	68 9a 00 00 00       	push   $0x9a
  jmp alltraps
8010061d:	e9 27 fa ff ff       	jmp    80100049 <alltraps>

80100622 <vector155>:
.globl vector155
vector155:
  pushl $0
80100622:	6a 00                	push   $0x0
  pushl $155
80100624:	68 9b 00 00 00       	push   $0x9b
  jmp alltraps
80100629:	e9 1b fa ff ff       	jmp    80100049 <alltraps>

8010062e <vector156>:
.globl vector156
vector156:
  pushl $0
8010062e:	6a 00                	push   $0x0
  pushl $156
80100630:	68 9c 00 00 00       	push   $0x9c
  jmp alltraps
80100635:	e9 0f fa ff ff       	jmp    80100049 <alltraps>

8010063a <vector157>:
.globl vector157
vector157:
  pushl $0
8010063a:	6a 00                	push   $0x0
  pushl $157
8010063c:	68 9d 00 00 00       	push   $0x9d
  jmp alltraps
80100641:	e9 03 fa ff ff       	jmp    80100049 <alltraps>

80100646 <vector158>:
.globl vector158
vector158:
  pushl $0
80100646:	6a 00                	push   $0x0
  pushl $158
80100648:	68 9e 00 00 00       	push   $0x9e
  jmp alltraps
8010064d:	e9 f7 f9 ff ff       	jmp    80100049 <alltraps>

80100652 <vector159>:
.globl vector159
vector159:
  pushl $0
80100652:	6a 00                	push   $0x0
  pushl $159
80100654:	68 9f 00 00 00       	push   $0x9f
  jmp alltraps
80100659:	e9 eb f9 ff ff       	jmp    80100049 <alltraps>

8010065e <vector160>:
.globl vector160
vector160:
  pushl $0
8010065e:	6a 00                	push   $0x0
  pushl $160
80100660:	68 a0 00 00 00       	push   $0xa0
  jmp alltraps
80100665:	e9 df f9 ff ff       	jmp    80100049 <alltraps>

8010066a <vector161>:
.globl vector161
vector161:
  pushl $0
8010066a:	6a 00                	push   $0x0
  pushl $161
8010066c:	68 a1 00 00 00       	push   $0xa1
  jmp alltraps
80100671:	e9 d3 f9 ff ff       	jmp    80100049 <alltraps>

80100676 <vector162>:
.globl vector162
vector162:
  pushl $0
80100676:	6a 00                	push   $0x0
  pushl $162
80100678:	68 a2 00 00 00       	push   $0xa2
  jmp alltraps
8010067d:	e9 c7 f9 ff ff       	jmp    80100049 <alltraps>

80100682 <vector163>:
.globl vector163
vector163:
  pushl $0
80100682:	6a 00                	push   $0x0
  pushl $163
80100684:	68 a3 00 00 00       	push   $0xa3
  jmp alltraps
80100689:	e9 bb f9 ff ff       	jmp    80100049 <alltraps>

8010068e <vector164>:
.globl vector164
vector164:
  pushl $0
8010068e:	6a 00                	push   $0x0
  pushl $164
80100690:	68 a4 00 00 00       	push   $0xa4
  jmp alltraps
80100695:	e9 af f9 ff ff       	jmp    80100049 <alltraps>

8010069a <vector165>:
.globl vector165
vector165:
  pushl $0
8010069a:	6a 00                	push   $0x0
  pushl $165
8010069c:	68 a5 00 00 00       	push   $0xa5
  jmp alltraps
801006a1:	e9 a3 f9 ff ff       	jmp    80100049 <alltraps>

801006a6 <vector166>:
.globl vector166
vector166:
  pushl $0
801006a6:	6a 00                	push   $0x0
  pushl $166
801006a8:	68 a6 00 00 00       	push   $0xa6
  jmp alltraps
801006ad:	e9 97 f9 ff ff       	jmp    80100049 <alltraps>

801006b2 <vector167>:
.globl vector167
vector167:
  pushl $0
801006b2:	6a 00                	push   $0x0
  pushl $167
801006b4:	68 a7 00 00 00       	push   $0xa7
  jmp alltraps
801006b9:	e9 8b f9 ff ff       	jmp    80100049 <alltraps>

801006be <vector168>:
.globl vector168
vector168:
  pushl $0
801006be:	6a 00                	push   $0x0
  pushl $168
801006c0:	68 a8 00 00 00       	push   $0xa8
  jmp alltraps
801006c5:	e9 7f f9 ff ff       	jmp    80100049 <alltraps>

801006ca <vector169>:
.globl vector169
vector169:
  pushl $0
801006ca:	6a 00                	push   $0x0
  pushl $169
801006cc:	68 a9 00 00 00       	push   $0xa9
  jmp alltraps
801006d1:	e9 73 f9 ff ff       	jmp    80100049 <alltraps>

801006d6 <vector170>:
.globl vector170
vector170:
  pushl $0
801006d6:	6a 00                	push   $0x0
  pushl $170
801006d8:	68 aa 00 00 00       	push   $0xaa
  jmp alltraps
801006dd:	e9 67 f9 ff ff       	jmp    80100049 <alltraps>

801006e2 <vector171>:
.globl vector171
vector171:
  pushl $0
801006e2:	6a 00                	push   $0x0
  pushl $171
801006e4:	68 ab 00 00 00       	push   $0xab
  jmp alltraps
801006e9:	e9 5b f9 ff ff       	jmp    80100049 <alltraps>

801006ee <vector172>:
.globl vector172
vector172:
  pushl $0
801006ee:	6a 00                	push   $0x0
  pushl $172
801006f0:	68 ac 00 00 00       	push   $0xac
  jmp alltraps
801006f5:	e9 4f f9 ff ff       	jmp    80100049 <alltraps>

801006fa <vector173>:
.globl vector173
vector173:
  pushl $0
801006fa:	6a 00                	push   $0x0
  pushl $173
801006fc:	68 ad 00 00 00       	push   $0xad
  jmp alltraps
80100701:	e9 43 f9 ff ff       	jmp    80100049 <alltraps>

80100706 <vector174>:
.globl vector174
vector174:
  pushl $0
80100706:	6a 00                	push   $0x0
  pushl $174
80100708:	68 ae 00 00 00       	push   $0xae
  jmp alltraps
8010070d:	e9 37 f9 ff ff       	jmp    80100049 <alltraps>

80100712 <vector175>:
.globl vector175
vector175:
  pushl $0
80100712:	6a 00                	push   $0x0
  pushl $175
80100714:	68 af 00 00 00       	push   $0xaf
  jmp alltraps
80100719:	e9 2b f9 ff ff       	jmp    80100049 <alltraps>

8010071e <vector176>:
.globl vector176
vector176:
  pushl $0
8010071e:	6a 00                	push   $0x0
  pushl $176
80100720:	68 b0 00 00 00       	push   $0xb0
  jmp alltraps
80100725:	e9 1f f9 ff ff       	jmp    80100049 <alltraps>

8010072a <vector177>:
.globl vector177
vector177:
  pushl $0
8010072a:	6a 00                	push   $0x0
  pushl $177
8010072c:	68 b1 00 00 00       	push   $0xb1
  jmp alltraps
80100731:	e9 13 f9 ff ff       	jmp    80100049 <alltraps>

80100736 <vector178>:
.globl vector178
vector178:
  pushl $0
80100736:	6a 00                	push   $0x0
  pushl $178
80100738:	68 b2 00 00 00       	push   $0xb2
  jmp alltraps
8010073d:	e9 07 f9 ff ff       	jmp    80100049 <alltraps>

80100742 <vector179>:
.globl vector179
vector179:
  pushl $0
80100742:	6a 00                	push   $0x0
  pushl $179
80100744:	68 b3 00 00 00       	push   $0xb3
  jmp alltraps
80100749:	e9 fb f8 ff ff       	jmp    80100049 <alltraps>

8010074e <vector180>:
.globl vector180
vector180:
  pushl $0
8010074e:	6a 00                	push   $0x0
  pushl $180
80100750:	68 b4 00 00 00       	push   $0xb4
  jmp alltraps
80100755:	e9 ef f8 ff ff       	jmp    80100049 <alltraps>

8010075a <vector181>:
.globl vector181
vector181:
  pushl $0
8010075a:	6a 00                	push   $0x0
  pushl $181
8010075c:	68 b5 00 00 00       	push   $0xb5
  jmp alltraps
80100761:	e9 e3 f8 ff ff       	jmp    80100049 <alltraps>

80100766 <vector182>:
.globl vector182
vector182:
  pushl $0
80100766:	6a 00                	push   $0x0
  pushl $182
80100768:	68 b6 00 00 00       	push   $0xb6
  jmp alltraps
8010076d:	e9 d7 f8 ff ff       	jmp    80100049 <alltraps>

80100772 <vector183>:
.globl vector183
vector183:
  pushl $0
80100772:	6a 00                	push   $0x0
  pushl $183
80100774:	68 b7 00 00 00       	push   $0xb7
  jmp alltraps
80100779:	e9 cb f8 ff ff       	jmp    80100049 <alltraps>

8010077e <vector184>:
.globl vector184
vector184:
  pushl $0
8010077e:	6a 00                	push   $0x0
  pushl $184
80100780:	68 b8 00 00 00       	push   $0xb8
  jmp alltraps
80100785:	e9 bf f8 ff ff       	jmp    80100049 <alltraps>

8010078a <vector185>:
.globl vector185
vector185:
  pushl $0
8010078a:	6a 00                	push   $0x0
  pushl $185
8010078c:	68 b9 00 00 00       	push   $0xb9
  jmp alltraps
80100791:	e9 b3 f8 ff ff       	jmp    80100049 <alltraps>

80100796 <vector186>:
.globl vector186
vector186:
  pushl $0
80100796:	6a 00                	push   $0x0
  pushl $186
80100798:	68 ba 00 00 00       	push   $0xba
  jmp alltraps
8010079d:	e9 a7 f8 ff ff       	jmp    80100049 <alltraps>

801007a2 <vector187>:
.globl vector187
vector187:
  pushl $0
801007a2:	6a 00                	push   $0x0
  pushl $187
801007a4:	68 bb 00 00 00       	push   $0xbb
  jmp alltraps
801007a9:	e9 9b f8 ff ff       	jmp    80100049 <alltraps>

801007ae <vector188>:
.globl vector188
vector188:
  pushl $0
801007ae:	6a 00                	push   $0x0
  pushl $188
801007b0:	68 bc 00 00 00       	push   $0xbc
  jmp alltraps
801007b5:	e9 8f f8 ff ff       	jmp    80100049 <alltraps>

801007ba <vector189>:
.globl vector189
vector189:
  pushl $0
801007ba:	6a 00                	push   $0x0
  pushl $189
801007bc:	68 bd 00 00 00       	push   $0xbd
  jmp alltraps
801007c1:	e9 83 f8 ff ff       	jmp    80100049 <alltraps>

801007c6 <vector190>:
.globl vector190
vector190:
  pushl $0
801007c6:	6a 00                	push   $0x0
  pushl $190
801007c8:	68 be 00 00 00       	push   $0xbe
  jmp alltraps
801007cd:	e9 77 f8 ff ff       	jmp    80100049 <alltraps>

801007d2 <vector191>:
.globl vector191
vector191:
  pushl $0
801007d2:	6a 00                	push   $0x0
  pushl $191
801007d4:	68 bf 00 00 00       	push   $0xbf
  jmp alltraps
801007d9:	e9 6b f8 ff ff       	jmp    80100049 <alltraps>

801007de <vector192>:
.globl vector192
vector192:
  pushl $0
801007de:	6a 00                	push   $0x0
  pushl $192
801007e0:	68 c0 00 00 00       	push   $0xc0
  jmp alltraps
801007e5:	e9 5f f8 ff ff       	jmp    80100049 <alltraps>

801007ea <vector193>:
.globl vector193
vector193:
  pushl $0
801007ea:	6a 00                	push   $0x0
  pushl $193
801007ec:	68 c1 00 00 00       	push   $0xc1
  jmp alltraps
801007f1:	e9 53 f8 ff ff       	jmp    80100049 <alltraps>

801007f6 <vector194>:
.globl vector194
vector194:
  pushl $0
801007f6:	6a 00                	push   $0x0
  pushl $194
801007f8:	68 c2 00 00 00       	push   $0xc2
  jmp alltraps
801007fd:	e9 47 f8 ff ff       	jmp    80100049 <alltraps>

80100802 <vector195>:
.globl vector195
vector195:
  pushl $0
80100802:	6a 00                	push   $0x0
  pushl $195
80100804:	68 c3 00 00 00       	push   $0xc3
  jmp alltraps
80100809:	e9 3b f8 ff ff       	jmp    80100049 <alltraps>

8010080e <vector196>:
.globl vector196
vector196:
  pushl $0
8010080e:	6a 00                	push   $0x0
  pushl $196
80100810:	68 c4 00 00 00       	push   $0xc4
  jmp alltraps
80100815:	e9 2f f8 ff ff       	jmp    80100049 <alltraps>

8010081a <vector197>:
.globl vector197
vector197:
  pushl $0
8010081a:	6a 00                	push   $0x0
  pushl $197
8010081c:	68 c5 00 00 00       	push   $0xc5
  jmp alltraps
80100821:	e9 23 f8 ff ff       	jmp    80100049 <alltraps>

80100826 <vector198>:
.globl vector198
vector198:
  pushl $0
80100826:	6a 00                	push   $0x0
  pushl $198
80100828:	68 c6 00 00 00       	push   $0xc6
  jmp alltraps
8010082d:	e9 17 f8 ff ff       	jmp    80100049 <alltraps>

80100832 <vector199>:
.globl vector199
vector199:
  pushl $0
80100832:	6a 00                	push   $0x0
  pushl $199
80100834:	68 c7 00 00 00       	push   $0xc7
  jmp alltraps
80100839:	e9 0b f8 ff ff       	jmp    80100049 <alltraps>

8010083e <vector200>:
.globl vector200
vector200:
  pushl $0
8010083e:	6a 00                	push   $0x0
  pushl $200
80100840:	68 c8 00 00 00       	push   $0xc8
  jmp alltraps
80100845:	e9 ff f7 ff ff       	jmp    80100049 <alltraps>

8010084a <vector201>:
.globl vector201
vector201:
  pushl $0
8010084a:	6a 00                	push   $0x0
  pushl $201
8010084c:	68 c9 00 00 00       	push   $0xc9
  jmp alltraps
80100851:	e9 f3 f7 ff ff       	jmp    80100049 <alltraps>

80100856 <vector202>:
.globl vector202
vector202:
  pushl $0
80100856:	6a 00                	push   $0x0
  pushl $202
80100858:	68 ca 00 00 00       	push   $0xca
  jmp alltraps
8010085d:	e9 e7 f7 ff ff       	jmp    80100049 <alltraps>

80100862 <vector203>:
.globl vector203
vector203:
  pushl $0
80100862:	6a 00                	push   $0x0
  pushl $203
80100864:	68 cb 00 00 00       	push   $0xcb
  jmp alltraps
80100869:	e9 db f7 ff ff       	jmp    80100049 <alltraps>

8010086e <vector204>:
.globl vector204
vector204:
  pushl $0
8010086e:	6a 00                	push   $0x0
  pushl $204
80100870:	68 cc 00 00 00       	push   $0xcc
  jmp alltraps
80100875:	e9 cf f7 ff ff       	jmp    80100049 <alltraps>

8010087a <vector205>:
.globl vector205
vector205:
  pushl $0
8010087a:	6a 00                	push   $0x0
  pushl $205
8010087c:	68 cd 00 00 00       	push   $0xcd
  jmp alltraps
80100881:	e9 c3 f7 ff ff       	jmp    80100049 <alltraps>

80100886 <vector206>:
.globl vector206
vector206:
  pushl $0
80100886:	6a 00                	push   $0x0
  pushl $206
80100888:	68 ce 00 00 00       	push   $0xce
  jmp alltraps
8010088d:	e9 b7 f7 ff ff       	jmp    80100049 <alltraps>

80100892 <vector207>:
.globl vector207
vector207:
  pushl $0
80100892:	6a 00                	push   $0x0
  pushl $207
80100894:	68 cf 00 00 00       	push   $0xcf
  jmp alltraps
80100899:	e9 ab f7 ff ff       	jmp    80100049 <alltraps>

8010089e <vector208>:
.globl vector208
vector208:
  pushl $0
8010089e:	6a 00                	push   $0x0
  pushl $208
801008a0:	68 d0 00 00 00       	push   $0xd0
  jmp alltraps
801008a5:	e9 9f f7 ff ff       	jmp    80100049 <alltraps>

801008aa <vector209>:
.globl vector209
vector209:
  pushl $0
801008aa:	6a 00                	push   $0x0
  pushl $209
801008ac:	68 d1 00 00 00       	push   $0xd1
  jmp alltraps
801008b1:	e9 93 f7 ff ff       	jmp    80100049 <alltraps>

801008b6 <vector210>:
.globl vector210
vector210:
  pushl $0
801008b6:	6a 00                	push   $0x0
  pushl $210
801008b8:	68 d2 00 00 00       	push   $0xd2
  jmp alltraps
801008bd:	e9 87 f7 ff ff       	jmp    80100049 <alltraps>

801008c2 <vector211>:
.globl vector211
vector211:
  pushl $0
801008c2:	6a 00                	push   $0x0
  pushl $211
801008c4:	68 d3 00 00 00       	push   $0xd3
  jmp alltraps
801008c9:	e9 7b f7 ff ff       	jmp    80100049 <alltraps>

801008ce <vector212>:
.globl vector212
vector212:
  pushl $0
801008ce:	6a 00                	push   $0x0
  pushl $212
801008d0:	68 d4 00 00 00       	push   $0xd4
  jmp alltraps
801008d5:	e9 6f f7 ff ff       	jmp    80100049 <alltraps>

801008da <vector213>:
.globl vector213
vector213:
  pushl $0
801008da:	6a 00                	push   $0x0
  pushl $213
801008dc:	68 d5 00 00 00       	push   $0xd5
  jmp alltraps
801008e1:	e9 63 f7 ff ff       	jmp    80100049 <alltraps>

801008e6 <vector214>:
.globl vector214
vector214:
  pushl $0
801008e6:	6a 00                	push   $0x0
  pushl $214
801008e8:	68 d6 00 00 00       	push   $0xd6
  jmp alltraps
801008ed:	e9 57 f7 ff ff       	jmp    80100049 <alltraps>

801008f2 <vector215>:
.globl vector215
vector215:
  pushl $0
801008f2:	6a 00                	push   $0x0
  pushl $215
801008f4:	68 d7 00 00 00       	push   $0xd7
  jmp alltraps
801008f9:	e9 4b f7 ff ff       	jmp    80100049 <alltraps>

801008fe <vector216>:
.globl vector216
vector216:
  pushl $0
801008fe:	6a 00                	push   $0x0
  pushl $216
80100900:	68 d8 00 00 00       	push   $0xd8
  jmp alltraps
80100905:	e9 3f f7 ff ff       	jmp    80100049 <alltraps>

8010090a <vector217>:
.globl vector217
vector217:
  pushl $0
8010090a:	6a 00                	push   $0x0
  pushl $217
8010090c:	68 d9 00 00 00       	push   $0xd9
  jmp alltraps
80100911:	e9 33 f7 ff ff       	jmp    80100049 <alltraps>

80100916 <vector218>:
.globl vector218
vector218:
  pushl $0
80100916:	6a 00                	push   $0x0
  pushl $218
80100918:	68 da 00 00 00       	push   $0xda
  jmp alltraps
8010091d:	e9 27 f7 ff ff       	jmp    80100049 <alltraps>

80100922 <vector219>:
.globl vector219
vector219:
  pushl $0
80100922:	6a 00                	push   $0x0
  pushl $219
80100924:	68 db 00 00 00       	push   $0xdb
  jmp alltraps
80100929:	e9 1b f7 ff ff       	jmp    80100049 <alltraps>

8010092e <vector220>:
.globl vector220
vector220:
  pushl $0
8010092e:	6a 00                	push   $0x0
  pushl $220
80100930:	68 dc 00 00 00       	push   $0xdc
  jmp alltraps
80100935:	e9 0f f7 ff ff       	jmp    80100049 <alltraps>

8010093a <vector221>:
.globl vector221
vector221:
  pushl $0
8010093a:	6a 00                	push   $0x0
  pushl $221
8010093c:	68 dd 00 00 00       	push   $0xdd
  jmp alltraps
80100941:	e9 03 f7 ff ff       	jmp    80100049 <alltraps>

80100946 <vector222>:
.globl vector222
vector222:
  pushl $0
80100946:	6a 00                	push   $0x0
  pushl $222
80100948:	68 de 00 00 00       	push   $0xde
  jmp alltraps
8010094d:	e9 f7 f6 ff ff       	jmp    80100049 <alltraps>

80100952 <vector223>:
.globl vector223
vector223:
  pushl $0
80100952:	6a 00                	push   $0x0
  pushl $223
80100954:	68 df 00 00 00       	push   $0xdf
  jmp alltraps
80100959:	e9 eb f6 ff ff       	jmp    80100049 <alltraps>

8010095e <vector224>:
.globl vector224
vector224:
  pushl $0
8010095e:	6a 00                	push   $0x0
  pushl $224
80100960:	68 e0 00 00 00       	push   $0xe0
  jmp alltraps
80100965:	e9 df f6 ff ff       	jmp    80100049 <alltraps>

8010096a <vector225>:
.globl vector225
vector225:
  pushl $0
8010096a:	6a 00                	push   $0x0
  pushl $225
8010096c:	68 e1 00 00 00       	push   $0xe1
  jmp alltraps
80100971:	e9 d3 f6 ff ff       	jmp    80100049 <alltraps>

80100976 <vector226>:
.globl vector226
vector226:
  pushl $0
80100976:	6a 00                	push   $0x0
  pushl $226
80100978:	68 e2 00 00 00       	push   $0xe2
  jmp alltraps
8010097d:	e9 c7 f6 ff ff       	jmp    80100049 <alltraps>

80100982 <vector227>:
.globl vector227
vector227:
  pushl $0
80100982:	6a 00                	push   $0x0
  pushl $227
80100984:	68 e3 00 00 00       	push   $0xe3
  jmp alltraps
80100989:	e9 bb f6 ff ff       	jmp    80100049 <alltraps>

8010098e <vector228>:
.globl vector228
vector228:
  pushl $0
8010098e:	6a 00                	push   $0x0
  pushl $228
80100990:	68 e4 00 00 00       	push   $0xe4
  jmp alltraps
80100995:	e9 af f6 ff ff       	jmp    80100049 <alltraps>

8010099a <vector229>:
.globl vector229
vector229:
  pushl $0
8010099a:	6a 00                	push   $0x0
  pushl $229
8010099c:	68 e5 00 00 00       	push   $0xe5
  jmp alltraps
801009a1:	e9 a3 f6 ff ff       	jmp    80100049 <alltraps>

801009a6 <vector230>:
.globl vector230
vector230:
  pushl $0
801009a6:	6a 00                	push   $0x0
  pushl $230
801009a8:	68 e6 00 00 00       	push   $0xe6
  jmp alltraps
801009ad:	e9 97 f6 ff ff       	jmp    80100049 <alltraps>

801009b2 <vector231>:
.globl vector231
vector231:
  pushl $0
801009b2:	6a 00                	push   $0x0
  pushl $231
801009b4:	68 e7 00 00 00       	push   $0xe7
  jmp alltraps
801009b9:	e9 8b f6 ff ff       	jmp    80100049 <alltraps>

801009be <vector232>:
.globl vector232
vector232:
  pushl $0
801009be:	6a 00                	push   $0x0
  pushl $232
801009c0:	68 e8 00 00 00       	push   $0xe8
  jmp alltraps
801009c5:	e9 7f f6 ff ff       	jmp    80100049 <alltraps>

801009ca <vector233>:
.globl vector233
vector233:
  pushl $0
801009ca:	6a 00                	push   $0x0
  pushl $233
801009cc:	68 e9 00 00 00       	push   $0xe9
  jmp alltraps
801009d1:	e9 73 f6 ff ff       	jmp    80100049 <alltraps>

801009d6 <vector234>:
.globl vector234
vector234:
  pushl $0
801009d6:	6a 00                	push   $0x0
  pushl $234
801009d8:	68 ea 00 00 00       	push   $0xea
  jmp alltraps
801009dd:	e9 67 f6 ff ff       	jmp    80100049 <alltraps>

801009e2 <vector235>:
.globl vector235
vector235:
  pushl $0
801009e2:	6a 00                	push   $0x0
  pushl $235
801009e4:	68 eb 00 00 00       	push   $0xeb
  jmp alltraps
801009e9:	e9 5b f6 ff ff       	jmp    80100049 <alltraps>

801009ee <vector236>:
.globl vector236
vector236:
  pushl $0
801009ee:	6a 00                	push   $0x0
  pushl $236
801009f0:	68 ec 00 00 00       	push   $0xec
  jmp alltraps
801009f5:	e9 4f f6 ff ff       	jmp    80100049 <alltraps>

801009fa <vector237>:
.globl vector237
vector237:
  pushl $0
801009fa:	6a 00                	push   $0x0
  pushl $237
801009fc:	68 ed 00 00 00       	push   $0xed
  jmp alltraps
80100a01:	e9 43 f6 ff ff       	jmp    80100049 <alltraps>

80100a06 <vector238>:
.globl vector238
vector238:
  pushl $0
80100a06:	6a 00                	push   $0x0
  pushl $238
80100a08:	68 ee 00 00 00       	push   $0xee
  jmp alltraps
80100a0d:	e9 37 f6 ff ff       	jmp    80100049 <alltraps>

80100a12 <vector239>:
.globl vector239
vector239:
  pushl $0
80100a12:	6a 00                	push   $0x0
  pushl $239
80100a14:	68 ef 00 00 00       	push   $0xef
  jmp alltraps
80100a19:	e9 2b f6 ff ff       	jmp    80100049 <alltraps>

80100a1e <vector240>:
.globl vector240
vector240:
  pushl $0
80100a1e:	6a 00                	push   $0x0
  pushl $240
80100a20:	68 f0 00 00 00       	push   $0xf0
  jmp alltraps
80100a25:	e9 1f f6 ff ff       	jmp    80100049 <alltraps>

80100a2a <vector241>:
.globl vector241
vector241:
  pushl $0
80100a2a:	6a 00                	push   $0x0
  pushl $241
80100a2c:	68 f1 00 00 00       	push   $0xf1
  jmp alltraps
80100a31:	e9 13 f6 ff ff       	jmp    80100049 <alltraps>

80100a36 <vector242>:
.globl vector242
vector242:
  pushl $0
80100a36:	6a 00                	push   $0x0
  pushl $242
80100a38:	68 f2 00 00 00       	push   $0xf2
  jmp alltraps
80100a3d:	e9 07 f6 ff ff       	jmp    80100049 <alltraps>

80100a42 <vector243>:
.globl vector243
vector243:
  pushl $0
80100a42:	6a 00                	push   $0x0
  pushl $243
80100a44:	68 f3 00 00 00       	push   $0xf3
  jmp alltraps
80100a49:	e9 fb f5 ff ff       	jmp    80100049 <alltraps>

80100a4e <vector244>:
.globl vector244
vector244:
  pushl $0
80100a4e:	6a 00                	push   $0x0
  pushl $244
80100a50:	68 f4 00 00 00       	push   $0xf4
  jmp alltraps
80100a55:	e9 ef f5 ff ff       	jmp    80100049 <alltraps>

80100a5a <vector245>:
.globl vector245
vector245:
  pushl $0
80100a5a:	6a 00                	push   $0x0
  pushl $245
80100a5c:	68 f5 00 00 00       	push   $0xf5
  jmp alltraps
80100a61:	e9 e3 f5 ff ff       	jmp    80100049 <alltraps>

80100a66 <vector246>:
.globl vector246
vector246:
  pushl $0
80100a66:	6a 00                	push   $0x0
  pushl $246
80100a68:	68 f6 00 00 00       	push   $0xf6
  jmp alltraps
80100a6d:	e9 d7 f5 ff ff       	jmp    80100049 <alltraps>

80100a72 <vector247>:
.globl vector247
vector247:
  pushl $0
80100a72:	6a 00                	push   $0x0
  pushl $247
80100a74:	68 f7 00 00 00       	push   $0xf7
  jmp alltraps
80100a79:	e9 cb f5 ff ff       	jmp    80100049 <alltraps>

80100a7e <vector248>:
.globl vector248
vector248:
  pushl $0
80100a7e:	6a 00                	push   $0x0
  pushl $248
80100a80:	68 f8 00 00 00       	push   $0xf8
  jmp alltraps
80100a85:	e9 bf f5 ff ff       	jmp    80100049 <alltraps>

80100a8a <vector249>:
.globl vector249
vector249:
  pushl $0
80100a8a:	6a 00                	push   $0x0
  pushl $249
80100a8c:	68 f9 00 00 00       	push   $0xf9
  jmp alltraps
80100a91:	e9 b3 f5 ff ff       	jmp    80100049 <alltraps>

80100a96 <vector250>:
.globl vector250
vector250:
  pushl $0
80100a96:	6a 00                	push   $0x0
  pushl $250
80100a98:	68 fa 00 00 00       	push   $0xfa
  jmp alltraps
80100a9d:	e9 a7 f5 ff ff       	jmp    80100049 <alltraps>

80100aa2 <vector251>:
.globl vector251
vector251:
  pushl $0
80100aa2:	6a 00                	push   $0x0
  pushl $251
80100aa4:	68 fb 00 00 00       	push   $0xfb
  jmp alltraps
80100aa9:	e9 9b f5 ff ff       	jmp    80100049 <alltraps>

80100aae <vector252>:
.globl vector252
vector252:
  pushl $0
80100aae:	6a 00                	push   $0x0
  pushl $252
80100ab0:	68 fc 00 00 00       	push   $0xfc
  jmp alltraps
80100ab5:	e9 8f f5 ff ff       	jmp    80100049 <alltraps>

80100aba <vector253>:
.globl vector253
vector253:
  pushl $0
80100aba:	6a 00                	push   $0x0
  pushl $253
80100abc:	68 fd 00 00 00       	push   $0xfd
  jmp alltraps
80100ac1:	e9 83 f5 ff ff       	jmp    80100049 <alltraps>

80100ac6 <vector254>:
.globl vector254
vector254:
  pushl $0
80100ac6:	6a 00                	push   $0x0
  pushl $254
80100ac8:	68 fe 00 00 00       	push   $0xfe
  jmp alltraps
80100acd:	e9 77 f5 ff ff       	jmp    80100049 <alltraps>

80100ad2 <vector255>:
.globl vector255
vector255:
  pushl $0
80100ad2:	6a 00                	push   $0x0
  pushl $255
80100ad4:	68 ff 00 00 00       	push   $0xff
  jmp alltraps
80100ad9:	e9 6b f5 ff ff       	jmp    80100049 <alltraps>

80100ade <binit>:
    // Linked list of all buffers, through prev/next.
    // head.next is most recently used.
    struct buf head;
} bcache;

void binit(void) {
80100ade:	55                   	push   %ebp
80100adf:	89 e5                	mov    %esp,%ebp
80100ae1:	83 ec 18             	sub    $0x18,%esp
    struct buf* b;

    initlock(&bcache.lock, "bcache");
80100ae4:	83 ec 08             	sub    $0x8,%esp
80100ae7:	68 ac 8d 10 80       	push   $0x80108dac
80100aec:	68 a0 c1 10 80       	push   $0x8010c1a0
80100af1:	e8 bb 56 00 00       	call   801061b1 <initlock>
80100af6:	83 c4 10             	add    $0x10,%esp

    //PAGEBREAK!
    // Create linked list of buffers
    bcache.head.prev = &bcache.head;
80100af9:	c7 05 ec 08 11 80 9c 	movl   $0x8011089c,0x801108ec
80100b00:	08 11 80 
    bcache.head.next = &bcache.head;
80100b03:	c7 05 f0 08 11 80 9c 	movl   $0x8011089c,0x801108f0
80100b0a:	08 11 80 
    for (b = bcache.buf; b < bcache.buf + NBUF; b++) {
80100b0d:	c7 45 f4 d4 c1 10 80 	movl   $0x8010c1d4,-0xc(%ebp)
80100b14:	eb 47                	jmp    80100b5d <binit+0x7f>
        b->next = bcache.head.next;
80100b16:	8b 15 f0 08 11 80    	mov    0x801108f0,%edx
80100b1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100b1f:	89 50 54             	mov    %edx,0x54(%eax)
        b->prev = &bcache.head;
80100b22:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100b25:	c7 40 50 9c 08 11 80 	movl   $0x8011089c,0x50(%eax)
        initsleeplock(&b->lock, "buffer");
80100b2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100b2f:	83 c0 0c             	add    $0xc,%eax
80100b32:	83 ec 08             	sub    $0x8,%esp
80100b35:	68 b3 8d 10 80       	push   $0x80108db3
80100b3a:	50                   	push   %eax
80100b3b:	e8 08 55 00 00       	call   80106048 <initsleeplock>
80100b40:	83 c4 10             	add    $0x10,%esp
        bcache.head.next->prev = b;
80100b43:	a1 f0 08 11 80       	mov    0x801108f0,%eax
80100b48:	8b 55 f4             	mov    -0xc(%ebp),%edx
80100b4b:	89 50 50             	mov    %edx,0x50(%eax)
        bcache.head.next = b;
80100b4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100b51:	a3 f0 08 11 80       	mov    %eax,0x801108f0
    for (b = bcache.buf; b < bcache.buf + NBUF; b++) {
80100b56:	81 45 f4 5c 02 00 00 	addl   $0x25c,-0xc(%ebp)
80100b5d:	b8 9c 08 11 80       	mov    $0x8011089c,%eax
80100b62:	39 45 f4             	cmp    %eax,-0xc(%ebp)
80100b65:	72 af                	jb     80100b16 <binit+0x38>
    }
}
80100b67:	90                   	nop
80100b68:	90                   	nop
80100b69:	c9                   	leave  
80100b6a:	c3                   	ret    

80100b6b <bget>:

// Look through buffer cache for block on device dev.
// If not found, allocate a buffer.
// In either case, return locked buffer.
static struct buf* bget(uint dev, uint blockno) {
80100b6b:	55                   	push   %ebp
80100b6c:	89 e5                	mov    %esp,%ebp
80100b6e:	83 ec 18             	sub    $0x18,%esp
    struct buf* b;

    acquire(&bcache.lock);
80100b71:	83 ec 0c             	sub    $0xc,%esp
80100b74:	68 a0 c1 10 80       	push   $0x8010c1a0
80100b79:	e8 64 56 00 00       	call   801061e2 <acquire>
80100b7e:	83 c4 10             	add    $0x10,%esp

    // Is the block already cached?
    for (b = bcache.head.next; b != &bcache.head; b = b->next) {
80100b81:	a1 f0 08 11 80       	mov    0x801108f0,%eax
80100b86:	89 45 f4             	mov    %eax,-0xc(%ebp)
80100b89:	eb 58                	jmp    80100be3 <bget+0x78>
        if (b->dev == dev && b->blockno == blockno) {
80100b8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100b8e:	8b 40 04             	mov    0x4(%eax),%eax
80100b91:	39 45 08             	cmp    %eax,0x8(%ebp)
80100b94:	75 44                	jne    80100bda <bget+0x6f>
80100b96:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100b99:	8b 40 08             	mov    0x8(%eax),%eax
80100b9c:	39 45 0c             	cmp    %eax,0xc(%ebp)
80100b9f:	75 39                	jne    80100bda <bget+0x6f>
            b->refcnt++;
80100ba1:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100ba4:	8b 40 4c             	mov    0x4c(%eax),%eax
80100ba7:	8d 50 01             	lea    0x1(%eax),%edx
80100baa:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100bad:	89 50 4c             	mov    %edx,0x4c(%eax)
            release(&bcache.lock);
80100bb0:	83 ec 0c             	sub    $0xc,%esp
80100bb3:	68 a0 c1 10 80       	push   $0x8010c1a0
80100bb8:	e8 98 56 00 00       	call   80106255 <release>
80100bbd:	83 c4 10             	add    $0x10,%esp
            acquiresleep(&b->lock);
80100bc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100bc3:	83 c0 0c             	add    $0xc,%eax
80100bc6:	83 ec 0c             	sub    $0xc,%esp
80100bc9:	50                   	push   %eax
80100bca:	e8 b5 54 00 00       	call   80106084 <acquiresleep>
80100bcf:	83 c4 10             	add    $0x10,%esp
            return b;
80100bd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100bd5:	e9 9d 00 00 00       	jmp    80100c77 <bget+0x10c>
    for (b = bcache.head.next; b != &bcache.head; b = b->next) {
80100bda:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100bdd:	8b 40 54             	mov    0x54(%eax),%eax
80100be0:	89 45 f4             	mov    %eax,-0xc(%ebp)
80100be3:	81 7d f4 9c 08 11 80 	cmpl   $0x8011089c,-0xc(%ebp)
80100bea:	75 9f                	jne    80100b8b <bget+0x20>
    }

    // Not cached; recycle an unused buffer.
    // Even if refcnt==0, B_DIRTY indicates a buffer is in use
    // because log.c has modified it but not yet committed it.
    for (b = bcache.head.prev; b != &bcache.head; b = b->prev) {
80100bec:	a1 ec 08 11 80       	mov    0x801108ec,%eax
80100bf1:	89 45 f4             	mov    %eax,-0xc(%ebp)
80100bf4:	eb 6b                	jmp    80100c61 <bget+0xf6>
        if (b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
80100bf6:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100bf9:	8b 40 4c             	mov    0x4c(%eax),%eax
80100bfc:	85 c0                	test   %eax,%eax
80100bfe:	75 58                	jne    80100c58 <bget+0xed>
80100c00:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c03:	8b 00                	mov    (%eax),%eax
80100c05:	83 e0 04             	and    $0x4,%eax
80100c08:	85 c0                	test   %eax,%eax
80100c0a:	75 4c                	jne    80100c58 <bget+0xed>
            b->dev = dev;
80100c0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c0f:	8b 55 08             	mov    0x8(%ebp),%edx
80100c12:	89 50 04             	mov    %edx,0x4(%eax)
            b->blockno = blockno;
80100c15:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c18:	8b 55 0c             	mov    0xc(%ebp),%edx
80100c1b:	89 50 08             	mov    %edx,0x8(%eax)
            b->flags = 0;
80100c1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c21:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
            b->refcnt = 1;
80100c27:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c2a:	c7 40 4c 01 00 00 00 	movl   $0x1,0x4c(%eax)
            release(&bcache.lock);
80100c31:	83 ec 0c             	sub    $0xc,%esp
80100c34:	68 a0 c1 10 80       	push   $0x8010c1a0
80100c39:	e8 17 56 00 00       	call   80106255 <release>
80100c3e:	83 c4 10             	add    $0x10,%esp
            acquiresleep(&b->lock);
80100c41:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c44:	83 c0 0c             	add    $0xc,%eax
80100c47:	83 ec 0c             	sub    $0xc,%esp
80100c4a:	50                   	push   %eax
80100c4b:	e8 34 54 00 00       	call   80106084 <acquiresleep>
80100c50:	83 c4 10             	add    $0x10,%esp
            return b;
80100c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c56:	eb 1f                	jmp    80100c77 <bget+0x10c>
    for (b = bcache.head.prev; b != &bcache.head; b = b->prev) {
80100c58:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c5b:	8b 40 50             	mov    0x50(%eax),%eax
80100c5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
80100c61:	81 7d f4 9c 08 11 80 	cmpl   $0x8011089c,-0xc(%ebp)
80100c68:	75 8c                	jne    80100bf6 <bget+0x8b>
        }
    }
    panic("bget: no buffers");
80100c6a:	83 ec 0c             	sub    $0xc,%esp
80100c6d:	68 ba 8d 10 80       	push   $0x80108dba
80100c72:	e8 6c 04 00 00       	call   801010e3 <panic>
}
80100c77:	c9                   	leave  
80100c78:	c3                   	ret    

80100c79 <bread>:

// Return a locked buf with the contents of the indicated block.
struct buf* bread(uint dev, uint blockno) {
80100c79:	55                   	push   %ebp
80100c7a:	89 e5                	mov    %esp,%ebp
80100c7c:	83 ec 18             	sub    $0x18,%esp
    struct buf* b;

    b = bget(dev, blockno);
80100c7f:	83 ec 08             	sub    $0x8,%esp
80100c82:	ff 75 0c             	push   0xc(%ebp)
80100c85:	ff 75 08             	push   0x8(%ebp)
80100c88:	e8 de fe ff ff       	call   80100b6b <bget>
80100c8d:	83 c4 10             	add    $0x10,%esp
80100c90:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((b->flags & B_VALID) == 0) {
80100c93:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100c96:	8b 00                	mov    (%eax),%eax
80100c98:	83 e0 02             	and    $0x2,%eax
80100c9b:	85 c0                	test   %eax,%eax
80100c9d:	75 50                	jne    80100cef <bread+0x76>
        iderw(b);
80100c9f:	83 ec 0c             	sub    $0xc,%esp
80100ca2:	ff 75 f4             	push   -0xc(%ebp)
80100ca5:	e8 0f 2e 00 00       	call   80103ab9 <iderw>
80100caa:	83 c4 10             	add    $0x10,%esp
        if ((b->blockno >= sb.inodestart) && (b->blockno < sb.bmapstart))
80100cad:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100cb0:	8b 50 08             	mov    0x8(%eax),%edx
80100cb3:	a1 f4 15 11 80       	mov    0x801115f4,%eax
80100cb8:	39 c2                	cmp    %eax,%edx
80100cba:	72 16                	jb     80100cd2 <bread+0x59>
80100cbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100cbf:	8b 50 08             	mov    0x8(%eax),%edx
80100cc2:	a1 f8 15 11 80       	mov    0x801115f8,%eax
80100cc7:	39 c2                	cmp    %eax,%edx
80100cc9:	73 07                	jae    80100cd2 <bread+0x59>
            report_disk_inode_read();
80100ccb:	e8 11 33 00 00       	call   80103fe1 <report_disk_inode_read>
80100cd0:	eb 1d                	jmp    80100cef <bread+0x76>
        else if (b->blockno >= (sb.size - sb.nblocks))
80100cd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100cd5:	8b 40 08             	mov    0x8(%eax),%eax
80100cd8:	8b 15 e0 15 11 80    	mov    0x801115e0,%edx
80100cde:	8b 0d e4 15 11 80    	mov    0x801115e4,%ecx
80100ce4:	29 ca                	sub    %ecx,%edx
80100ce6:	39 d0                	cmp    %edx,%eax
80100ce8:	72 05                	jb     80100cef <bread+0x76>
            report_disk_data_read();
80100cea:	e8 df 32 00 00       	call   80103fce <report_disk_data_read>
    }
    return b;
80100cef:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
80100cf2:	c9                   	leave  
80100cf3:	c3                   	ret    

80100cf4 <bwrite>:

// Write b's contents to disk.  Must be locked.
void bwrite(struct buf* b) {
80100cf4:	55                   	push   %ebp
80100cf5:	89 e5                	mov    %esp,%ebp
80100cf7:	83 ec 08             	sub    $0x8,%esp
    if (!holdingsleep(&b->lock)) panic("bwrite");
80100cfa:	8b 45 08             	mov    0x8(%ebp),%eax
80100cfd:	83 c0 0c             	add    $0xc,%eax
80100d00:	83 ec 0c             	sub    $0xc,%esp
80100d03:	50                   	push   %eax
80100d04:	e8 2d 54 00 00       	call   80106136 <holdingsleep>
80100d09:	83 c4 10             	add    $0x10,%esp
80100d0c:	85 c0                	test   %eax,%eax
80100d0e:	75 0d                	jne    80100d1d <bwrite+0x29>
80100d10:	83 ec 0c             	sub    $0xc,%esp
80100d13:	68 cb 8d 10 80       	push   $0x80108dcb
80100d18:	e8 c6 03 00 00       	call   801010e3 <panic>
    b->flags |= B_DIRTY;
80100d1d:	8b 45 08             	mov    0x8(%ebp),%eax
80100d20:	8b 00                	mov    (%eax),%eax
80100d22:	83 c8 04             	or     $0x4,%eax
80100d25:	89 c2                	mov    %eax,%edx
80100d27:	8b 45 08             	mov    0x8(%ebp),%eax
80100d2a:	89 10                	mov    %edx,(%eax)
    iderw(b);
80100d2c:	83 ec 0c             	sub    $0xc,%esp
80100d2f:	ff 75 08             	push   0x8(%ebp)
80100d32:	e8 82 2d 00 00       	call   80103ab9 <iderw>
80100d37:	83 c4 10             	add    $0x10,%esp
    if ((b->blockno >= sb.inodestart) && (b->blockno < sb.bmapstart))
80100d3a:	8b 45 08             	mov    0x8(%ebp),%eax
80100d3d:	8b 50 08             	mov    0x8(%eax),%edx
80100d40:	a1 f4 15 11 80       	mov    0x801115f4,%eax
80100d45:	39 c2                	cmp    %eax,%edx
80100d47:	72 16                	jb     80100d5f <bwrite+0x6b>
80100d49:	8b 45 08             	mov    0x8(%ebp),%eax
80100d4c:	8b 50 08             	mov    0x8(%eax),%edx
80100d4f:	a1 f8 15 11 80       	mov    0x801115f8,%eax
80100d54:	39 c2                	cmp    %eax,%edx
80100d56:	73 07                	jae    80100d5f <bwrite+0x6b>
        report_disk_inode_write();
80100d58:	e8 aa 32 00 00       	call   80104007 <report_disk_inode_write>
    else if (b->blockno >= (sb.size - sb.nblocks))
        report_disk_data_write();
}
80100d5d:	eb 1d                	jmp    80100d7c <bwrite+0x88>
    else if (b->blockno >= (sb.size - sb.nblocks))
80100d5f:	8b 45 08             	mov    0x8(%ebp),%eax
80100d62:	8b 40 08             	mov    0x8(%eax),%eax
80100d65:	8b 15 e0 15 11 80    	mov    0x801115e0,%edx
80100d6b:	8b 0d e4 15 11 80    	mov    0x801115e4,%ecx
80100d71:	29 ca                	sub    %ecx,%edx
80100d73:	39 d0                	cmp    %edx,%eax
80100d75:	72 05                	jb     80100d7c <bwrite+0x88>
        report_disk_data_write();
80100d77:	e8 78 32 00 00       	call   80103ff4 <report_disk_data_write>
}
80100d7c:	90                   	nop
80100d7d:	c9                   	leave  
80100d7e:	c3                   	ret    

80100d7f <brelse>:

// Release a locked buffer.
// Move to the head of the MRU list.
void brelse(struct buf* b) {
80100d7f:	55                   	push   %ebp
80100d80:	89 e5                	mov    %esp,%ebp
80100d82:	83 ec 08             	sub    $0x8,%esp
    if (!holdingsleep(&b->lock)) panic("brelse");
80100d85:	8b 45 08             	mov    0x8(%ebp),%eax
80100d88:	83 c0 0c             	add    $0xc,%eax
80100d8b:	83 ec 0c             	sub    $0xc,%esp
80100d8e:	50                   	push   %eax
80100d8f:	e8 a2 53 00 00       	call   80106136 <holdingsleep>
80100d94:	83 c4 10             	add    $0x10,%esp
80100d97:	85 c0                	test   %eax,%eax
80100d99:	75 0d                	jne    80100da8 <brelse+0x29>
80100d9b:	83 ec 0c             	sub    $0xc,%esp
80100d9e:	68 d2 8d 10 80       	push   $0x80108dd2
80100da3:	e8 3b 03 00 00       	call   801010e3 <panic>

    releasesleep(&b->lock);
80100da8:	8b 45 08             	mov    0x8(%ebp),%eax
80100dab:	83 c0 0c             	add    $0xc,%eax
80100dae:	83 ec 0c             	sub    $0xc,%esp
80100db1:	50                   	push   %eax
80100db2:	e8 31 53 00 00       	call   801060e8 <releasesleep>
80100db7:	83 c4 10             	add    $0x10,%esp

    acquire(&bcache.lock);
80100dba:	83 ec 0c             	sub    $0xc,%esp
80100dbd:	68 a0 c1 10 80       	push   $0x8010c1a0
80100dc2:	e8 1b 54 00 00       	call   801061e2 <acquire>
80100dc7:	83 c4 10             	add    $0x10,%esp
    b->refcnt--;
80100dca:	8b 45 08             	mov    0x8(%ebp),%eax
80100dcd:	8b 40 4c             	mov    0x4c(%eax),%eax
80100dd0:	8d 50 ff             	lea    -0x1(%eax),%edx
80100dd3:	8b 45 08             	mov    0x8(%ebp),%eax
80100dd6:	89 50 4c             	mov    %edx,0x4c(%eax)
    if (b->refcnt == 0) {
80100dd9:	8b 45 08             	mov    0x8(%ebp),%eax
80100ddc:	8b 40 4c             	mov    0x4c(%eax),%eax
80100ddf:	85 c0                	test   %eax,%eax
80100de1:	75 47                	jne    80100e2a <brelse+0xab>
        // no one is waiting for it.
        b->next->prev = b->prev;
80100de3:	8b 45 08             	mov    0x8(%ebp),%eax
80100de6:	8b 40 54             	mov    0x54(%eax),%eax
80100de9:	8b 55 08             	mov    0x8(%ebp),%edx
80100dec:	8b 52 50             	mov    0x50(%edx),%edx
80100def:	89 50 50             	mov    %edx,0x50(%eax)
        b->prev->next = b->next;
80100df2:	8b 45 08             	mov    0x8(%ebp),%eax
80100df5:	8b 40 50             	mov    0x50(%eax),%eax
80100df8:	8b 55 08             	mov    0x8(%ebp),%edx
80100dfb:	8b 52 54             	mov    0x54(%edx),%edx
80100dfe:	89 50 54             	mov    %edx,0x54(%eax)
        b->next = bcache.head.next;
80100e01:	8b 15 f0 08 11 80    	mov    0x801108f0,%edx
80100e07:	8b 45 08             	mov    0x8(%ebp),%eax
80100e0a:	89 50 54             	mov    %edx,0x54(%eax)
        b->prev = &bcache.head;
80100e0d:	8b 45 08             	mov    0x8(%ebp),%eax
80100e10:	c7 40 50 9c 08 11 80 	movl   $0x8011089c,0x50(%eax)
        bcache.head.next->prev = b;
80100e17:	a1 f0 08 11 80       	mov    0x801108f0,%eax
80100e1c:	8b 55 08             	mov    0x8(%ebp),%edx
80100e1f:	89 50 50             	mov    %edx,0x50(%eax)
        bcache.head.next = b;
80100e22:	8b 45 08             	mov    0x8(%ebp),%eax
80100e25:	a3 f0 08 11 80       	mov    %eax,0x801108f0
    }

    release(&bcache.lock);
80100e2a:	83 ec 0c             	sub    $0xc,%esp
80100e2d:	68 a0 c1 10 80       	push   $0x8010c1a0
80100e32:	e8 1e 54 00 00       	call   80106255 <release>
80100e37:	83 c4 10             	add    $0x10,%esp
}
80100e3a:	90                   	nop
80100e3b:	c9                   	leave  
80100e3c:	c3                   	ret    

80100e3d <inb>:

#include "types.h"

static inline uchar
inb(ushort port)
{
80100e3d:	55                   	push   %ebp
80100e3e:	89 e5                	mov    %esp,%ebp
80100e40:	83 ec 14             	sub    $0x14,%esp
80100e43:	8b 45 08             	mov    0x8(%ebp),%eax
80100e46:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  uchar data;

  __asm__ volatile("in %1,%0" : "=a" (data) : "d" (port));
80100e4a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
80100e4e:	89 c2                	mov    %eax,%edx
80100e50:	ec                   	in     (%dx),%al
80100e51:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
80100e54:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
80100e58:	c9                   	leave  
80100e59:	c3                   	ret    

80100e5a <outb>:
               "memory", "cc");
}

static inline void
outb(ushort port, uchar data)
{
80100e5a:	55                   	push   %ebp
80100e5b:	89 e5                	mov    %esp,%ebp
80100e5d:	83 ec 08             	sub    $0x8,%esp
80100e60:	8b 45 08             	mov    0x8(%ebp),%eax
80100e63:	8b 55 0c             	mov    0xc(%ebp),%edx
80100e66:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
80100e6a:	89 d0                	mov    %edx,%eax
80100e6c:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ volatile("out %0,%1" : : "a" (data), "d" (port));
80100e6f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
80100e73:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
80100e77:	ee                   	out    %al,(%dx)
}
80100e78:	90                   	nop
80100e79:	c9                   	leave  
80100e7a:	c3                   	ret    

80100e7b <cli>:
  __asm__ volatile("movw %0, %%gs" : : "r" (v));
}

static inline void
cli(void)
{
80100e7b:	55                   	push   %ebp
80100e7c:	89 e5                	mov    %esp,%ebp
  __asm__ volatile("cli");
80100e7e:	fa                   	cli    
}
80100e7f:	90                   	nop
80100e80:	5d                   	pop    %ebp
80100e81:	c3                   	ret    

80100e82 <printint>:
static struct {
    struct spinlock lock;
    int locking;
} cons;

static void printint(int xx, int base, int sign) {
80100e82:	55                   	push   %ebp
80100e83:	89 e5                	mov    %esp,%ebp
80100e85:	83 ec 28             	sub    $0x28,%esp
    static char digits[] = "0123456789abcdef";
    char buf[16];
    int i;
    uint x;

    if (sign && (sign = xx < 0))
80100e88:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80100e8c:	74 1c                	je     80100eaa <printint+0x28>
80100e8e:	8b 45 08             	mov    0x8(%ebp),%eax
80100e91:	c1 e8 1f             	shr    $0x1f,%eax
80100e94:	0f b6 c0             	movzbl %al,%eax
80100e97:	89 45 10             	mov    %eax,0x10(%ebp)
80100e9a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80100e9e:	74 0a                	je     80100eaa <printint+0x28>
        x = -xx;
80100ea0:	8b 45 08             	mov    0x8(%ebp),%eax
80100ea3:	f7 d8                	neg    %eax
80100ea5:	89 45 f0             	mov    %eax,-0x10(%ebp)
80100ea8:	eb 06                	jmp    80100eb0 <printint+0x2e>
    else
        x = xx;
80100eaa:	8b 45 08             	mov    0x8(%ebp),%eax
80100ead:	89 45 f0             	mov    %eax,-0x10(%ebp)

    i = 0;
80100eb0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    do {
        buf[i++] = digits[x % base];
80100eb7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80100eba:	8b 45 f0             	mov    -0x10(%ebp),%eax
80100ebd:	ba 00 00 00 00       	mov    $0x0,%edx
80100ec2:	f7 f1                	div    %ecx
80100ec4:	89 d1                	mov    %edx,%ecx
80100ec6:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100ec9:	8d 50 01             	lea    0x1(%eax),%edx
80100ecc:	89 55 f4             	mov    %edx,-0xc(%ebp)
80100ecf:	0f b6 91 04 a4 10 80 	movzbl -0x7fef5bfc(%ecx),%edx
80100ed6:	88 54 05 e0          	mov    %dl,-0x20(%ebp,%eax,1)
    } while ((x /= base) != 0);
80100eda:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80100edd:	8b 45 f0             	mov    -0x10(%ebp),%eax
80100ee0:	ba 00 00 00 00       	mov    $0x0,%edx
80100ee5:	f7 f1                	div    %ecx
80100ee7:	89 45 f0             	mov    %eax,-0x10(%ebp)
80100eea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80100eee:	75 c7                	jne    80100eb7 <printint+0x35>

    if (sign) buf[i++] = '-';
80100ef0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80100ef4:	74 2a                	je     80100f20 <printint+0x9e>
80100ef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100ef9:	8d 50 01             	lea    0x1(%eax),%edx
80100efc:	89 55 f4             	mov    %edx,-0xc(%ebp)
80100eff:	c6 44 05 e0 2d       	movb   $0x2d,-0x20(%ebp,%eax,1)

    while (--i >= 0) consputc(buf[i]);
80100f04:	eb 1a                	jmp    80100f20 <printint+0x9e>
80100f06:	8d 55 e0             	lea    -0x20(%ebp),%edx
80100f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100f0c:	01 d0                	add    %edx,%eax
80100f0e:	0f b6 00             	movzbl (%eax),%eax
80100f11:	0f be c0             	movsbl %al,%eax
80100f14:	83 ec 0c             	sub    $0xc,%esp
80100f17:	50                   	push   %eax
80100f18:	e8 f9 03 00 00       	call   80101316 <consputc>
80100f1d:	83 c4 10             	add    $0x10,%esp
80100f20:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
80100f24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80100f28:	79 dc                	jns    80100f06 <printint+0x84>
}
80100f2a:	90                   	nop
80100f2b:	90                   	nop
80100f2c:	c9                   	leave  
80100f2d:	c3                   	ret    

80100f2e <cprintf>:
//PAGEBREAK: 50

// Print to the console. only understands %d, %x, %p, %s.
void cprintf(char* fmt, ...) {
80100f2e:	55                   	push   %ebp
80100f2f:	89 e5                	mov    %esp,%ebp
80100f31:	83 ec 28             	sub    $0x28,%esp
    int i, c, locking;
    uint* argp;
    char* s;

    locking = cons.locking;
80100f34:	a1 d4 0b 11 80       	mov    0x80110bd4,%eax
80100f39:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (locking) acquire(&cons.lock);
80100f3c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
80100f40:	74 10                	je     80100f52 <cprintf+0x24>
80100f42:	83 ec 0c             	sub    $0xc,%esp
80100f45:	68 a0 0b 11 80       	push   $0x80110ba0
80100f4a:	e8 93 52 00 00       	call   801061e2 <acquire>
80100f4f:	83 c4 10             	add    $0x10,%esp

    if (fmt == 0) panic("null fmt");
80100f52:	8b 45 08             	mov    0x8(%ebp),%eax
80100f55:	85 c0                	test   %eax,%eax
80100f57:	75 0d                	jne    80100f66 <cprintf+0x38>
80100f59:	83 ec 0c             	sub    $0xc,%esp
80100f5c:	68 d9 8d 10 80       	push   $0x80108dd9
80100f61:	e8 7d 01 00 00       	call   801010e3 <panic>

    argp = (uint*) (void*) (&fmt + 1);
80100f66:	8d 45 0c             	lea    0xc(%ebp),%eax
80100f69:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; (c = fmt[i] & 0xff) != 0; i++) {
80100f6c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80100f73:	e9 2f 01 00 00       	jmp    801010a7 <cprintf+0x179>
        if (c != '%') {
80100f78:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
80100f7c:	74 13                	je     80100f91 <cprintf+0x63>
            consputc(c);
80100f7e:	83 ec 0c             	sub    $0xc,%esp
80100f81:	ff 75 e4             	push   -0x1c(%ebp)
80100f84:	e8 8d 03 00 00       	call   80101316 <consputc>
80100f89:	83 c4 10             	add    $0x10,%esp
            continue;
80100f8c:	e9 12 01 00 00       	jmp    801010a3 <cprintf+0x175>
        }
        c = fmt[++i] & 0xff;
80100f91:	8b 55 08             	mov    0x8(%ebp),%edx
80100f94:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80100f98:	8b 45 f4             	mov    -0xc(%ebp),%eax
80100f9b:	01 d0                	add    %edx,%eax
80100f9d:	0f b6 00             	movzbl (%eax),%eax
80100fa0:	0f be c0             	movsbl %al,%eax
80100fa3:	25 ff 00 00 00       	and    $0xff,%eax
80100fa8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (c == 0) break;
80100fab:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
80100faf:	0f 84 14 01 00 00    	je     801010c9 <cprintf+0x19b>
        switch (c) {
80100fb5:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
80100fb9:	74 5e                	je     80101019 <cprintf+0xeb>
80100fbb:	83 7d e4 78          	cmpl   $0x78,-0x1c(%ebp)
80100fbf:	0f 8f c2 00 00 00    	jg     80101087 <cprintf+0x159>
80100fc5:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
80100fc9:	74 6b                	je     80101036 <cprintf+0x108>
80100fcb:	83 7d e4 73          	cmpl   $0x73,-0x1c(%ebp)
80100fcf:	0f 8f b2 00 00 00    	jg     80101087 <cprintf+0x159>
80100fd5:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
80100fd9:	74 3e                	je     80101019 <cprintf+0xeb>
80100fdb:	83 7d e4 70          	cmpl   $0x70,-0x1c(%ebp)
80100fdf:	0f 8f a2 00 00 00    	jg     80101087 <cprintf+0x159>
80100fe5:	83 7d e4 25          	cmpl   $0x25,-0x1c(%ebp)
80100fe9:	0f 84 89 00 00 00    	je     80101078 <cprintf+0x14a>
80100fef:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
80100ff3:	0f 85 8e 00 00 00    	jne    80101087 <cprintf+0x159>
            case 'd':
                printint(*argp++, 10, 1);
80100ff9:	8b 45 f0             	mov    -0x10(%ebp),%eax
80100ffc:	8d 50 04             	lea    0x4(%eax),%edx
80100fff:	89 55 f0             	mov    %edx,-0x10(%ebp)
80101002:	8b 00                	mov    (%eax),%eax
80101004:	83 ec 04             	sub    $0x4,%esp
80101007:	6a 01                	push   $0x1
80101009:	6a 0a                	push   $0xa
8010100b:	50                   	push   %eax
8010100c:	e8 71 fe ff ff       	call   80100e82 <printint>
80101011:	83 c4 10             	add    $0x10,%esp
                break;
80101014:	e9 8a 00 00 00       	jmp    801010a3 <cprintf+0x175>
            case 'x':
            case 'p':
                printint(*argp++, 16, 0);
80101019:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010101c:	8d 50 04             	lea    0x4(%eax),%edx
8010101f:	89 55 f0             	mov    %edx,-0x10(%ebp)
80101022:	8b 00                	mov    (%eax),%eax
80101024:	83 ec 04             	sub    $0x4,%esp
80101027:	6a 00                	push   $0x0
80101029:	6a 10                	push   $0x10
8010102b:	50                   	push   %eax
8010102c:	e8 51 fe ff ff       	call   80100e82 <printint>
80101031:	83 c4 10             	add    $0x10,%esp
                break;
80101034:	eb 6d                	jmp    801010a3 <cprintf+0x175>
            case 's':
                if ((s = (char*) *argp++) == 0) s = "(null)";
80101036:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101039:	8d 50 04             	lea    0x4(%eax),%edx
8010103c:	89 55 f0             	mov    %edx,-0x10(%ebp)
8010103f:	8b 00                	mov    (%eax),%eax
80101041:	89 45 ec             	mov    %eax,-0x14(%ebp)
80101044:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80101048:	75 22                	jne    8010106c <cprintf+0x13e>
8010104a:	c7 45 ec e2 8d 10 80 	movl   $0x80108de2,-0x14(%ebp)
                for (; *s; s++) consputc(*s);
80101051:	eb 19                	jmp    8010106c <cprintf+0x13e>
80101053:	8b 45 ec             	mov    -0x14(%ebp),%eax
80101056:	0f b6 00             	movzbl (%eax),%eax
80101059:	0f be c0             	movsbl %al,%eax
8010105c:	83 ec 0c             	sub    $0xc,%esp
8010105f:	50                   	push   %eax
80101060:	e8 b1 02 00 00       	call   80101316 <consputc>
80101065:	83 c4 10             	add    $0x10,%esp
80101068:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
8010106c:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010106f:	0f b6 00             	movzbl (%eax),%eax
80101072:	84 c0                	test   %al,%al
80101074:	75 dd                	jne    80101053 <cprintf+0x125>
                break;
80101076:	eb 2b                	jmp    801010a3 <cprintf+0x175>
            case '%':
                consputc('%');
80101078:	83 ec 0c             	sub    $0xc,%esp
8010107b:	6a 25                	push   $0x25
8010107d:	e8 94 02 00 00       	call   80101316 <consputc>
80101082:	83 c4 10             	add    $0x10,%esp
                break;
80101085:	eb 1c                	jmp    801010a3 <cprintf+0x175>
            default:
                // Print unknown % sequence to draw attention.
                consputc('%');
80101087:	83 ec 0c             	sub    $0xc,%esp
8010108a:	6a 25                	push   $0x25
8010108c:	e8 85 02 00 00       	call   80101316 <consputc>
80101091:	83 c4 10             	add    $0x10,%esp
                consputc(c);
80101094:	83 ec 0c             	sub    $0xc,%esp
80101097:	ff 75 e4             	push   -0x1c(%ebp)
8010109a:	e8 77 02 00 00       	call   80101316 <consputc>
8010109f:	83 c4 10             	add    $0x10,%esp
                break;
801010a2:	90                   	nop
    for (i = 0; (c = fmt[i] & 0xff) != 0; i++) {
801010a3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
801010a7:	8b 55 08             	mov    0x8(%ebp),%edx
801010aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
801010ad:	01 d0                	add    %edx,%eax
801010af:	0f b6 00             	movzbl (%eax),%eax
801010b2:	0f be c0             	movsbl %al,%eax
801010b5:	25 ff 00 00 00       	and    $0xff,%eax
801010ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801010bd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
801010c1:	0f 85 b1 fe ff ff    	jne    80100f78 <cprintf+0x4a>
801010c7:	eb 01                	jmp    801010ca <cprintf+0x19c>
        if (c == 0) break;
801010c9:	90                   	nop
        }
    }

    if (locking) release(&cons.lock);
801010ca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
801010ce:	74 10                	je     801010e0 <cprintf+0x1b2>
801010d0:	83 ec 0c             	sub    $0xc,%esp
801010d3:	68 a0 0b 11 80       	push   $0x80110ba0
801010d8:	e8 78 51 00 00       	call   80106255 <release>
801010dd:	83 c4 10             	add    $0x10,%esp
}
801010e0:	90                   	nop
801010e1:	c9                   	leave  
801010e2:	c3                   	ret    

801010e3 <panic>:

void panic(char* s) {
801010e3:	55                   	push   %ebp
801010e4:	89 e5                	mov    %esp,%ebp
801010e6:	83 ec 38             	sub    $0x38,%esp
    int i;
    uint pcs[10];

    cli();
801010e9:	e8 8d fd ff ff       	call   80100e7b <cli>
    cons.locking = 0;
801010ee:	c7 05 d4 0b 11 80 00 	movl   $0x0,0x80110bd4
801010f5:	00 00 00 
    // use lapiccpunum so that we can call panic from mycpu()
    cprintf("lapicid %d: panic: ", lapicid());
801010f8:	e8 f1 30 00 00       	call   801041ee <lapicid>
801010fd:	83 ec 08             	sub    $0x8,%esp
80101100:	50                   	push   %eax
80101101:	68 e9 8d 10 80       	push   $0x80108de9
80101106:	e8 23 fe ff ff       	call   80100f2e <cprintf>
8010110b:	83 c4 10             	add    $0x10,%esp
    cprintf(s);
8010110e:	8b 45 08             	mov    0x8(%ebp),%eax
80101111:	83 ec 0c             	sub    $0xc,%esp
80101114:	50                   	push   %eax
80101115:	e8 14 fe ff ff       	call   80100f2e <cprintf>
8010111a:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
8010111d:	83 ec 0c             	sub    $0xc,%esp
80101120:	68 fd 8d 10 80       	push   $0x80108dfd
80101125:	e8 04 fe ff ff       	call   80100f2e <cprintf>
8010112a:	83 c4 10             	add    $0x10,%esp
    getcallerpcs(&s, pcs);
8010112d:	83 ec 08             	sub    $0x8,%esp
80101130:	8d 45 cc             	lea    -0x34(%ebp),%eax
80101133:	50                   	push   %eax
80101134:	8d 45 08             	lea    0x8(%ebp),%eax
80101137:	50                   	push   %eax
80101138:	e8 6e 51 00 00       	call   801062ab <getcallerpcs>
8010113d:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < 10; i++) cprintf(" %p", pcs[i]);
80101140:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80101147:	eb 1c                	jmp    80101165 <panic+0x82>
80101149:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010114c:	8b 44 85 cc          	mov    -0x34(%ebp,%eax,4),%eax
80101150:	83 ec 08             	sub    $0x8,%esp
80101153:	50                   	push   %eax
80101154:	68 ff 8d 10 80       	push   $0x80108dff
80101159:	e8 d0 fd ff ff       	call   80100f2e <cprintf>
8010115e:	83 c4 10             	add    $0x10,%esp
80101161:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80101165:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
80101169:	7e de                	jle    80101149 <panic+0x66>
    panicked = 1;  // freeze other CPU
8010116b:	c7 05 8c 0b 11 80 01 	movl   $0x1,0x80110b8c
80101172:	00 00 00 
    for (;;)
80101175:	eb fe                	jmp    80101175 <panic+0x92>

80101177 <cgaputc>:
//PAGEBREAK: 50
#define BACKSPACE 0x100
#define CRTPORT   0x3d4
static ushort* crt = (ushort*) P2V(0xb8000);  // CGA memory

static void cgaputc(int c) {
80101177:	55                   	push   %ebp
80101178:	89 e5                	mov    %esp,%ebp
8010117a:	53                   	push   %ebx
8010117b:	83 ec 14             	sub    $0x14,%esp
    int pos;

    // Cursor position: col + 80*row.
    outb(CRTPORT, 14);
8010117e:	6a 0e                	push   $0xe
80101180:	68 d4 03 00 00       	push   $0x3d4
80101185:	e8 d0 fc ff ff       	call   80100e5a <outb>
8010118a:	83 c4 08             	add    $0x8,%esp
    pos = inb(CRTPORT + 1) << 8;
8010118d:	68 d5 03 00 00       	push   $0x3d5
80101192:	e8 a6 fc ff ff       	call   80100e3d <inb>
80101197:	83 c4 04             	add    $0x4,%esp
8010119a:	0f b6 c0             	movzbl %al,%eax
8010119d:	c1 e0 08             	shl    $0x8,%eax
801011a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(CRTPORT, 15);
801011a3:	6a 0f                	push   $0xf
801011a5:	68 d4 03 00 00       	push   $0x3d4
801011aa:	e8 ab fc ff ff       	call   80100e5a <outb>
801011af:	83 c4 08             	add    $0x8,%esp
    pos |= inb(CRTPORT + 1);
801011b2:	68 d5 03 00 00       	push   $0x3d5
801011b7:	e8 81 fc ff ff       	call   80100e3d <inb>
801011bc:	83 c4 04             	add    $0x4,%esp
801011bf:	0f b6 c0             	movzbl %al,%eax
801011c2:	09 45 f4             	or     %eax,-0xc(%ebp)

    if (c == '\n')
801011c5:	83 7d 08 0a          	cmpl   $0xa,0x8(%ebp)
801011c9:	75 34                	jne    801011ff <cgaputc+0x88>
        pos += 80 - pos % 80;
801011cb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
801011ce:	ba 67 66 66 66       	mov    $0x66666667,%edx
801011d3:	89 c8                	mov    %ecx,%eax
801011d5:	f7 ea                	imul   %edx
801011d7:	89 d0                	mov    %edx,%eax
801011d9:	c1 f8 05             	sar    $0x5,%eax
801011dc:	89 cb                	mov    %ecx,%ebx
801011de:	c1 fb 1f             	sar    $0x1f,%ebx
801011e1:	29 d8                	sub    %ebx,%eax
801011e3:	89 c2                	mov    %eax,%edx
801011e5:	89 d0                	mov    %edx,%eax
801011e7:	c1 e0 02             	shl    $0x2,%eax
801011ea:	01 d0                	add    %edx,%eax
801011ec:	c1 e0 04             	shl    $0x4,%eax
801011ef:	29 c1                	sub    %eax,%ecx
801011f1:	89 ca                	mov    %ecx,%edx
801011f3:	b8 50 00 00 00       	mov    $0x50,%eax
801011f8:	29 d0                	sub    %edx,%eax
801011fa:	01 45 f4             	add    %eax,-0xc(%ebp)
801011fd:	eb 38                	jmp    80101237 <cgaputc+0xc0>
    else if (c == BACKSPACE) {
801011ff:	81 7d 08 00 01 00 00 	cmpl   $0x100,0x8(%ebp)
80101206:	75 0c                	jne    80101214 <cgaputc+0x9d>
        if (pos > 0) --pos;
80101208:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8010120c:	7e 29                	jle    80101237 <cgaputc+0xc0>
8010120e:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
80101212:	eb 23                	jmp    80101237 <cgaputc+0xc0>
    } else
        crt[pos++] = (c & 0xff) | 0x0700;  // black on white
80101214:	8b 45 08             	mov    0x8(%ebp),%eax
80101217:	0f b6 c0             	movzbl %al,%eax
8010121a:	80 cc 07             	or     $0x7,%ah
8010121d:	89 c1                	mov    %eax,%ecx
8010121f:	8b 1d 00 a4 10 80    	mov    0x8010a400,%ebx
80101225:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101228:	8d 50 01             	lea    0x1(%eax),%edx
8010122b:	89 55 f4             	mov    %edx,-0xc(%ebp)
8010122e:	01 c0                	add    %eax,%eax
80101230:	01 d8                	add    %ebx,%eax
80101232:	89 ca                	mov    %ecx,%edx
80101234:	66 89 10             	mov    %dx,(%eax)

    if (pos < 0 || pos > 25 * 80) panic("pos under/overflow");
80101237:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8010123b:	78 09                	js     80101246 <cgaputc+0xcf>
8010123d:	81 7d f4 d0 07 00 00 	cmpl   $0x7d0,-0xc(%ebp)
80101244:	7e 0d                	jle    80101253 <cgaputc+0xdc>
80101246:	83 ec 0c             	sub    $0xc,%esp
80101249:	68 03 8e 10 80       	push   $0x80108e03
8010124e:	e8 90 fe ff ff       	call   801010e3 <panic>

    if ((pos / 80) >= 24) {  // Scroll up.
80101253:	81 7d f4 7f 07 00 00 	cmpl   $0x77f,-0xc(%ebp)
8010125a:	7e 4d                	jle    801012a9 <cgaputc+0x132>
        memmove(crt, crt + 80, sizeof(crt[0]) * 23 * 80);
8010125c:	a1 00 a4 10 80       	mov    0x8010a400,%eax
80101261:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
80101267:	a1 00 a4 10 80       	mov    0x8010a400,%eax
8010126c:	83 ec 04             	sub    $0x4,%esp
8010126f:	68 60 0e 00 00       	push   $0xe60
80101274:	52                   	push   %edx
80101275:	50                   	push   %eax
80101276:	e8 bb 52 00 00       	call   80106536 <memmove>
8010127b:	83 c4 10             	add    $0x10,%esp
        pos -= 80;
8010127e:	83 6d f4 50          	subl   $0x50,-0xc(%ebp)
        memset(crt + pos, 0, sizeof(crt[0]) * (24 * 80 - pos));
80101282:	b8 80 07 00 00       	mov    $0x780,%eax
80101287:	2b 45 f4             	sub    -0xc(%ebp),%eax
8010128a:	8d 14 00             	lea    (%eax,%eax,1),%edx
8010128d:	8b 0d 00 a4 10 80    	mov    0x8010a400,%ecx
80101293:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101296:	01 c0                	add    %eax,%eax
80101298:	01 c8                	add    %ecx,%eax
8010129a:	83 ec 04             	sub    $0x4,%esp
8010129d:	52                   	push   %edx
8010129e:	6a 00                	push   $0x0
801012a0:	50                   	push   %eax
801012a1:	e8 d1 51 00 00       	call   80106477 <memset>
801012a6:	83 c4 10             	add    $0x10,%esp
    }

    outb(CRTPORT, 14);
801012a9:	83 ec 08             	sub    $0x8,%esp
801012ac:	6a 0e                	push   $0xe
801012ae:	68 d4 03 00 00       	push   $0x3d4
801012b3:	e8 a2 fb ff ff       	call   80100e5a <outb>
801012b8:	83 c4 10             	add    $0x10,%esp
    outb(CRTPORT + 1, pos >> 8);
801012bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
801012be:	c1 f8 08             	sar    $0x8,%eax
801012c1:	0f b6 c0             	movzbl %al,%eax
801012c4:	83 ec 08             	sub    $0x8,%esp
801012c7:	50                   	push   %eax
801012c8:	68 d5 03 00 00       	push   $0x3d5
801012cd:	e8 88 fb ff ff       	call   80100e5a <outb>
801012d2:	83 c4 10             	add    $0x10,%esp
    outb(CRTPORT, 15);
801012d5:	83 ec 08             	sub    $0x8,%esp
801012d8:	6a 0f                	push   $0xf
801012da:	68 d4 03 00 00       	push   $0x3d4
801012df:	e8 76 fb ff ff       	call   80100e5a <outb>
801012e4:	83 c4 10             	add    $0x10,%esp
    outb(CRTPORT + 1, pos);
801012e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
801012ea:	0f b6 c0             	movzbl %al,%eax
801012ed:	83 ec 08             	sub    $0x8,%esp
801012f0:	50                   	push   %eax
801012f1:	68 d5 03 00 00       	push   $0x3d5
801012f6:	e8 5f fb ff ff       	call   80100e5a <outb>
801012fb:	83 c4 10             	add    $0x10,%esp
    crt[pos] = ' ' | 0x0700;
801012fe:	8b 15 00 a4 10 80    	mov    0x8010a400,%edx
80101304:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101307:	01 c0                	add    %eax,%eax
80101309:	01 d0                	add    %edx,%eax
8010130b:	66 c7 00 20 07       	movw   $0x720,(%eax)
}
80101310:	90                   	nop
80101311:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80101314:	c9                   	leave  
80101315:	c3                   	ret    

80101316 <consputc>:

void consputc(int c) {
80101316:	55                   	push   %ebp
80101317:	89 e5                	mov    %esp,%ebp
80101319:	83 ec 08             	sub    $0x8,%esp
    if (panicked) {
8010131c:	a1 8c 0b 11 80       	mov    0x80110b8c,%eax
80101321:	85 c0                	test   %eax,%eax
80101323:	74 07                	je     8010132c <consputc+0x16>
        cli();
80101325:	e8 51 fb ff ff       	call   80100e7b <cli>
        for (;;)
8010132a:	eb fe                	jmp    8010132a <consputc+0x14>
            ;
    }

    if (c == BACKSPACE) {
8010132c:	81 7d 08 00 01 00 00 	cmpl   $0x100,0x8(%ebp)
80101333:	75 29                	jne    8010135e <consputc+0x48>
        uartputc('\b');
80101335:	83 ec 0c             	sub    $0xc,%esp
80101338:	6a 08                	push   $0x8
8010133a:	e8 8e 6c 00 00       	call   80107fcd <uartputc>
8010133f:	83 c4 10             	add    $0x10,%esp
        uartputc(' ');
80101342:	83 ec 0c             	sub    $0xc,%esp
80101345:	6a 20                	push   $0x20
80101347:	e8 81 6c 00 00       	call   80107fcd <uartputc>
8010134c:	83 c4 10             	add    $0x10,%esp
        uartputc('\b');
8010134f:	83 ec 0c             	sub    $0xc,%esp
80101352:	6a 08                	push   $0x8
80101354:	e8 74 6c 00 00       	call   80107fcd <uartputc>
80101359:	83 c4 10             	add    $0x10,%esp
8010135c:	eb 0e                	jmp    8010136c <consputc+0x56>
    } else
        uartputc(c);
8010135e:	83 ec 0c             	sub    $0xc,%esp
80101361:	ff 75 08             	push   0x8(%ebp)
80101364:	e8 64 6c 00 00       	call   80107fcd <uartputc>
80101369:	83 c4 10             	add    $0x10,%esp
    cgaputc(c);
8010136c:	83 ec 0c             	sub    $0xc,%esp
8010136f:	ff 75 08             	push   0x8(%ebp)
80101372:	e8 00 fe ff ff       	call   80101177 <cgaputc>
80101377:	83 c4 10             	add    $0x10,%esp
}
8010137a:	90                   	nop
8010137b:	c9                   	leave  
8010137c:	c3                   	ret    

8010137d <consoleintr>:
    uint e;  // Edit index
} input;

#define C(x) ((x) - '@')  // Control-x

void consoleintr(int (*getc)(void)) {
8010137d:	55                   	push   %ebp
8010137e:	89 e5                	mov    %esp,%ebp
80101380:	83 ec 18             	sub    $0x18,%esp
    int c, doprocdump = 0;
80101383:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    acquire(&cons.lock);
8010138a:	83 ec 0c             	sub    $0xc,%esp
8010138d:	68 a0 0b 11 80       	push   $0x80110ba0
80101392:	e8 4b 4e 00 00       	call   801061e2 <acquire>
80101397:	83 c4 10             	add    $0x10,%esp
    while ((c = getc()) >= 0) {
8010139a:	e9 50 01 00 00       	jmp    801014ef <consoleintr+0x172>
        switch (c) {
8010139f:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
801013a3:	0f 84 81 00 00 00    	je     8010142a <consoleintr+0xad>
801013a9:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
801013ad:	0f 8f ac 00 00 00    	jg     8010145f <consoleintr+0xe2>
801013b3:	83 7d f0 15          	cmpl   $0x15,-0x10(%ebp)
801013b7:	74 43                	je     801013fc <consoleintr+0x7f>
801013b9:	83 7d f0 15          	cmpl   $0x15,-0x10(%ebp)
801013bd:	0f 8f 9c 00 00 00    	jg     8010145f <consoleintr+0xe2>
801013c3:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
801013c7:	74 61                	je     8010142a <consoleintr+0xad>
801013c9:	83 7d f0 10          	cmpl   $0x10,-0x10(%ebp)
801013cd:	0f 85 8c 00 00 00    	jne    8010145f <consoleintr+0xe2>
            case C('P'):  // Process listing.
                // procdump() locks cons.lock indirectly; invoke later
                doprocdump = 1;
801013d3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
                break;
801013da:	e9 10 01 00 00       	jmp    801014ef <consoleintr+0x172>
            case C('U'):  // Kill line.
                while (input.e != input.w &&
                       input.buf[(input.e - 1) % INPUT_BUF] != '\n') {
                    input.e--;
801013df:	a1 88 0b 11 80       	mov    0x80110b88,%eax
801013e4:	83 e8 01             	sub    $0x1,%eax
801013e7:	a3 88 0b 11 80       	mov    %eax,0x80110b88
                    consputc(BACKSPACE);
801013ec:	83 ec 0c             	sub    $0xc,%esp
801013ef:	68 00 01 00 00       	push   $0x100
801013f4:	e8 1d ff ff ff       	call   80101316 <consputc>
801013f9:	83 c4 10             	add    $0x10,%esp
                while (input.e != input.w &&
801013fc:	8b 15 88 0b 11 80    	mov    0x80110b88,%edx
80101402:	a1 84 0b 11 80       	mov    0x80110b84,%eax
80101407:	39 c2                	cmp    %eax,%edx
80101409:	0f 84 e0 00 00 00    	je     801014ef <consoleintr+0x172>
                       input.buf[(input.e - 1) % INPUT_BUF] != '\n') {
8010140f:	a1 88 0b 11 80       	mov    0x80110b88,%eax
80101414:	83 e8 01             	sub    $0x1,%eax
80101417:	83 e0 7f             	and    $0x7f,%eax
8010141a:	0f b6 80 00 0b 11 80 	movzbl -0x7feef500(%eax),%eax
                while (input.e != input.w &&
80101421:	3c 0a                	cmp    $0xa,%al
80101423:	75 ba                	jne    801013df <consoleintr+0x62>
                }
                break;
80101425:	e9 c5 00 00 00       	jmp    801014ef <consoleintr+0x172>
            case C('H'):
            case '\x7f':  // Backspace
                if (input.e != input.w) {
8010142a:	8b 15 88 0b 11 80    	mov    0x80110b88,%edx
80101430:	a1 84 0b 11 80       	mov    0x80110b84,%eax
80101435:	39 c2                	cmp    %eax,%edx
80101437:	0f 84 b2 00 00 00    	je     801014ef <consoleintr+0x172>
                    input.e--;
8010143d:	a1 88 0b 11 80       	mov    0x80110b88,%eax
80101442:	83 e8 01             	sub    $0x1,%eax
80101445:	a3 88 0b 11 80       	mov    %eax,0x80110b88
                    consputc(BACKSPACE);
8010144a:	83 ec 0c             	sub    $0xc,%esp
8010144d:	68 00 01 00 00       	push   $0x100
80101452:	e8 bf fe ff ff       	call   80101316 <consputc>
80101457:	83 c4 10             	add    $0x10,%esp
                }
                break;
8010145a:	e9 90 00 00 00       	jmp    801014ef <consoleintr+0x172>
            default:
                if (c != 0 && input.e - input.r < INPUT_BUF) {
8010145f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80101463:	0f 84 85 00 00 00    	je     801014ee <consoleintr+0x171>
80101469:	a1 88 0b 11 80       	mov    0x80110b88,%eax
8010146e:	8b 15 80 0b 11 80    	mov    0x80110b80,%edx
80101474:	29 d0                	sub    %edx,%eax
80101476:	83 f8 7f             	cmp    $0x7f,%eax
80101479:	77 73                	ja     801014ee <consoleintr+0x171>
                    c = (c == '\r') ? '\n' : c;
8010147b:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
8010147f:	74 05                	je     80101486 <consoleintr+0x109>
80101481:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101484:	eb 05                	jmp    8010148b <consoleintr+0x10e>
80101486:	b8 0a 00 00 00       	mov    $0xa,%eax
8010148b:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    input.buf[input.e++ % INPUT_BUF] = c;
8010148e:	a1 88 0b 11 80       	mov    0x80110b88,%eax
80101493:	8d 50 01             	lea    0x1(%eax),%edx
80101496:	89 15 88 0b 11 80    	mov    %edx,0x80110b88
8010149c:	83 e0 7f             	and    $0x7f,%eax
8010149f:	8b 55 f0             	mov    -0x10(%ebp),%edx
801014a2:	88 90 00 0b 11 80    	mov    %dl,-0x7feef500(%eax)
                    consputc(c);
801014a8:	83 ec 0c             	sub    $0xc,%esp
801014ab:	ff 75 f0             	push   -0x10(%ebp)
801014ae:	e8 63 fe ff ff       	call   80101316 <consputc>
801014b3:	83 c4 10             	add    $0x10,%esp
                    if (c == '\n' || c == C('D') ||
801014b6:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
801014ba:	74 18                	je     801014d4 <consoleintr+0x157>
801014bc:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
801014c0:	74 12                	je     801014d4 <consoleintr+0x157>
                        input.e == input.r + INPUT_BUF) {
801014c2:	a1 88 0b 11 80       	mov    0x80110b88,%eax
801014c7:	8b 15 80 0b 11 80    	mov    0x80110b80,%edx
801014cd:	83 ea 80             	sub    $0xffffff80,%edx
                    if (c == '\n' || c == C('D') ||
801014d0:	39 d0                	cmp    %edx,%eax
801014d2:	75 1a                	jne    801014ee <consoleintr+0x171>
                        input.w = input.e;
801014d4:	a1 88 0b 11 80       	mov    0x80110b88,%eax
801014d9:	a3 84 0b 11 80       	mov    %eax,0x80110b84
                        wakeup(&input.r);
801014de:	83 ec 0c             	sub    $0xc,%esp
801014e1:	68 80 0b 11 80       	push   $0x80110b80
801014e6:	e8 5a 49 00 00       	call   80105e45 <wakeup>
801014eb:	83 c4 10             	add    $0x10,%esp
                    }
                }
                break;
801014ee:	90                   	nop
    while ((c = getc()) >= 0) {
801014ef:	8b 45 08             	mov    0x8(%ebp),%eax
801014f2:	ff d0                	call   *%eax
801014f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
801014f7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
801014fb:	0f 89 9e fe ff ff    	jns    8010139f <consoleintr+0x22>
        }
    }
    release(&cons.lock);
80101501:	83 ec 0c             	sub    $0xc,%esp
80101504:	68 a0 0b 11 80       	push   $0x80110ba0
80101509:	e8 47 4d 00 00       	call   80106255 <release>
8010150e:	83 c4 10             	add    $0x10,%esp
    if (doprocdump) {
80101511:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80101515:	74 05                	je     8010151c <consoleintr+0x19f>
        procdump();  // now call procdump() wo. cons.lock held
80101517:	e8 e4 49 00 00       	call   80105f00 <procdump>
    }
}
8010151c:	90                   	nop
8010151d:	c9                   	leave  
8010151e:	c3                   	ret    

8010151f <consoleread>:

int consoleread(struct inode* ip, char* dst, int n) {
8010151f:	55                   	push   %ebp
80101520:	89 e5                	mov    %esp,%ebp
80101522:	83 ec 18             	sub    $0x18,%esp
    int target;
    int c;

    iunlock(ip);
80101525:	83 ec 0c             	sub    $0xc,%esp
80101528:	ff 75 08             	push   0x8(%ebp)
8010152b:	e8 74 12 00 00       	call   801027a4 <iunlock>
80101530:	83 c4 10             	add    $0x10,%esp
    target = n;
80101533:	8b 45 10             	mov    0x10(%ebp),%eax
80101536:	89 45 f4             	mov    %eax,-0xc(%ebp)
    acquire(&cons.lock);
80101539:	83 ec 0c             	sub    $0xc,%esp
8010153c:	68 a0 0b 11 80       	push   $0x80110ba0
80101541:	e8 9c 4c 00 00       	call   801061e2 <acquire>
80101546:	83 c4 10             	add    $0x10,%esp
    while (n > 0) {
80101549:	e9 ab 00 00 00       	jmp    801015f9 <consoleread+0xda>
        while (input.r == input.w) {
            if (myproc()->killed) {
8010154e:	e8 3e 3f 00 00       	call   80105491 <myproc>
80101553:	8b 40 24             	mov    0x24(%eax),%eax
80101556:	85 c0                	test   %eax,%eax
80101558:	74 28                	je     80101582 <consoleread+0x63>
                release(&cons.lock);
8010155a:	83 ec 0c             	sub    $0xc,%esp
8010155d:	68 a0 0b 11 80       	push   $0x80110ba0
80101562:	e8 ee 4c 00 00       	call   80106255 <release>
80101567:	83 c4 10             	add    $0x10,%esp
                ilock(ip);
8010156a:	83 ec 0c             	sub    $0xc,%esp
8010156d:	ff 75 08             	push   0x8(%ebp)
80101570:	e8 00 11 00 00       	call   80102675 <ilock>
80101575:	83 c4 10             	add    $0x10,%esp
                return -1;
80101578:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010157d:	e9 a7 00 00 00       	jmp    80101629 <consoleread+0x10a>
            }
            sleep(&input.r, &cons.lock);
80101582:	83 ec 08             	sub    $0x8,%esp
80101585:	68 a0 0b 11 80       	push   $0x80110ba0
8010158a:	68 80 0b 11 80       	push   $0x80110b80
8010158f:	e8 ca 47 00 00       	call   80105d5e <sleep>
80101594:	83 c4 10             	add    $0x10,%esp
        while (input.r == input.w) {
80101597:	8b 15 80 0b 11 80    	mov    0x80110b80,%edx
8010159d:	a1 84 0b 11 80       	mov    0x80110b84,%eax
801015a2:	39 c2                	cmp    %eax,%edx
801015a4:	74 a8                	je     8010154e <consoleread+0x2f>
        }
        c = input.buf[input.r++ % INPUT_BUF];
801015a6:	a1 80 0b 11 80       	mov    0x80110b80,%eax
801015ab:	8d 50 01             	lea    0x1(%eax),%edx
801015ae:	89 15 80 0b 11 80    	mov    %edx,0x80110b80
801015b4:	83 e0 7f             	and    $0x7f,%eax
801015b7:	0f b6 80 00 0b 11 80 	movzbl -0x7feef500(%eax),%eax
801015be:	0f be c0             	movsbl %al,%eax
801015c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c == C('D')) {  // EOF
801015c4:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
801015c8:	75 17                	jne    801015e1 <consoleread+0xc2>
            if (n < target) {
801015ca:	8b 45 10             	mov    0x10(%ebp),%eax
801015cd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
801015d0:	7d 2f                	jge    80101601 <consoleread+0xe2>
                // Save ^D for next time, to make sure
                // caller gets a 0-byte result.
                input.r--;
801015d2:	a1 80 0b 11 80       	mov    0x80110b80,%eax
801015d7:	83 e8 01             	sub    $0x1,%eax
801015da:	a3 80 0b 11 80       	mov    %eax,0x80110b80
            }
            break;
801015df:	eb 20                	jmp    80101601 <consoleread+0xe2>
        }
        *dst++ = c;
801015e1:	8b 45 0c             	mov    0xc(%ebp),%eax
801015e4:	8d 50 01             	lea    0x1(%eax),%edx
801015e7:	89 55 0c             	mov    %edx,0xc(%ebp)
801015ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
801015ed:	88 10                	mov    %dl,(%eax)
        --n;
801015ef:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
        if (c == '\n') break;
801015f3:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
801015f7:	74 0b                	je     80101604 <consoleread+0xe5>
    while (n > 0) {
801015f9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
801015fd:	7f 98                	jg     80101597 <consoleread+0x78>
801015ff:	eb 04                	jmp    80101605 <consoleread+0xe6>
            break;
80101601:	90                   	nop
80101602:	eb 01                	jmp    80101605 <consoleread+0xe6>
        if (c == '\n') break;
80101604:	90                   	nop
    }
    release(&cons.lock);
80101605:	83 ec 0c             	sub    $0xc,%esp
80101608:	68 a0 0b 11 80       	push   $0x80110ba0
8010160d:	e8 43 4c 00 00       	call   80106255 <release>
80101612:	83 c4 10             	add    $0x10,%esp
    ilock(ip);
80101615:	83 ec 0c             	sub    $0xc,%esp
80101618:	ff 75 08             	push   0x8(%ebp)
8010161b:	e8 55 10 00 00       	call   80102675 <ilock>
80101620:	83 c4 10             	add    $0x10,%esp

    return target - n;
80101623:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101626:	2b 45 10             	sub    0x10(%ebp),%eax
}
80101629:	c9                   	leave  
8010162a:	c3                   	ret    

8010162b <consolewrite>:

int consolewrite(struct inode* ip, char* buf, int n) {
8010162b:	55                   	push   %ebp
8010162c:	89 e5                	mov    %esp,%ebp
8010162e:	83 ec 18             	sub    $0x18,%esp
    int i;

    iunlock(ip);
80101631:	83 ec 0c             	sub    $0xc,%esp
80101634:	ff 75 08             	push   0x8(%ebp)
80101637:	e8 68 11 00 00       	call   801027a4 <iunlock>
8010163c:	83 c4 10             	add    $0x10,%esp
    acquire(&cons.lock);
8010163f:	83 ec 0c             	sub    $0xc,%esp
80101642:	68 a0 0b 11 80       	push   $0x80110ba0
80101647:	e8 96 4b 00 00       	call   801061e2 <acquire>
8010164c:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < n; i++) consputc(buf[i] & 0xff);
8010164f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80101656:	eb 21                	jmp    80101679 <consolewrite+0x4e>
80101658:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010165b:	8b 45 0c             	mov    0xc(%ebp),%eax
8010165e:	01 d0                	add    %edx,%eax
80101660:	0f b6 00             	movzbl (%eax),%eax
80101663:	0f be c0             	movsbl %al,%eax
80101666:	0f b6 c0             	movzbl %al,%eax
80101669:	83 ec 0c             	sub    $0xc,%esp
8010166c:	50                   	push   %eax
8010166d:	e8 a4 fc ff ff       	call   80101316 <consputc>
80101672:	83 c4 10             	add    $0x10,%esp
80101675:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80101679:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010167c:	3b 45 10             	cmp    0x10(%ebp),%eax
8010167f:	7c d7                	jl     80101658 <consolewrite+0x2d>
    release(&cons.lock);
80101681:	83 ec 0c             	sub    $0xc,%esp
80101684:	68 a0 0b 11 80       	push   $0x80110ba0
80101689:	e8 c7 4b 00 00       	call   80106255 <release>
8010168e:	83 c4 10             	add    $0x10,%esp
    ilock(ip);
80101691:	83 ec 0c             	sub    $0xc,%esp
80101694:	ff 75 08             	push   0x8(%ebp)
80101697:	e8 d9 0f 00 00       	call   80102675 <ilock>
8010169c:	83 c4 10             	add    $0x10,%esp

    return n;
8010169f:	8b 45 10             	mov    0x10(%ebp),%eax
}
801016a2:	c9                   	leave  
801016a3:	c3                   	ret    

801016a4 <consoleinit>:

void consoleinit(void) {
801016a4:	55                   	push   %ebp
801016a5:	89 e5                	mov    %esp,%ebp
801016a7:	83 ec 08             	sub    $0x8,%esp
    initlock(&cons.lock, "console");
801016aa:	83 ec 08             	sub    $0x8,%esp
801016ad:	68 16 8e 10 80       	push   $0x80108e16
801016b2:	68 a0 0b 11 80       	push   $0x80110ba0
801016b7:	e8 f5 4a 00 00       	call   801061b1 <initlock>
801016bc:	83 c4 10             	add    $0x10,%esp

    devsw[CONSOLE].write = consolewrite;
801016bf:	c7 05 ec 0b 11 80 2b 	movl   $0x8010162b,0x80110bec
801016c6:	16 10 80 
    devsw[CONSOLE].read = consoleread;
801016c9:	c7 05 e8 0b 11 80 1f 	movl   $0x8010151f,0x80110be8
801016d0:	15 10 80 
    cons.locking = 1;
801016d3:	c7 05 d4 0b 11 80 01 	movl   $0x1,0x80110bd4
801016da:	00 00 00 

    ioapicenable(IRQ_KBD, 0);
801016dd:	83 ec 08             	sub    $0x8,%esp
801016e0:	6a 00                	push   $0x0
801016e2:	6a 01                	push   $0x1
801016e4:	e8 99 25 00 00       	call   80103c82 <ioapicenable>
801016e9:	83 c4 10             	add    $0x10,%esp
}
801016ec:	90                   	nop
801016ed:	c9                   	leave  
801016ee:	c3                   	ret    

801016ef <exec>:
#include "proc.h"
#include "defs.h"
#include "elf.h"
#include "fs.h"

int exec(char* path, char** argv) {
801016ef:	55                   	push   %ebp
801016f0:	89 e5                	mov    %esp,%ebp
801016f2:	81 ec 18 01 00 00    	sub    $0x118,%esp
    uint argc, sz, sp, ustack[3 + MAXARG + 1];
    struct elfhdr elf;
    struct inode* ip;
    struct proghdr ph;
    pde_t *pgdir, *oldpgdir;
    struct proc* curproc = myproc();
801016f8:	e8 94 3d 00 00       	call   80105491 <myproc>
801016fd:	89 45 d0             	mov    %eax,-0x30(%ebp)

    begin_op();
80101700:	e8 2b 30 00 00       	call   80104730 <begin_op>
    if ((ip = namei(path)) == 0) {
80101705:	83 ec 0c             	sub    $0xc,%esp
80101708:	ff 75 08             	push   0x8(%ebp)
8010170b:	e8 7e 1d 00 00       	call   8010348e <namei>
80101710:	83 c4 10             	add    $0x10,%esp
80101713:	89 45 d8             	mov    %eax,-0x28(%ebp)
80101716:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
8010171a:	75 1f                	jne    8010173b <exec+0x4c>
        end_op();
8010171c:	e8 9b 30 00 00       	call   801047bc <end_op>
        cprintf("exec: fail\n");
80101721:	83 ec 0c             	sub    $0xc,%esp
80101724:	68 1e 8e 10 80       	push   $0x80108e1e
80101729:	e8 00 f8 ff ff       	call   80100f2e <cprintf>
8010172e:	83 c4 10             	add    $0x10,%esp
        return -1;
80101731:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101736:	e9 22 04 00 00       	jmp    80101b5d <exec+0x46e>
    }
    ilock(ip);
8010173b:	83 ec 0c             	sub    $0xc,%esp
8010173e:	ff 75 d8             	push   -0x28(%ebp)
80101741:	e8 2f 0f 00 00       	call   80102675 <ilock>
80101746:	83 c4 10             	add    $0x10,%esp

    if (!can_access(ip, PROT_R)) {
80101749:	83 ec 08             	sub    $0x8,%esp
8010174c:	6a 01                	push   $0x1
8010174e:	ff 75 d8             	push   -0x28(%ebp)
80101751:	e8 26 1f 00 00       	call   8010367c <can_access>
80101756:	83 c4 10             	add    $0x10,%esp
80101759:	85 c0                	test   %eax,%eax
8010175b:	75 1d                	jne    8010177a <exec+0x8b>
        iunlockput(ip);
8010175d:	83 ec 0c             	sub    $0xc,%esp
80101760:	ff 75 d8             	push   -0x28(%ebp)
80101763:	e8 5a 11 00 00       	call   801028c2 <iunlockput>
80101768:	83 c4 10             	add    $0x10,%esp
        end_op();
8010176b:	e8 4c 30 00 00       	call   801047bc <end_op>
        return -1;
80101770:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101775:	e9 e3 03 00 00       	jmp    80101b5d <exec+0x46e>
    }

    pgdir = 0;
8010177a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)

    // Check ELF header
    if (readi(ip, (char*) &elf, 0, sizeof(elf)) != sizeof(elf)) goto bad;
80101781:	6a 34                	push   $0x34
80101783:	6a 00                	push   $0x0
80101785:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
8010178b:	50                   	push   %eax
8010178c:	ff 75 d8             	push   -0x28(%ebp)
8010178f:	e8 87 16 00 00       	call   80102e1b <readi>
80101794:	83 c4 10             	add    $0x10,%esp
80101797:	83 f8 34             	cmp    $0x34,%eax
8010179a:	0f 85 66 03 00 00    	jne    80101b06 <exec+0x417>
    if (elf.magic != ELF_MAGIC) goto bad;
801017a0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
801017a6:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
801017ab:	0f 85 58 03 00 00    	jne    80101b09 <exec+0x41a>

    if ((pgdir = setupkvm()) == 0) goto bad;
801017b1:	e8 a1 6d 00 00       	call   80108557 <setupkvm>
801017b6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
801017b9:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
801017bd:	0f 84 49 03 00 00    	je     80101b0c <exec+0x41d>

    // Load program into memory.
    sz = 0;
801017c3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    for (i = 0, off = elf.phoff; i < elf.phnum; i++, off += sizeof(ph)) {
801017ca:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
801017d1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
801017d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
801017da:	e9 de 00 00 00       	jmp    801018bd <exec+0x1ce>
        if (readi(ip, (char*) &ph, off, sizeof(ph)) != sizeof(ph)) goto bad;
801017df:	8b 45 e8             	mov    -0x18(%ebp),%eax
801017e2:	6a 20                	push   $0x20
801017e4:	50                   	push   %eax
801017e5:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
801017eb:	50                   	push   %eax
801017ec:	ff 75 d8             	push   -0x28(%ebp)
801017ef:	e8 27 16 00 00       	call   80102e1b <readi>
801017f4:	83 c4 10             	add    $0x10,%esp
801017f7:	83 f8 20             	cmp    $0x20,%eax
801017fa:	0f 85 0f 03 00 00    	jne    80101b0f <exec+0x420>
        if (ph.type != ELF_PROG_LOAD) continue;
80101800:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
80101806:	83 f8 01             	cmp    $0x1,%eax
80101809:	0f 85 a0 00 00 00    	jne    801018af <exec+0x1c0>
        if (ph.memsz < ph.filesz) goto bad;
8010180f:	8b 95 fc fe ff ff    	mov    -0x104(%ebp),%edx
80101815:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
8010181b:	39 c2                	cmp    %eax,%edx
8010181d:	0f 82 ef 02 00 00    	jb     80101b12 <exec+0x423>
        if (ph.vaddr + ph.memsz < ph.vaddr) goto bad;
80101823:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
80101829:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
8010182f:	01 c2                	add    %eax,%edx
80101831:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
80101837:	39 c2                	cmp    %eax,%edx
80101839:	0f 82 d6 02 00 00    	jb     80101b15 <exec+0x426>
        if ((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0) goto bad;
8010183f:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
80101845:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
8010184b:	01 d0                	add    %edx,%eax
8010184d:	83 ec 04             	sub    $0x4,%esp
80101850:	50                   	push   %eax
80101851:	ff 75 e0             	push   -0x20(%ebp)
80101854:	ff 75 d4             	push   -0x2c(%ebp)
80101857:	e8 a1 70 00 00       	call   801088fd <allocuvm>
8010185c:	83 c4 10             	add    $0x10,%esp
8010185f:	89 45 e0             	mov    %eax,-0x20(%ebp)
80101862:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
80101866:	0f 84 ac 02 00 00    	je     80101b18 <exec+0x429>
        if (ph.vaddr % PGSIZE != 0) goto bad;
8010186c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
80101872:	25 ff 0f 00 00       	and    $0xfff,%eax
80101877:	85 c0                	test   %eax,%eax
80101879:	0f 85 9c 02 00 00    	jne    80101b1b <exec+0x42c>
        if (loaduvm(pgdir, (char*) ph.vaddr, ip, ph.off, ph.filesz) < 0)
8010187f:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
80101885:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
8010188b:	8b 8d f0 fe ff ff    	mov    -0x110(%ebp),%ecx
80101891:	83 ec 0c             	sub    $0xc,%esp
80101894:	52                   	push   %edx
80101895:	50                   	push   %eax
80101896:	ff 75 d8             	push   -0x28(%ebp)
80101899:	51                   	push   %ecx
8010189a:	ff 75 d4             	push   -0x2c(%ebp)
8010189d:	e8 8e 6f 00 00       	call   80108830 <loaduvm>
801018a2:	83 c4 20             	add    $0x20,%esp
801018a5:	85 c0                	test   %eax,%eax
801018a7:	0f 88 71 02 00 00    	js     80101b1e <exec+0x42f>
801018ad:	eb 01                	jmp    801018b0 <exec+0x1c1>
        if (ph.type != ELF_PROG_LOAD) continue;
801018af:	90                   	nop
    for (i = 0, off = elf.phoff; i < elf.phnum; i++, off += sizeof(ph)) {
801018b0:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
801018b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
801018b7:	83 c0 20             	add    $0x20,%eax
801018ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
801018bd:	0f b7 85 34 ff ff ff 	movzwl -0xcc(%ebp),%eax
801018c4:	0f b7 c0             	movzwl %ax,%eax
801018c7:	39 45 ec             	cmp    %eax,-0x14(%ebp)
801018ca:	0f 8c 0f ff ff ff    	jl     801017df <exec+0xf0>
            goto bad;
    }
    iunlockput(ip);
801018d0:	83 ec 0c             	sub    $0xc,%esp
801018d3:	ff 75 d8             	push   -0x28(%ebp)
801018d6:	e8 e7 0f 00 00       	call   801028c2 <iunlockput>
801018db:	83 c4 10             	add    $0x10,%esp
    end_op();
801018de:	e8 d9 2e 00 00       	call   801047bc <end_op>
    ip = 0;
801018e3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

    // Allocate two pages at the next page boundary.
    // Make the first inaccessible.  Use the second as the user stack.
    sz = PGROUNDUP(sz);
801018ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
801018ed:	05 ff 0f 00 00       	add    $0xfff,%eax
801018f2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
801018f7:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if ((sz = allocuvm(pgdir, sz, sz + 2 * PGSIZE)) == 0) goto bad;
801018fa:	8b 45 e0             	mov    -0x20(%ebp),%eax
801018fd:	05 00 20 00 00       	add    $0x2000,%eax
80101902:	83 ec 04             	sub    $0x4,%esp
80101905:	50                   	push   %eax
80101906:	ff 75 e0             	push   -0x20(%ebp)
80101909:	ff 75 d4             	push   -0x2c(%ebp)
8010190c:	e8 ec 6f 00 00       	call   801088fd <allocuvm>
80101911:	83 c4 10             	add    $0x10,%esp
80101914:	89 45 e0             	mov    %eax,-0x20(%ebp)
80101917:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
8010191b:	0f 84 00 02 00 00    	je     80101b21 <exec+0x432>
    clearpteu(pgdir, (char*) (sz - 2 * PGSIZE));
80101921:	8b 45 e0             	mov    -0x20(%ebp),%eax
80101924:	2d 00 20 00 00       	sub    $0x2000,%eax
80101929:	83 ec 08             	sub    $0x8,%esp
8010192c:	50                   	push   %eax
8010192d:	ff 75 d4             	push   -0x2c(%ebp)
80101930:	e8 2a 72 00 00       	call   80108b5f <clearpteu>
80101935:	83 c4 10             	add    $0x10,%esp
    sp = sz;
80101938:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010193b:	89 45 dc             	mov    %eax,-0x24(%ebp)

    // Push argument strings, prepare rest of stack in ustack.
    for (argc = 0; argv[argc]; argc++) {
8010193e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
80101945:	e9 96 00 00 00       	jmp    801019e0 <exec+0x2f1>
        if (argc >= MAXARG) goto bad;
8010194a:	83 7d e4 1f          	cmpl   $0x1f,-0x1c(%ebp)
8010194e:	0f 87 d0 01 00 00    	ja     80101b24 <exec+0x435>
        sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
80101954:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80101957:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
8010195e:	8b 45 0c             	mov    0xc(%ebp),%eax
80101961:	01 d0                	add    %edx,%eax
80101963:	8b 00                	mov    (%eax),%eax
80101965:	83 ec 0c             	sub    $0xc,%esp
80101968:	50                   	push   %eax
80101969:	e8 57 4d 00 00       	call   801066c5 <strlen>
8010196e:	83 c4 10             	add    $0x10,%esp
80101971:	89 c2                	mov    %eax,%edx
80101973:	8b 45 dc             	mov    -0x24(%ebp),%eax
80101976:	29 d0                	sub    %edx,%eax
80101978:	83 e8 01             	sub    $0x1,%eax
8010197b:	83 e0 fc             	and    $0xfffffffc,%eax
8010197e:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
80101981:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80101984:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
8010198b:	8b 45 0c             	mov    0xc(%ebp),%eax
8010198e:	01 d0                	add    %edx,%eax
80101990:	8b 00                	mov    (%eax),%eax
80101992:	83 ec 0c             	sub    $0xc,%esp
80101995:	50                   	push   %eax
80101996:	e8 2a 4d 00 00       	call   801066c5 <strlen>
8010199b:	83 c4 10             	add    $0x10,%esp
8010199e:	83 c0 01             	add    $0x1,%eax
801019a1:	89 c2                	mov    %eax,%edx
801019a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801019a6:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
801019ad:	8b 45 0c             	mov    0xc(%ebp),%eax
801019b0:	01 c8                	add    %ecx,%eax
801019b2:	8b 00                	mov    (%eax),%eax
801019b4:	52                   	push   %edx
801019b5:	50                   	push   %eax
801019b6:	ff 75 dc             	push   -0x24(%ebp)
801019b9:	ff 75 d4             	push   -0x2c(%ebp)
801019bc:	e8 4a 73 00 00       	call   80108d0b <copyout>
801019c1:	83 c4 10             	add    $0x10,%esp
801019c4:	85 c0                	test   %eax,%eax
801019c6:	0f 88 5b 01 00 00    	js     80101b27 <exec+0x438>
            goto bad;
        ustack[3 + argc] = sp;
801019cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801019cf:	8d 50 03             	lea    0x3(%eax),%edx
801019d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
801019d5:	89 84 95 3c ff ff ff 	mov    %eax,-0xc4(%ebp,%edx,4)
    for (argc = 0; argv[argc]; argc++) {
801019dc:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
801019e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801019e3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
801019ea:	8b 45 0c             	mov    0xc(%ebp),%eax
801019ed:	01 d0                	add    %edx,%eax
801019ef:	8b 00                	mov    (%eax),%eax
801019f1:	85 c0                	test   %eax,%eax
801019f3:	0f 85 51 ff ff ff    	jne    8010194a <exec+0x25b>
    }
    ustack[3 + argc] = 0;
801019f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801019fc:	83 c0 03             	add    $0x3,%eax
801019ff:	c7 84 85 3c ff ff ff 	movl   $0x0,-0xc4(%ebp,%eax,4)
80101a06:	00 00 00 00 

    ustack[0] = 0xffffffff;  // fake return PC
80101a0a:	c7 85 3c ff ff ff ff 	movl   $0xffffffff,-0xc4(%ebp)
80101a11:	ff ff ff 
    ustack[1] = argc;
80101a14:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80101a17:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
    ustack[2] = sp - (argc + 1) * 4;  // argv pointer
80101a1d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80101a20:	83 c0 01             	add    $0x1,%eax
80101a23:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80101a2a:	8b 45 dc             	mov    -0x24(%ebp),%eax
80101a2d:	29 d0                	sub    %edx,%eax
80101a2f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)

    sp -= (3 + argc + 1) * 4;
80101a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80101a38:	83 c0 04             	add    $0x4,%eax
80101a3b:	c1 e0 02             	shl    $0x2,%eax
80101a3e:	29 45 dc             	sub    %eax,-0x24(%ebp)
    if (copyout(pgdir, sp, ustack, (3 + argc + 1) * 4) < 0) goto bad;
80101a41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80101a44:	83 c0 04             	add    $0x4,%eax
80101a47:	c1 e0 02             	shl    $0x2,%eax
80101a4a:	50                   	push   %eax
80101a4b:	8d 85 3c ff ff ff    	lea    -0xc4(%ebp),%eax
80101a51:	50                   	push   %eax
80101a52:	ff 75 dc             	push   -0x24(%ebp)
80101a55:	ff 75 d4             	push   -0x2c(%ebp)
80101a58:	e8 ae 72 00 00       	call   80108d0b <copyout>
80101a5d:	83 c4 10             	add    $0x10,%esp
80101a60:	85 c0                	test   %eax,%eax
80101a62:	0f 88 c2 00 00 00    	js     80101b2a <exec+0x43b>

    // Save program name for debugging.
    for (last = s = path; *s; s++)
80101a68:	8b 45 08             	mov    0x8(%ebp),%eax
80101a6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101a6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101a71:	89 45 f0             	mov    %eax,-0x10(%ebp)
80101a74:	eb 17                	jmp    80101a8d <exec+0x39e>
        if (*s == '/') last = s + 1;
80101a76:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101a79:	0f b6 00             	movzbl (%eax),%eax
80101a7c:	3c 2f                	cmp    $0x2f,%al
80101a7e:	75 09                	jne    80101a89 <exec+0x39a>
80101a80:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101a83:	83 c0 01             	add    $0x1,%eax
80101a86:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (last = s = path; *s; s++)
80101a89:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80101a8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101a90:	0f b6 00             	movzbl (%eax),%eax
80101a93:	84 c0                	test   %al,%al
80101a95:	75 df                	jne    80101a76 <exec+0x387>
    safestrcpy(curproc->name, last, sizeof(curproc->name));
80101a97:	8b 45 d0             	mov    -0x30(%ebp),%eax
80101a9a:	83 c0 6c             	add    $0x6c,%eax
80101a9d:	83 ec 04             	sub    $0x4,%esp
80101aa0:	6a 10                	push   $0x10
80101aa2:	ff 75 f0             	push   -0x10(%ebp)
80101aa5:	50                   	push   %eax
80101aa6:	e8 cf 4b 00 00       	call   8010667a <safestrcpy>
80101aab:	83 c4 10             	add    $0x10,%esp

    // Commit to the user image.
    oldpgdir = curproc->pgdir;
80101aae:	8b 45 d0             	mov    -0x30(%ebp),%eax
80101ab1:	8b 40 04             	mov    0x4(%eax),%eax
80101ab4:	89 45 cc             	mov    %eax,-0x34(%ebp)
    curproc->pgdir = pgdir;
80101ab7:	8b 45 d0             	mov    -0x30(%ebp),%eax
80101aba:	8b 55 d4             	mov    -0x2c(%ebp),%edx
80101abd:	89 50 04             	mov    %edx,0x4(%eax)
    curproc->sz = sz;
80101ac0:	8b 45 d0             	mov    -0x30(%ebp),%eax
80101ac3:	8b 55 e0             	mov    -0x20(%ebp),%edx
80101ac6:	89 10                	mov    %edx,(%eax)
    curproc->tf->eip = elf.entry;  // main
80101ac8:	8b 45 d0             	mov    -0x30(%ebp),%eax
80101acb:	8b 40 18             	mov    0x18(%eax),%eax
80101ace:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
80101ad4:	89 50 38             	mov    %edx,0x38(%eax)
    curproc->tf->esp = sp;
80101ad7:	8b 45 d0             	mov    -0x30(%ebp),%eax
80101ada:	8b 40 18             	mov    0x18(%eax),%eax
80101add:	8b 55 dc             	mov    -0x24(%ebp),%edx
80101ae0:	89 50 44             	mov    %edx,0x44(%eax)
    switchuvm(curproc);
80101ae3:	83 ec 0c             	sub    $0xc,%esp
80101ae6:	ff 75 d0             	push   -0x30(%ebp)
80101ae9:	e8 33 6b 00 00       	call   80108621 <switchuvm>
80101aee:	83 c4 10             	add    $0x10,%esp
    freevm(oldpgdir);
80101af1:	83 ec 0c             	sub    $0xc,%esp
80101af4:	ff 75 cc             	push   -0x34(%ebp)
80101af7:	e8 ca 6f 00 00       	call   80108ac6 <freevm>
80101afc:	83 c4 10             	add    $0x10,%esp
    return 0;
80101aff:	b8 00 00 00 00       	mov    $0x0,%eax
80101b04:	eb 57                	jmp    80101b5d <exec+0x46e>
    if (readi(ip, (char*) &elf, 0, sizeof(elf)) != sizeof(elf)) goto bad;
80101b06:	90                   	nop
80101b07:	eb 22                	jmp    80101b2b <exec+0x43c>
    if (elf.magic != ELF_MAGIC) goto bad;
80101b09:	90                   	nop
80101b0a:	eb 1f                	jmp    80101b2b <exec+0x43c>
    if ((pgdir = setupkvm()) == 0) goto bad;
80101b0c:	90                   	nop
80101b0d:	eb 1c                	jmp    80101b2b <exec+0x43c>
        if (readi(ip, (char*) &ph, off, sizeof(ph)) != sizeof(ph)) goto bad;
80101b0f:	90                   	nop
80101b10:	eb 19                	jmp    80101b2b <exec+0x43c>
        if (ph.memsz < ph.filesz) goto bad;
80101b12:	90                   	nop
80101b13:	eb 16                	jmp    80101b2b <exec+0x43c>
        if (ph.vaddr + ph.memsz < ph.vaddr) goto bad;
80101b15:	90                   	nop
80101b16:	eb 13                	jmp    80101b2b <exec+0x43c>
        if ((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0) goto bad;
80101b18:	90                   	nop
80101b19:	eb 10                	jmp    80101b2b <exec+0x43c>
        if (ph.vaddr % PGSIZE != 0) goto bad;
80101b1b:	90                   	nop
80101b1c:	eb 0d                	jmp    80101b2b <exec+0x43c>
            goto bad;
80101b1e:	90                   	nop
80101b1f:	eb 0a                	jmp    80101b2b <exec+0x43c>
    if ((sz = allocuvm(pgdir, sz, sz + 2 * PGSIZE)) == 0) goto bad;
80101b21:	90                   	nop
80101b22:	eb 07                	jmp    80101b2b <exec+0x43c>
        if (argc >= MAXARG) goto bad;
80101b24:	90                   	nop
80101b25:	eb 04                	jmp    80101b2b <exec+0x43c>
            goto bad;
80101b27:	90                   	nop
80101b28:	eb 01                	jmp    80101b2b <exec+0x43c>
    if (copyout(pgdir, sp, ustack, (3 + argc + 1) * 4) < 0) goto bad;
80101b2a:	90                   	nop

bad:
    if (pgdir) freevm(pgdir);
80101b2b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
80101b2f:	74 0e                	je     80101b3f <exec+0x450>
80101b31:	83 ec 0c             	sub    $0xc,%esp
80101b34:	ff 75 d4             	push   -0x2c(%ebp)
80101b37:	e8 8a 6f 00 00       	call   80108ac6 <freevm>
80101b3c:	83 c4 10             	add    $0x10,%esp
    if (ip) {
80101b3f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
80101b43:	74 13                	je     80101b58 <exec+0x469>
        iunlockput(ip);
80101b45:	83 ec 0c             	sub    $0xc,%esp
80101b48:	ff 75 d8             	push   -0x28(%ebp)
80101b4b:	e8 72 0d 00 00       	call   801028c2 <iunlockput>
80101b50:	83 c4 10             	add    $0x10,%esp
        end_op();
80101b53:	e8 64 2c 00 00       	call   801047bc <end_op>
    }
    return -1;
80101b58:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80101b5d:	c9                   	leave  
80101b5e:	c3                   	ret    

80101b5f <fileinit>:
struct {
    struct spinlock lock;
    struct file file[NFILE];
} ftable;

void fileinit(void) { initlock(&ftable.lock, "ftable"); }
80101b5f:	55                   	push   %ebp
80101b60:	89 e5                	mov    %esp,%ebp
80101b62:	83 ec 08             	sub    $0x8,%esp
80101b65:	83 ec 08             	sub    $0x8,%esp
80101b68:	68 2a 8e 10 80       	push   $0x80108e2a
80101b6d:	68 40 0c 11 80       	push   $0x80110c40
80101b72:	e8 3a 46 00 00       	call   801061b1 <initlock>
80101b77:	83 c4 10             	add    $0x10,%esp
80101b7a:	90                   	nop
80101b7b:	c9                   	leave  
80101b7c:	c3                   	ret    

80101b7d <filealloc>:

// Allocate a file structure.
struct file* filealloc(void) {
80101b7d:	55                   	push   %ebp
80101b7e:	89 e5                	mov    %esp,%ebp
80101b80:	83 ec 18             	sub    $0x18,%esp
    struct file* f;

    acquire(&ftable.lock);
80101b83:	83 ec 0c             	sub    $0xc,%esp
80101b86:	68 40 0c 11 80       	push   $0x80110c40
80101b8b:	e8 52 46 00 00       	call   801061e2 <acquire>
80101b90:	83 c4 10             	add    $0x10,%esp
    for (f = ftable.file; f < ftable.file + NFILE; f++) {
80101b93:	c7 45 f4 74 0c 11 80 	movl   $0x80110c74,-0xc(%ebp)
80101b9a:	eb 2d                	jmp    80101bc9 <filealloc+0x4c>
        if (f->ref == 0) {
80101b9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101b9f:	8b 40 04             	mov    0x4(%eax),%eax
80101ba2:	85 c0                	test   %eax,%eax
80101ba4:	75 1f                	jne    80101bc5 <filealloc+0x48>
            f->ref = 1;
80101ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101ba9:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
            release(&ftable.lock);
80101bb0:	83 ec 0c             	sub    $0xc,%esp
80101bb3:	68 40 0c 11 80       	push   $0x80110c40
80101bb8:	e8 98 46 00 00       	call   80106255 <release>
80101bbd:	83 c4 10             	add    $0x10,%esp
            return f;
80101bc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101bc3:	eb 23                	jmp    80101be8 <filealloc+0x6b>
    for (f = ftable.file; f < ftable.file + NFILE; f++) {
80101bc5:	83 45 f4 18          	addl   $0x18,-0xc(%ebp)
80101bc9:	b8 d4 15 11 80       	mov    $0x801115d4,%eax
80101bce:	39 45 f4             	cmp    %eax,-0xc(%ebp)
80101bd1:	72 c9                	jb     80101b9c <filealloc+0x1f>
        }
    }
    release(&ftable.lock);
80101bd3:	83 ec 0c             	sub    $0xc,%esp
80101bd6:	68 40 0c 11 80       	push   $0x80110c40
80101bdb:	e8 75 46 00 00       	call   80106255 <release>
80101be0:	83 c4 10             	add    $0x10,%esp
    return 0;
80101be3:	b8 00 00 00 00       	mov    $0x0,%eax
}
80101be8:	c9                   	leave  
80101be9:	c3                   	ret    

80101bea <filedup>:

// Increment ref count for file f.
struct file* filedup(struct file* f) {
80101bea:	55                   	push   %ebp
80101beb:	89 e5                	mov    %esp,%ebp
80101bed:	83 ec 08             	sub    $0x8,%esp
    acquire(&ftable.lock);
80101bf0:	83 ec 0c             	sub    $0xc,%esp
80101bf3:	68 40 0c 11 80       	push   $0x80110c40
80101bf8:	e8 e5 45 00 00       	call   801061e2 <acquire>
80101bfd:	83 c4 10             	add    $0x10,%esp
    if (f->ref < 1) panic("filedup");
80101c00:	8b 45 08             	mov    0x8(%ebp),%eax
80101c03:	8b 40 04             	mov    0x4(%eax),%eax
80101c06:	85 c0                	test   %eax,%eax
80101c08:	7f 0d                	jg     80101c17 <filedup+0x2d>
80101c0a:	83 ec 0c             	sub    $0xc,%esp
80101c0d:	68 31 8e 10 80       	push   $0x80108e31
80101c12:	e8 cc f4 ff ff       	call   801010e3 <panic>
    f->ref++;
80101c17:	8b 45 08             	mov    0x8(%ebp),%eax
80101c1a:	8b 40 04             	mov    0x4(%eax),%eax
80101c1d:	8d 50 01             	lea    0x1(%eax),%edx
80101c20:	8b 45 08             	mov    0x8(%ebp),%eax
80101c23:	89 50 04             	mov    %edx,0x4(%eax)
    release(&ftable.lock);
80101c26:	83 ec 0c             	sub    $0xc,%esp
80101c29:	68 40 0c 11 80       	push   $0x80110c40
80101c2e:	e8 22 46 00 00       	call   80106255 <release>
80101c33:	83 c4 10             	add    $0x10,%esp
    return f;
80101c36:	8b 45 08             	mov    0x8(%ebp),%eax
}
80101c39:	c9                   	leave  
80101c3a:	c3                   	ret    

80101c3b <fileclose>:

// Close file f.  (Decrement ref count, close when reaches 0.)
void fileclose(struct file* f) {
80101c3b:	55                   	push   %ebp
80101c3c:	89 e5                	mov    %esp,%ebp
80101c3e:	83 ec 28             	sub    $0x28,%esp
    struct file ff;

    acquire(&ftable.lock);
80101c41:	83 ec 0c             	sub    $0xc,%esp
80101c44:	68 40 0c 11 80       	push   $0x80110c40
80101c49:	e8 94 45 00 00       	call   801061e2 <acquire>
80101c4e:	83 c4 10             	add    $0x10,%esp
    if (f->ref < 1) panic("fileclose");
80101c51:	8b 45 08             	mov    0x8(%ebp),%eax
80101c54:	8b 40 04             	mov    0x4(%eax),%eax
80101c57:	85 c0                	test   %eax,%eax
80101c59:	7f 0d                	jg     80101c68 <fileclose+0x2d>
80101c5b:	83 ec 0c             	sub    $0xc,%esp
80101c5e:	68 39 8e 10 80       	push   $0x80108e39
80101c63:	e8 7b f4 ff ff       	call   801010e3 <panic>
    if (--f->ref > 0) {
80101c68:	8b 45 08             	mov    0x8(%ebp),%eax
80101c6b:	8b 40 04             	mov    0x4(%eax),%eax
80101c6e:	8d 50 ff             	lea    -0x1(%eax),%edx
80101c71:	8b 45 08             	mov    0x8(%ebp),%eax
80101c74:	89 50 04             	mov    %edx,0x4(%eax)
80101c77:	8b 45 08             	mov    0x8(%ebp),%eax
80101c7a:	8b 40 04             	mov    0x4(%eax),%eax
80101c7d:	85 c0                	test   %eax,%eax
80101c7f:	7e 15                	jle    80101c96 <fileclose+0x5b>
        release(&ftable.lock);
80101c81:	83 ec 0c             	sub    $0xc,%esp
80101c84:	68 40 0c 11 80       	push   $0x80110c40
80101c89:	e8 c7 45 00 00       	call   80106255 <release>
80101c8e:	83 c4 10             	add    $0x10,%esp
80101c91:	e9 8b 00 00 00       	jmp    80101d21 <fileclose+0xe6>
        return;
    }
    ff = *f;
80101c96:	8b 45 08             	mov    0x8(%ebp),%eax
80101c99:	8b 10                	mov    (%eax),%edx
80101c9b:	89 55 e0             	mov    %edx,-0x20(%ebp)
80101c9e:	8b 50 04             	mov    0x4(%eax),%edx
80101ca1:	89 55 e4             	mov    %edx,-0x1c(%ebp)
80101ca4:	8b 50 08             	mov    0x8(%eax),%edx
80101ca7:	89 55 e8             	mov    %edx,-0x18(%ebp)
80101caa:	8b 50 0c             	mov    0xc(%eax),%edx
80101cad:	89 55 ec             	mov    %edx,-0x14(%ebp)
80101cb0:	8b 50 10             	mov    0x10(%eax),%edx
80101cb3:	89 55 f0             	mov    %edx,-0x10(%ebp)
80101cb6:	8b 40 14             	mov    0x14(%eax),%eax
80101cb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    f->ref = 0;
80101cbc:	8b 45 08             	mov    0x8(%ebp),%eax
80101cbf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    f->type = FD_NONE;
80101cc6:	8b 45 08             	mov    0x8(%ebp),%eax
80101cc9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    release(&ftable.lock);
80101ccf:	83 ec 0c             	sub    $0xc,%esp
80101cd2:	68 40 0c 11 80       	push   $0x80110c40
80101cd7:	e8 79 45 00 00       	call   80106255 <release>
80101cdc:	83 c4 10             	add    $0x10,%esp

    if (ff.type == FD_PIPE)
80101cdf:	8b 45 e0             	mov    -0x20(%ebp),%eax
80101ce2:	83 f8 01             	cmp    $0x1,%eax
80101ce5:	75 19                	jne    80101d00 <fileclose+0xc5>
        pipeclose(ff.pipe, ff.writable);
80101ce7:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
80101ceb:	0f be d0             	movsbl %al,%edx
80101cee:	8b 45 ec             	mov    -0x14(%ebp),%eax
80101cf1:	83 ec 08             	sub    $0x8,%esp
80101cf4:	52                   	push   %edx
80101cf5:	50                   	push   %eax
80101cf6:	e8 25 34 00 00       	call   80105120 <pipeclose>
80101cfb:	83 c4 10             	add    $0x10,%esp
80101cfe:	eb 21                	jmp    80101d21 <fileclose+0xe6>
    else if (ff.type == FD_INODE) {
80101d00:	8b 45 e0             	mov    -0x20(%ebp),%eax
80101d03:	83 f8 02             	cmp    $0x2,%eax
80101d06:	75 19                	jne    80101d21 <fileclose+0xe6>
        begin_op();
80101d08:	e8 23 2a 00 00       	call   80104730 <begin_op>
        iput(ff.ip);
80101d0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101d10:	83 ec 0c             	sub    $0xc,%esp
80101d13:	50                   	push   %eax
80101d14:	e8 d9 0a 00 00       	call   801027f2 <iput>
80101d19:	83 c4 10             	add    $0x10,%esp
        end_op();
80101d1c:	e8 9b 2a 00 00       	call   801047bc <end_op>
    }
}
80101d21:	c9                   	leave  
80101d22:	c3                   	ret    

80101d23 <filestat>:

// Get metadata about file f.
int filestat(struct file* f, struct stat* st) {
80101d23:	55                   	push   %ebp
80101d24:	89 e5                	mov    %esp,%ebp
80101d26:	83 ec 08             	sub    $0x8,%esp
    if (f->type == FD_INODE) {
80101d29:	8b 45 08             	mov    0x8(%ebp),%eax
80101d2c:	8b 00                	mov    (%eax),%eax
80101d2e:	83 f8 02             	cmp    $0x2,%eax
80101d31:	75 40                	jne    80101d73 <filestat+0x50>
        ilock(f->ip);
80101d33:	8b 45 08             	mov    0x8(%ebp),%eax
80101d36:	8b 40 10             	mov    0x10(%eax),%eax
80101d39:	83 ec 0c             	sub    $0xc,%esp
80101d3c:	50                   	push   %eax
80101d3d:	e8 33 09 00 00       	call   80102675 <ilock>
80101d42:	83 c4 10             	add    $0x10,%esp
        stati(f->ip, st);
80101d45:	8b 45 08             	mov    0x8(%ebp),%eax
80101d48:	8b 40 10             	mov    0x10(%eax),%eax
80101d4b:	83 ec 08             	sub    $0x8,%esp
80101d4e:	ff 75 0c             	push   0xc(%ebp)
80101d51:	50                   	push   %eax
80101d52:	e8 7e 10 00 00       	call   80102dd5 <stati>
80101d57:	83 c4 10             	add    $0x10,%esp
        iunlock(f->ip);
80101d5a:	8b 45 08             	mov    0x8(%ebp),%eax
80101d5d:	8b 40 10             	mov    0x10(%eax),%eax
80101d60:	83 ec 0c             	sub    $0xc,%esp
80101d63:	50                   	push   %eax
80101d64:	e8 3b 0a 00 00       	call   801027a4 <iunlock>
80101d69:	83 c4 10             	add    $0x10,%esp
        return 0;
80101d6c:	b8 00 00 00 00       	mov    $0x0,%eax
80101d71:	eb 05                	jmp    80101d78 <filestat+0x55>
    }
    return -1;
80101d73:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80101d78:	c9                   	leave  
80101d79:	c3                   	ret    

80101d7a <fileread>:

// Read from file f.
int fileread(struct file* f, char* addr, int n) {
80101d7a:	55                   	push   %ebp
80101d7b:	89 e5                	mov    %esp,%ebp
80101d7d:	83 ec 18             	sub    $0x18,%esp
    int r;

    if (f->readable == 0) return -1;
80101d80:	8b 45 08             	mov    0x8(%ebp),%eax
80101d83:	0f b6 40 08          	movzbl 0x8(%eax),%eax
80101d87:	84 c0                	test   %al,%al
80101d89:	75 0a                	jne    80101d95 <fileread+0x1b>
80101d8b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101d90:	e9 9b 00 00 00       	jmp    80101e30 <fileread+0xb6>
    if (f->type == FD_PIPE) return piperead(f->pipe, addr, n);
80101d95:	8b 45 08             	mov    0x8(%ebp),%eax
80101d98:	8b 00                	mov    (%eax),%eax
80101d9a:	83 f8 01             	cmp    $0x1,%eax
80101d9d:	75 1a                	jne    80101db9 <fileread+0x3f>
80101d9f:	8b 45 08             	mov    0x8(%ebp),%eax
80101da2:	8b 40 0c             	mov    0xc(%eax),%eax
80101da5:	83 ec 04             	sub    $0x4,%esp
80101da8:	ff 75 10             	push   0x10(%ebp)
80101dab:	ff 75 0c             	push   0xc(%ebp)
80101dae:	50                   	push   %eax
80101daf:	e8 19 35 00 00       	call   801052cd <piperead>
80101db4:	83 c4 10             	add    $0x10,%esp
80101db7:	eb 77                	jmp    80101e30 <fileread+0xb6>
    if (f->type == FD_INODE) {
80101db9:	8b 45 08             	mov    0x8(%ebp),%eax
80101dbc:	8b 00                	mov    (%eax),%eax
80101dbe:	83 f8 02             	cmp    $0x2,%eax
80101dc1:	75 60                	jne    80101e23 <fileread+0xa9>
        ilock(f->ip);
80101dc3:	8b 45 08             	mov    0x8(%ebp),%eax
80101dc6:	8b 40 10             	mov    0x10(%eax),%eax
80101dc9:	83 ec 0c             	sub    $0xc,%esp
80101dcc:	50                   	push   %eax
80101dcd:	e8 a3 08 00 00       	call   80102675 <ilock>
80101dd2:	83 c4 10             	add    $0x10,%esp
        if ((r = readi(f->ip, addr, f->off, n)) > 0) f->off += r;
80101dd5:	8b 4d 10             	mov    0x10(%ebp),%ecx
80101dd8:	8b 45 08             	mov    0x8(%ebp),%eax
80101ddb:	8b 50 14             	mov    0x14(%eax),%edx
80101dde:	8b 45 08             	mov    0x8(%ebp),%eax
80101de1:	8b 40 10             	mov    0x10(%eax),%eax
80101de4:	51                   	push   %ecx
80101de5:	52                   	push   %edx
80101de6:	ff 75 0c             	push   0xc(%ebp)
80101de9:	50                   	push   %eax
80101dea:	e8 2c 10 00 00       	call   80102e1b <readi>
80101def:	83 c4 10             	add    $0x10,%esp
80101df2:	89 45 f4             	mov    %eax,-0xc(%ebp)
80101df5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80101df9:	7e 11                	jle    80101e0c <fileread+0x92>
80101dfb:	8b 45 08             	mov    0x8(%ebp),%eax
80101dfe:	8b 50 14             	mov    0x14(%eax),%edx
80101e01:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101e04:	01 c2                	add    %eax,%edx
80101e06:	8b 45 08             	mov    0x8(%ebp),%eax
80101e09:	89 50 14             	mov    %edx,0x14(%eax)
        iunlock(f->ip);
80101e0c:	8b 45 08             	mov    0x8(%ebp),%eax
80101e0f:	8b 40 10             	mov    0x10(%eax),%eax
80101e12:	83 ec 0c             	sub    $0xc,%esp
80101e15:	50                   	push   %eax
80101e16:	e8 89 09 00 00       	call   801027a4 <iunlock>
80101e1b:	83 c4 10             	add    $0x10,%esp
        return r;
80101e1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101e21:	eb 0d                	jmp    80101e30 <fileread+0xb6>
    }

    panic("fileread");
80101e23:	83 ec 0c             	sub    $0xc,%esp
80101e26:	68 43 8e 10 80       	push   $0x80108e43
80101e2b:	e8 b3 f2 ff ff       	call   801010e3 <panic>
}
80101e30:	c9                   	leave  
80101e31:	c3                   	ret    

80101e32 <filewrite>:

//PAGEBREAK!
// Write to file f.
int filewrite(struct file* f, char* addr, int n) {
80101e32:	55                   	push   %ebp
80101e33:	89 e5                	mov    %esp,%ebp
80101e35:	53                   	push   %ebx
80101e36:	83 ec 14             	sub    $0x14,%esp
    int r;

    if (f->writable == 0) return -1;
80101e39:	8b 45 08             	mov    0x8(%ebp),%eax
80101e3c:	0f b6 40 09          	movzbl 0x9(%eax),%eax
80101e40:	84 c0                	test   %al,%al
80101e42:	75 0a                	jne    80101e4e <filewrite+0x1c>
80101e44:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101e49:	e9 1b 01 00 00       	jmp    80101f69 <filewrite+0x137>
    if (f->type == FD_PIPE) return pipewrite(f->pipe, addr, n);
80101e4e:	8b 45 08             	mov    0x8(%ebp),%eax
80101e51:	8b 00                	mov    (%eax),%eax
80101e53:	83 f8 01             	cmp    $0x1,%eax
80101e56:	75 1d                	jne    80101e75 <filewrite+0x43>
80101e58:	8b 45 08             	mov    0x8(%ebp),%eax
80101e5b:	8b 40 0c             	mov    0xc(%eax),%eax
80101e5e:	83 ec 04             	sub    $0x4,%esp
80101e61:	ff 75 10             	push   0x10(%ebp)
80101e64:	ff 75 0c             	push   0xc(%ebp)
80101e67:	50                   	push   %eax
80101e68:	e8 5e 33 00 00       	call   801051cb <pipewrite>
80101e6d:	83 c4 10             	add    $0x10,%esp
80101e70:	e9 f4 00 00 00       	jmp    80101f69 <filewrite+0x137>
    if (f->type == FD_INODE) {
80101e75:	8b 45 08             	mov    0x8(%ebp),%eax
80101e78:	8b 00                	mov    (%eax),%eax
80101e7a:	83 f8 02             	cmp    $0x2,%eax
80101e7d:	0f 85 d9 00 00 00    	jne    80101f5c <filewrite+0x12a>
        // the maximum log transaction size, including
        // i-node, indirect block, allocation blocks,
        // and 2 blocks of slop for non-aligned writes.
        // this really belongs lower down, since writei()
        // might be writing a device like the console.
        int max = ((MAXOPBLOCKS - 1 - 1 - 2) / 2) * 512;
80101e83:	c7 45 ec 00 06 00 00 	movl   $0x600,-0x14(%ebp)
        int i = 0;
80101e8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        while (i < n) {
80101e91:	e9 a3 00 00 00       	jmp    80101f39 <filewrite+0x107>
            int n1 = n - i;
80101e96:	8b 45 10             	mov    0x10(%ebp),%eax
80101e99:	2b 45 f4             	sub    -0xc(%ebp),%eax
80101e9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
            if (n1 > max) n1 = max;
80101e9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
80101ea2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
80101ea5:	7e 06                	jle    80101ead <filewrite+0x7b>
80101ea7:	8b 45 ec             	mov    -0x14(%ebp),%eax
80101eaa:	89 45 f0             	mov    %eax,-0x10(%ebp)

            begin_op();
80101ead:	e8 7e 28 00 00       	call   80104730 <begin_op>
            ilock(f->ip);
80101eb2:	8b 45 08             	mov    0x8(%ebp),%eax
80101eb5:	8b 40 10             	mov    0x10(%eax),%eax
80101eb8:	83 ec 0c             	sub    $0xc,%esp
80101ebb:	50                   	push   %eax
80101ebc:	e8 b4 07 00 00       	call   80102675 <ilock>
80101ec1:	83 c4 10             	add    $0x10,%esp
            if ((r = writei(f->ip, addr + i, f->off, n1)) > 0) f->off += r;
80101ec4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
80101ec7:	8b 45 08             	mov    0x8(%ebp),%eax
80101eca:	8b 50 14             	mov    0x14(%eax),%edx
80101ecd:	8b 5d f4             	mov    -0xc(%ebp),%ebx
80101ed0:	8b 45 0c             	mov    0xc(%ebp),%eax
80101ed3:	01 c3                	add    %eax,%ebx
80101ed5:	8b 45 08             	mov    0x8(%ebp),%eax
80101ed8:	8b 40 10             	mov    0x10(%eax),%eax
80101edb:	51                   	push   %ecx
80101edc:	52                   	push   %edx
80101edd:	53                   	push   %ebx
80101ede:	50                   	push   %eax
80101edf:	e8 8c 10 00 00       	call   80102f70 <writei>
80101ee4:	83 c4 10             	add    $0x10,%esp
80101ee7:	89 45 e8             	mov    %eax,-0x18(%ebp)
80101eea:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
80101eee:	7e 11                	jle    80101f01 <filewrite+0xcf>
80101ef0:	8b 45 08             	mov    0x8(%ebp),%eax
80101ef3:	8b 50 14             	mov    0x14(%eax),%edx
80101ef6:	8b 45 e8             	mov    -0x18(%ebp),%eax
80101ef9:	01 c2                	add    %eax,%edx
80101efb:	8b 45 08             	mov    0x8(%ebp),%eax
80101efe:	89 50 14             	mov    %edx,0x14(%eax)
            iunlock(f->ip);
80101f01:	8b 45 08             	mov    0x8(%ebp),%eax
80101f04:	8b 40 10             	mov    0x10(%eax),%eax
80101f07:	83 ec 0c             	sub    $0xc,%esp
80101f0a:	50                   	push   %eax
80101f0b:	e8 94 08 00 00       	call   801027a4 <iunlock>
80101f10:	83 c4 10             	add    $0x10,%esp
            end_op();
80101f13:	e8 a4 28 00 00       	call   801047bc <end_op>

            if (r < 0) break;
80101f18:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
80101f1c:	78 29                	js     80101f47 <filewrite+0x115>
            if (r != n1) panic("short filewrite");
80101f1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
80101f21:	3b 45 f0             	cmp    -0x10(%ebp),%eax
80101f24:	74 0d                	je     80101f33 <filewrite+0x101>
80101f26:	83 ec 0c             	sub    $0xc,%esp
80101f29:	68 4c 8e 10 80       	push   $0x80108e4c
80101f2e:	e8 b0 f1 ff ff       	call   801010e3 <panic>
            i += r;
80101f33:	8b 45 e8             	mov    -0x18(%ebp),%eax
80101f36:	01 45 f4             	add    %eax,-0xc(%ebp)
        while (i < n) {
80101f39:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101f3c:	3b 45 10             	cmp    0x10(%ebp),%eax
80101f3f:	0f 8c 51 ff ff ff    	jl     80101e96 <filewrite+0x64>
80101f45:	eb 01                	jmp    80101f48 <filewrite+0x116>
            if (r < 0) break;
80101f47:	90                   	nop
        }
        return i == n ? n : -1;
80101f48:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101f4b:	3b 45 10             	cmp    0x10(%ebp),%eax
80101f4e:	75 05                	jne    80101f55 <filewrite+0x123>
80101f50:	8b 45 10             	mov    0x10(%ebp),%eax
80101f53:	eb 14                	jmp    80101f69 <filewrite+0x137>
80101f55:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101f5a:	eb 0d                	jmp    80101f69 <filewrite+0x137>
    }
    panic("filewrite");
80101f5c:	83 ec 0c             	sub    $0xc,%esp
80101f5f:	68 5c 8e 10 80       	push   $0x80108e5c
80101f64:	e8 7a f1 ff ff       	call   801010e3 <panic>
}
80101f69:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80101f6c:	c9                   	leave  
80101f6d:	c3                   	ret    

80101f6e <readsb>:
// only one device
struct superblock sb;
// int free_blocks = FSSIZE;

// Read the super block.
void readsb(int dev, struct superblock* sb) {
80101f6e:	55                   	push   %ebp
80101f6f:	89 e5                	mov    %esp,%ebp
80101f71:	83 ec 18             	sub    $0x18,%esp
    struct buf* bp;

    bp = bread(dev, 1);
80101f74:	8b 45 08             	mov    0x8(%ebp),%eax
80101f77:	83 ec 08             	sub    $0x8,%esp
80101f7a:	6a 01                	push   $0x1
80101f7c:	50                   	push   %eax
80101f7d:	e8 f7 ec ff ff       	call   80100c79 <bread>
80101f82:	83 c4 10             	add    $0x10,%esp
80101f85:	89 45 f4             	mov    %eax,-0xc(%ebp)
    memmove(sb, bp->data, sizeof(*sb));
80101f88:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101f8b:	83 c0 5c             	add    $0x5c,%eax
80101f8e:	83 ec 04             	sub    $0x4,%esp
80101f91:	6a 1c                	push   $0x1c
80101f93:	50                   	push   %eax
80101f94:	ff 75 0c             	push   0xc(%ebp)
80101f97:	e8 9a 45 00 00       	call   80106536 <memmove>
80101f9c:	83 c4 10             	add    $0x10,%esp
    brelse(bp);
80101f9f:	83 ec 0c             	sub    $0xc,%esp
80101fa2:	ff 75 f4             	push   -0xc(%ebp)
80101fa5:	e8 d5 ed ff ff       	call   80100d7f <brelse>
80101faa:	83 c4 10             	add    $0x10,%esp
}
80101fad:	90                   	nop
80101fae:	c9                   	leave  
80101faf:	c3                   	ret    

80101fb0 <bzero>:

// Zero a block.
static void bzero(int dev, int bno) {
80101fb0:	55                   	push   %ebp
80101fb1:	89 e5                	mov    %esp,%ebp
80101fb3:	83 ec 18             	sub    $0x18,%esp
    struct buf* bp;

    bp = bread(dev, bno);
80101fb6:	8b 55 0c             	mov    0xc(%ebp),%edx
80101fb9:	8b 45 08             	mov    0x8(%ebp),%eax
80101fbc:	83 ec 08             	sub    $0x8,%esp
80101fbf:	52                   	push   %edx
80101fc0:	50                   	push   %eax
80101fc1:	e8 b3 ec ff ff       	call   80100c79 <bread>
80101fc6:	83 c4 10             	add    $0x10,%esp
80101fc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    memset(bp->data, 0, BSIZE);
80101fcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
80101fcf:	83 c0 5c             	add    $0x5c,%eax
80101fd2:	83 ec 04             	sub    $0x4,%esp
80101fd5:	68 00 02 00 00       	push   $0x200
80101fda:	6a 00                	push   $0x0
80101fdc:	50                   	push   %eax
80101fdd:	e8 95 44 00 00       	call   80106477 <memset>
80101fe2:	83 c4 10             	add    $0x10,%esp
    log_write(bp);
80101fe5:	83 ec 0c             	sub    $0xc,%esp
80101fe8:	ff 75 f4             	push   -0xc(%ebp)
80101feb:	e8 79 29 00 00       	call   80104969 <log_write>
80101ff0:	83 c4 10             	add    $0x10,%esp
    brelse(bp);
80101ff3:	83 ec 0c             	sub    $0xc,%esp
80101ff6:	ff 75 f4             	push   -0xc(%ebp)
80101ff9:	e8 81 ed ff ff       	call   80100d7f <brelse>
80101ffe:	83 c4 10             	add    $0x10,%esp
}
80102001:	90                   	nop
80102002:	c9                   	leave  
80102003:	c3                   	ret    

80102004 <balloc>:

// Blocks.

// Allocate a zeroed disk block.
static uint balloc(uint dev) {
80102004:	55                   	push   %ebp
80102005:	89 e5                	mov    %esp,%ebp
80102007:	83 ec 18             	sub    $0x18,%esp
    int b, bi, m;
    struct buf* bp;

    bp = 0;
8010200a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (b = 0; b < sb.size; b += BPB) {
80102011:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80102018:	e9 0b 01 00 00       	jmp    80102128 <balloc+0x124>
        bp = bread(dev, BBLOCK(b, sb));
8010201d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102020:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
80102026:	85 c0                	test   %eax,%eax
80102028:	0f 48 c2             	cmovs  %edx,%eax
8010202b:	c1 f8 0c             	sar    $0xc,%eax
8010202e:	89 c2                	mov    %eax,%edx
80102030:	a1 f8 15 11 80       	mov    0x801115f8,%eax
80102035:	01 d0                	add    %edx,%eax
80102037:	83 ec 08             	sub    $0x8,%esp
8010203a:	50                   	push   %eax
8010203b:	ff 75 08             	push   0x8(%ebp)
8010203e:	e8 36 ec ff ff       	call   80100c79 <bread>
80102043:	83 c4 10             	add    $0x10,%esp
80102046:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (bi = 0; bi < BPB && b + bi < sb.size; bi++) {
80102049:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
80102050:	e9 9e 00 00 00       	jmp    801020f3 <balloc+0xef>
            m = 1 << (bi % 8);
80102055:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102058:	83 e0 07             	and    $0x7,%eax
8010205b:	ba 01 00 00 00       	mov    $0x1,%edx
80102060:	89 c1                	mov    %eax,%ecx
80102062:	d3 e2                	shl    %cl,%edx
80102064:	89 d0                	mov    %edx,%eax
80102066:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if ((bp->data[bi / 8] & m) == 0) {  // Is block free?
80102069:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010206c:	8d 50 07             	lea    0x7(%eax),%edx
8010206f:	85 c0                	test   %eax,%eax
80102071:	0f 48 c2             	cmovs  %edx,%eax
80102074:	c1 f8 03             	sar    $0x3,%eax
80102077:	89 c2                	mov    %eax,%edx
80102079:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010207c:	0f b6 44 10 5c       	movzbl 0x5c(%eax,%edx,1),%eax
80102081:	0f b6 c0             	movzbl %al,%eax
80102084:	23 45 e8             	and    -0x18(%ebp),%eax
80102087:	85 c0                	test   %eax,%eax
80102089:	75 64                	jne    801020ef <balloc+0xeb>
                bp->data[bi / 8] |= m;          // Mark block in use.
8010208b:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010208e:	8d 50 07             	lea    0x7(%eax),%edx
80102091:	85 c0                	test   %eax,%eax
80102093:	0f 48 c2             	cmovs  %edx,%eax
80102096:	c1 f8 03             	sar    $0x3,%eax
80102099:	8b 55 ec             	mov    -0x14(%ebp),%edx
8010209c:	0f b6 54 02 5c       	movzbl 0x5c(%edx,%eax,1),%edx
801020a1:	89 d1                	mov    %edx,%ecx
801020a3:	8b 55 e8             	mov    -0x18(%ebp),%edx
801020a6:	09 ca                	or     %ecx,%edx
801020a8:	89 d1                	mov    %edx,%ecx
801020aa:	8b 55 ec             	mov    -0x14(%ebp),%edx
801020ad:	88 4c 02 5c          	mov    %cl,0x5c(%edx,%eax,1)
                log_write(bp);
801020b1:	83 ec 0c             	sub    $0xc,%esp
801020b4:	ff 75 ec             	push   -0x14(%ebp)
801020b7:	e8 ad 28 00 00       	call   80104969 <log_write>
801020bc:	83 c4 10             	add    $0x10,%esp
                brelse(bp);
801020bf:	83 ec 0c             	sub    $0xc,%esp
801020c2:	ff 75 ec             	push   -0x14(%ebp)
801020c5:	e8 b5 ec ff ff       	call   80100d7f <brelse>
801020ca:	83 c4 10             	add    $0x10,%esp
                bzero(dev, b + bi);
801020cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
801020d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
801020d3:	01 c2                	add    %eax,%edx
801020d5:	8b 45 08             	mov    0x8(%ebp),%eax
801020d8:	83 ec 08             	sub    $0x8,%esp
801020db:	52                   	push   %edx
801020dc:	50                   	push   %eax
801020dd:	e8 ce fe ff ff       	call   80101fb0 <bzero>
801020e2:	83 c4 10             	add    $0x10,%esp
                // free_blocks--;
                return b + bi;
801020e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
801020e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
801020eb:	01 d0                	add    %edx,%eax
801020ed:	eb 57                	jmp    80102146 <balloc+0x142>
        for (bi = 0; bi < BPB && b + bi < sb.size; bi++) {
801020ef:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
801020f3:	81 7d f0 ff 0f 00 00 	cmpl   $0xfff,-0x10(%ebp)
801020fa:	7f 17                	jg     80102113 <balloc+0x10f>
801020fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
801020ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102102:	01 d0                	add    %edx,%eax
80102104:	89 c2                	mov    %eax,%edx
80102106:	a1 e0 15 11 80       	mov    0x801115e0,%eax
8010210b:	39 c2                	cmp    %eax,%edx
8010210d:	0f 82 42 ff ff ff    	jb     80102055 <balloc+0x51>
            }
        }
        brelse(bp);
80102113:	83 ec 0c             	sub    $0xc,%esp
80102116:	ff 75 ec             	push   -0x14(%ebp)
80102119:	e8 61 ec ff ff       	call   80100d7f <brelse>
8010211e:	83 c4 10             	add    $0x10,%esp
    for (b = 0; b < sb.size; b += BPB) {
80102121:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
80102128:	8b 15 e0 15 11 80    	mov    0x801115e0,%edx
8010212e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102131:	39 c2                	cmp    %eax,%edx
80102133:	0f 87 e4 fe ff ff    	ja     8010201d <balloc+0x19>
    }
    panic("balloc: out of blocks");
80102139:	83 ec 0c             	sub    $0xc,%esp
8010213c:	68 68 8e 10 80       	push   $0x80108e68
80102141:	e8 9d ef ff ff       	call   801010e3 <panic>
}
80102146:	c9                   	leave  
80102147:	c3                   	ret    

80102148 <count_free_blocks>:

int count_free_blocks() {
80102148:	55                   	push   %ebp
80102149:	89 e5                	mov    %esp,%ebp
8010214b:	83 ec 28             	sub    $0x28,%esp
    int b, bi, m;
    struct buf* bp;
    int dev = 1;
8010214e:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
    int free_blocks = 0;
80102155:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    bp = 0;
8010215c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    for (b = 0; b < sb.size; b += BPB) {
80102163:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010216a:	e9 a5 00 00 00       	jmp    80102214 <count_free_blocks+0xcc>
        bp = bread(dev, BBLOCK(b, sb));
8010216f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102172:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
80102178:	85 c0                	test   %eax,%eax
8010217a:	0f 48 c2             	cmovs  %edx,%eax
8010217d:	c1 f8 0c             	sar    $0xc,%eax
80102180:	89 c2                	mov    %eax,%edx
80102182:	a1 f8 15 11 80       	mov    0x801115f8,%eax
80102187:	01 c2                	add    %eax,%edx
80102189:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010218c:	83 ec 08             	sub    $0x8,%esp
8010218f:	52                   	push   %edx
80102190:	50                   	push   %eax
80102191:	e8 e3 ea ff ff       	call   80100c79 <bread>
80102196:	83 c4 10             	add    $0x10,%esp
80102199:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for (bi = 0; bi < BPB && b + bi < sb.size; bi++) {
8010219c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
801021a3:	eb 3e                	jmp    801021e3 <count_free_blocks+0x9b>
            m = 1 << (bi % 8);
801021a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
801021a8:	83 e0 07             	and    $0x7,%eax
801021ab:	ba 01 00 00 00       	mov    $0x1,%edx
801021b0:	89 c1                	mov    %eax,%ecx
801021b2:	d3 e2                	shl    %cl,%edx
801021b4:	89 d0                	mov    %edx,%eax
801021b6:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if ((bp->data[bi / 8] & m) == 0) {  // Is block free?
801021b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
801021bc:	8d 50 07             	lea    0x7(%eax),%edx
801021bf:	85 c0                	test   %eax,%eax
801021c1:	0f 48 c2             	cmovs  %edx,%eax
801021c4:	c1 f8 03             	sar    $0x3,%eax
801021c7:	89 c2                	mov    %eax,%edx
801021c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801021cc:	0f b6 44 10 5c       	movzbl 0x5c(%eax,%edx,1),%eax
801021d1:	0f b6 c0             	movzbl %al,%eax
801021d4:	23 45 e0             	and    -0x20(%ebp),%eax
801021d7:	85 c0                	test   %eax,%eax
801021d9:	75 04                	jne    801021df <count_free_blocks+0x97>
                free_blocks++;
801021db:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
        for (bi = 0; bi < BPB && b + bi < sb.size; bi++) {
801021df:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
801021e3:	81 7d f0 ff 0f 00 00 	cmpl   $0xfff,-0x10(%ebp)
801021ea:	7f 13                	jg     801021ff <count_free_blocks+0xb7>
801021ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
801021ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
801021f2:	01 d0                	add    %edx,%eax
801021f4:	89 c2                	mov    %eax,%edx
801021f6:	a1 e0 15 11 80       	mov    0x801115e0,%eax
801021fb:	39 c2                	cmp    %eax,%edx
801021fd:	72 a6                	jb     801021a5 <count_free_blocks+0x5d>
            }
        }
        brelse(bp);
801021ff:	83 ec 0c             	sub    $0xc,%esp
80102202:	ff 75 e4             	push   -0x1c(%ebp)
80102205:	e8 75 eb ff ff       	call   80100d7f <brelse>
8010220a:	83 c4 10             	add    $0x10,%esp
    for (b = 0; b < sb.size; b += BPB) {
8010220d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
80102214:	8b 15 e0 15 11 80    	mov    0x801115e0,%edx
8010221a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010221d:	39 c2                	cmp    %eax,%edx
8010221f:	0f 87 4a ff ff ff    	ja     8010216f <count_free_blocks+0x27>
    }
    
    return free_blocks;
80102225:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
80102228:	c9                   	leave  
80102229:	c3                   	ret    

8010222a <bfree>:


// Free a disk block.
static void bfree(int dev, uint b) {
8010222a:	55                   	push   %ebp
8010222b:	89 e5                	mov    %esp,%ebp
8010222d:	83 ec 18             	sub    $0x18,%esp
    struct buf* bp;
    int bi, m;

    bp = bread(dev, BBLOCK(b, sb));
80102230:	8b 45 0c             	mov    0xc(%ebp),%eax
80102233:	c1 e8 0c             	shr    $0xc,%eax
80102236:	89 c2                	mov    %eax,%edx
80102238:	a1 f8 15 11 80       	mov    0x801115f8,%eax
8010223d:	01 c2                	add    %eax,%edx
8010223f:	8b 45 08             	mov    0x8(%ebp),%eax
80102242:	83 ec 08             	sub    $0x8,%esp
80102245:	52                   	push   %edx
80102246:	50                   	push   %eax
80102247:	e8 2d ea ff ff       	call   80100c79 <bread>
8010224c:	83 c4 10             	add    $0x10,%esp
8010224f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bi = b % BPB;
80102252:	8b 45 0c             	mov    0xc(%ebp),%eax
80102255:	25 ff 0f 00 00       	and    $0xfff,%eax
8010225a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    m = 1 << (bi % 8);
8010225d:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102260:	83 e0 07             	and    $0x7,%eax
80102263:	ba 01 00 00 00       	mov    $0x1,%edx
80102268:	89 c1                	mov    %eax,%ecx
8010226a:	d3 e2                	shl    %cl,%edx
8010226c:	89 d0                	mov    %edx,%eax
8010226e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((bp->data[bi / 8] & m) == 0) panic("freeing free block");
80102271:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102274:	8d 50 07             	lea    0x7(%eax),%edx
80102277:	85 c0                	test   %eax,%eax
80102279:	0f 48 c2             	cmovs  %edx,%eax
8010227c:	c1 f8 03             	sar    $0x3,%eax
8010227f:	89 c2                	mov    %eax,%edx
80102281:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102284:	0f b6 44 10 5c       	movzbl 0x5c(%eax,%edx,1),%eax
80102289:	0f b6 c0             	movzbl %al,%eax
8010228c:	23 45 ec             	and    -0x14(%ebp),%eax
8010228f:	85 c0                	test   %eax,%eax
80102291:	75 0d                	jne    801022a0 <bfree+0x76>
80102293:	83 ec 0c             	sub    $0xc,%esp
80102296:	68 7e 8e 10 80       	push   $0x80108e7e
8010229b:	e8 43 ee ff ff       	call   801010e3 <panic>
    bp->data[bi / 8] &= ~m;
801022a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
801022a3:	8d 50 07             	lea    0x7(%eax),%edx
801022a6:	85 c0                	test   %eax,%eax
801022a8:	0f 48 c2             	cmovs  %edx,%eax
801022ab:	c1 f8 03             	sar    $0x3,%eax
801022ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
801022b1:	0f b6 54 02 5c       	movzbl 0x5c(%edx,%eax,1),%edx
801022b6:	89 d1                	mov    %edx,%ecx
801022b8:	8b 55 ec             	mov    -0x14(%ebp),%edx
801022bb:	f7 d2                	not    %edx
801022bd:	21 ca                	and    %ecx,%edx
801022bf:	89 d1                	mov    %edx,%ecx
801022c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
801022c4:	88 4c 02 5c          	mov    %cl,0x5c(%edx,%eax,1)
    log_write(bp);
801022c8:	83 ec 0c             	sub    $0xc,%esp
801022cb:	ff 75 f4             	push   -0xc(%ebp)
801022ce:	e8 96 26 00 00       	call   80104969 <log_write>
801022d3:	83 c4 10             	add    $0x10,%esp
    brelse(bp);
801022d6:	83 ec 0c             	sub    $0xc,%esp
801022d9:	ff 75 f4             	push   -0xc(%ebp)
801022dc:	e8 9e ea ff ff       	call   80100d7f <brelse>
801022e1:	83 c4 10             	add    $0x10,%esp
    // free_blocks++;
}
801022e4:	90                   	nop
801022e5:	c9                   	leave  
801022e6:	c3                   	ret    

801022e7 <iinit>:
struct {
    struct spinlock lock;
    struct inode inode[NINODE];
} icache;

void iinit(int dev) {
801022e7:	55                   	push   %ebp
801022e8:	89 e5                	mov    %esp,%ebp
801022ea:	57                   	push   %edi
801022eb:	56                   	push   %esi
801022ec:	53                   	push   %ebx
801022ed:	83 ec 2c             	sub    $0x2c,%esp
    int i = 0;
801022f0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    initlock(&icache.lock, "icache");
801022f7:	83 ec 08             	sub    $0x8,%esp
801022fa:	68 91 8e 10 80       	push   $0x80108e91
801022ff:	68 00 16 11 80       	push   $0x80111600
80102304:	e8 a8 3e 00 00       	call   801061b1 <initlock>
80102309:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < NINODE; i++) {
8010230c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
80102313:	eb 2d                	jmp    80102342 <iinit+0x5b>
        initsleeplock(&icache.inode[i].lock, "inode");
80102315:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80102318:	89 d0                	mov    %edx,%eax
8010231a:	c1 e0 03             	shl    $0x3,%eax
8010231d:	01 d0                	add    %edx,%eax
8010231f:	c1 e0 04             	shl    $0x4,%eax
80102322:	83 c0 30             	add    $0x30,%eax
80102325:	05 00 16 11 80       	add    $0x80111600,%eax
8010232a:	83 c0 10             	add    $0x10,%eax
8010232d:	83 ec 08             	sub    $0x8,%esp
80102330:	68 98 8e 10 80       	push   $0x80108e98
80102335:	50                   	push   %eax
80102336:	e8 0d 3d 00 00       	call   80106048 <initsleeplock>
8010233b:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < NINODE; i++) {
8010233e:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
80102342:	83 7d e4 31          	cmpl   $0x31,-0x1c(%ebp)
80102346:	7e cd                	jle    80102315 <iinit+0x2e>
    }

    readsb(dev, &sb);
80102348:	83 ec 08             	sub    $0x8,%esp
8010234b:	68 e0 15 11 80       	push   $0x801115e0
80102350:	ff 75 08             	push   0x8(%ebp)
80102353:	e8 16 fc ff ff       	call   80101f6e <readsb>
80102358:	83 c4 10             	add    $0x10,%esp
    cprintf(
8010235b:	a1 f8 15 11 80       	mov    0x801115f8,%eax
80102360:	89 45 d4             	mov    %eax,-0x2c(%ebp)
80102363:	8b 3d f4 15 11 80    	mov    0x801115f4,%edi
80102369:	8b 35 f0 15 11 80    	mov    0x801115f0,%esi
8010236f:	8b 1d ec 15 11 80    	mov    0x801115ec,%ebx
80102375:	8b 0d e8 15 11 80    	mov    0x801115e8,%ecx
8010237b:	8b 15 e4 15 11 80    	mov    0x801115e4,%edx
80102381:	a1 e0 15 11 80       	mov    0x801115e0,%eax
80102386:	ff 75 d4             	push   -0x2c(%ebp)
80102389:	57                   	push   %edi
8010238a:	56                   	push   %esi
8010238b:	53                   	push   %ebx
8010238c:	51                   	push   %ecx
8010238d:	52                   	push   %edx
8010238e:	50                   	push   %eax
8010238f:	68 a0 8e 10 80       	push   $0x80108ea0
80102394:	e8 95 eb ff ff       	call   80100f2e <cprintf>
80102399:	83 c4 20             	add    $0x20,%esp
        "sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
 inodestart %d bmap start %d\n",
        sb.size, sb.nblocks, sb.ninodes, sb.nlog, sb.logstart, sb.inodestart,
        sb.bmapstart);
}
8010239c:	90                   	nop
8010239d:	8d 65 f4             	lea    -0xc(%ebp),%esp
801023a0:	5b                   	pop    %ebx
801023a1:	5e                   	pop    %esi
801023a2:	5f                   	pop    %edi
801023a3:	5d                   	pop    %ebp
801023a4:	c3                   	ret    

801023a5 <ialloc>:

//PAGEBREAK!
// Allocate an inode on device dev.
// Mark it as allocated by  giving it type type.
// Returns an unlocked but allocated and referenced inode.
struct inode* ialloc(uint dev, short type) {
801023a5:	55                   	push   %ebp
801023a6:	89 e5                	mov    %esp,%ebp
801023a8:	83 ec 28             	sub    $0x28,%esp
801023ab:	8b 45 0c             	mov    0xc(%ebp),%eax
801023ae:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    int inum;
    struct buf* bp;
    struct dinode* dip;

    for (inum = 1; inum < sb.ninodes; inum++) {
801023b2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
801023b9:	e9 9e 00 00 00       	jmp    8010245c <ialloc+0xb7>
        bp = bread(dev, IBLOCK(inum, sb));
801023be:	8b 45 f4             	mov    -0xc(%ebp),%eax
801023c1:	c1 e8 03             	shr    $0x3,%eax
801023c4:	89 c2                	mov    %eax,%edx
801023c6:	a1 f4 15 11 80       	mov    0x801115f4,%eax
801023cb:	01 d0                	add    %edx,%eax
801023cd:	83 ec 08             	sub    $0x8,%esp
801023d0:	50                   	push   %eax
801023d1:	ff 75 08             	push   0x8(%ebp)
801023d4:	e8 a0 e8 ff ff       	call   80100c79 <bread>
801023d9:	83 c4 10             	add    $0x10,%esp
801023dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
        dip = (struct dinode*) bp->data + inum % IPB;
801023df:	8b 45 f0             	mov    -0x10(%ebp),%eax
801023e2:	8d 50 5c             	lea    0x5c(%eax),%edx
801023e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
801023e8:	83 e0 07             	and    $0x7,%eax
801023eb:	c1 e0 06             	shl    $0x6,%eax
801023ee:	01 d0                	add    %edx,%eax
801023f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (dip->type == 0) {  // a free inode
801023f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
801023f6:	0f b7 00             	movzwl (%eax),%eax
801023f9:	66 85 c0             	test   %ax,%ax
801023fc:	75 4c                	jne    8010244a <ialloc+0xa5>
            memset(dip, 0, sizeof(*dip));
801023fe:	83 ec 04             	sub    $0x4,%esp
80102401:	6a 40                	push   $0x40
80102403:	6a 00                	push   $0x0
80102405:	ff 75 ec             	push   -0x14(%ebp)
80102408:	e8 6a 40 00 00       	call   80106477 <memset>
8010240d:	83 c4 10             	add    $0x10,%esp
            dip->type = type;
80102410:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102413:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
80102417:	66 89 10             	mov    %dx,(%eax)
            log_write(bp);  // mark it allocated on the disk
8010241a:	83 ec 0c             	sub    $0xc,%esp
8010241d:	ff 75 f0             	push   -0x10(%ebp)
80102420:	e8 44 25 00 00       	call   80104969 <log_write>
80102425:	83 c4 10             	add    $0x10,%esp
            brelse(bp);
80102428:	83 ec 0c             	sub    $0xc,%esp
8010242b:	ff 75 f0             	push   -0x10(%ebp)
8010242e:	e8 4c e9 ff ff       	call   80100d7f <brelse>
80102433:	83 c4 10             	add    $0x10,%esp
            return iget(dev, inum);
80102436:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102439:	83 ec 08             	sub    $0x8,%esp
8010243c:	50                   	push   %eax
8010243d:	ff 75 08             	push   0x8(%ebp)
80102440:	e8 14 01 00 00       	call   80102559 <iget>
80102445:	83 c4 10             	add    $0x10,%esp
80102448:	eb 30                	jmp    8010247a <ialloc+0xd5>
        }
        brelse(bp);
8010244a:	83 ec 0c             	sub    $0xc,%esp
8010244d:	ff 75 f0             	push   -0x10(%ebp)
80102450:	e8 2a e9 ff ff       	call   80100d7f <brelse>
80102455:	83 c4 10             	add    $0x10,%esp
    for (inum = 1; inum < sb.ninodes; inum++) {
80102458:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8010245c:	8b 15 e8 15 11 80    	mov    0x801115e8,%edx
80102462:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102465:	39 c2                	cmp    %eax,%edx
80102467:	0f 87 51 ff ff ff    	ja     801023be <ialloc+0x19>
    }
    panic("ialloc: no inodes");
8010246d:	83 ec 0c             	sub    $0xc,%esp
80102470:	68 f3 8e 10 80       	push   $0x80108ef3
80102475:	e8 69 ec ff ff       	call   801010e3 <panic>
}
8010247a:	c9                   	leave  
8010247b:	c3                   	ret    

8010247c <iupdate>:

// Copy a modified in-memory inode to disk.
// Must be called after every change to an ip->xxx field
// that lives on disk, since i-node cache is write-through.
// Caller must hold ip->lock.
void iupdate(struct inode* ip) {
8010247c:	55                   	push   %ebp
8010247d:	89 e5                	mov    %esp,%ebp
8010247f:	83 ec 18             	sub    $0x18,%esp
    struct buf* bp;
    struct dinode* dip;

    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
80102482:	8b 45 08             	mov    0x8(%ebp),%eax
80102485:	8b 40 04             	mov    0x4(%eax),%eax
80102488:	c1 e8 03             	shr    $0x3,%eax
8010248b:	89 c2                	mov    %eax,%edx
8010248d:	a1 f4 15 11 80       	mov    0x801115f4,%eax
80102492:	01 c2                	add    %eax,%edx
80102494:	8b 45 08             	mov    0x8(%ebp),%eax
80102497:	8b 00                	mov    (%eax),%eax
80102499:	83 ec 08             	sub    $0x8,%esp
8010249c:	52                   	push   %edx
8010249d:	50                   	push   %eax
8010249e:	e8 d6 e7 ff ff       	call   80100c79 <bread>
801024a3:	83 c4 10             	add    $0x10,%esp
801024a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    dip = (struct dinode*) bp->data + ip->inum % IPB;
801024a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
801024ac:	8d 50 5c             	lea    0x5c(%eax),%edx
801024af:	8b 45 08             	mov    0x8(%ebp),%eax
801024b2:	8b 40 04             	mov    0x4(%eax),%eax
801024b5:	83 e0 07             	and    $0x7,%eax
801024b8:	c1 e0 06             	shl    $0x6,%eax
801024bb:	01 d0                	add    %edx,%eax
801024bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    dip->type = ip->type;
801024c0:	8b 45 08             	mov    0x8(%ebp),%eax
801024c3:	0f b7 50 50          	movzwl 0x50(%eax),%edx
801024c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
801024ca:	66 89 10             	mov    %dx,(%eax)
    dip->major = ip->major;
801024cd:	8b 45 08             	mov    0x8(%ebp),%eax
801024d0:	0f b7 50 52          	movzwl 0x52(%eax),%edx
801024d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
801024d7:	66 89 50 02          	mov    %dx,0x2(%eax)
    dip->minor = ip->minor;
801024db:	8b 45 08             	mov    0x8(%ebp),%eax
801024de:	0f b7 50 54          	movzwl 0x54(%eax),%edx
801024e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
801024e5:	66 89 50 04          	mov    %dx,0x4(%eax)
    dip->nlink = ip->nlink;
801024e9:	8b 45 08             	mov    0x8(%ebp),%eax
801024ec:	0f b7 50 56          	movzwl 0x56(%eax),%edx
801024f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
801024f3:	66 89 50 06          	mov    %dx,0x6(%eax)
    dip->size = ip->size;
801024f7:	8b 45 08             	mov    0x8(%ebp),%eax
801024fa:	8b 50 58             	mov    0x58(%eax),%edx
801024fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102500:	89 50 08             	mov    %edx,0x8(%eax)
    dip->owner = ip->owner;
80102503:	8b 45 08             	mov    0x8(%ebp),%eax
80102506:	0f b7 50 5c          	movzwl 0x5c(%eax),%edx
8010250a:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010250d:	66 89 50 0c          	mov    %dx,0xc(%eax)
    dip->perms = ip->perms;
80102511:	8b 45 08             	mov    0x8(%ebp),%eax
80102514:	0f b7 50 5e          	movzwl 0x5e(%eax),%edx
80102518:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010251b:	66 89 50 0e          	mov    %dx,0xe(%eax)
    memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
8010251f:	8b 45 08             	mov    0x8(%ebp),%eax
80102522:	8d 50 60             	lea    0x60(%eax),%edx
80102525:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102528:	83 c0 10             	add    $0x10,%eax
8010252b:	83 ec 04             	sub    $0x4,%esp
8010252e:	6a 30                	push   $0x30
80102530:	52                   	push   %edx
80102531:	50                   	push   %eax
80102532:	e8 ff 3f 00 00       	call   80106536 <memmove>
80102537:	83 c4 10             	add    $0x10,%esp
    log_write(bp);
8010253a:	83 ec 0c             	sub    $0xc,%esp
8010253d:	ff 75 f4             	push   -0xc(%ebp)
80102540:	e8 24 24 00 00       	call   80104969 <log_write>
80102545:	83 c4 10             	add    $0x10,%esp
    brelse(bp);
80102548:	83 ec 0c             	sub    $0xc,%esp
8010254b:	ff 75 f4             	push   -0xc(%ebp)
8010254e:	e8 2c e8 ff ff       	call   80100d7f <brelse>
80102553:	83 c4 10             	add    $0x10,%esp
}
80102556:	90                   	nop
80102557:	c9                   	leave  
80102558:	c3                   	ret    

80102559 <iget>:

// Find the inode with number inum on device dev
// and return the in-memory copy. Does not lock
// the inode and does not read it from disk.
static struct inode* iget(uint dev, uint inum) {
80102559:	55                   	push   %ebp
8010255a:	89 e5                	mov    %esp,%ebp
8010255c:	83 ec 18             	sub    $0x18,%esp
    struct inode *ip, *empty;

    acquire(&icache.lock);
8010255f:	83 ec 0c             	sub    $0xc,%esp
80102562:	68 00 16 11 80       	push   $0x80111600
80102567:	e8 76 3c 00 00       	call   801061e2 <acquire>
8010256c:	83 c4 10             	add    $0x10,%esp

    // Is the inode already cached?
    empty = 0;
8010256f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++) {
80102576:	c7 45 f4 34 16 11 80 	movl   $0x80111634,-0xc(%ebp)
8010257d:	eb 60                	jmp    801025df <iget+0x86>
        if (ip->ref > 0 && ip->dev == dev && ip->inum == inum) {
8010257f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102582:	8b 40 08             	mov    0x8(%eax),%eax
80102585:	85 c0                	test   %eax,%eax
80102587:	7e 39                	jle    801025c2 <iget+0x69>
80102589:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010258c:	8b 00                	mov    (%eax),%eax
8010258e:	39 45 08             	cmp    %eax,0x8(%ebp)
80102591:	75 2f                	jne    801025c2 <iget+0x69>
80102593:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102596:	8b 40 04             	mov    0x4(%eax),%eax
80102599:	39 45 0c             	cmp    %eax,0xc(%ebp)
8010259c:	75 24                	jne    801025c2 <iget+0x69>
            ip->ref++;
8010259e:	8b 45 f4             	mov    -0xc(%ebp),%eax
801025a1:	8b 40 08             	mov    0x8(%eax),%eax
801025a4:	8d 50 01             	lea    0x1(%eax),%edx
801025a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
801025aa:	89 50 08             	mov    %edx,0x8(%eax)
            release(&icache.lock);
801025ad:	83 ec 0c             	sub    $0xc,%esp
801025b0:	68 00 16 11 80       	push   $0x80111600
801025b5:	e8 9b 3c 00 00       	call   80106255 <release>
801025ba:	83 c4 10             	add    $0x10,%esp
            return ip;
801025bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
801025c0:	eb 77                	jmp    80102639 <iget+0xe0>
        }
        if (empty == 0 && ip->ref == 0)  // Remember empty slot.
801025c2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
801025c6:	75 10                	jne    801025d8 <iget+0x7f>
801025c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801025cb:	8b 40 08             	mov    0x8(%eax),%eax
801025ce:	85 c0                	test   %eax,%eax
801025d0:	75 06                	jne    801025d8 <iget+0x7f>
            empty = ip;
801025d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801025d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++) {
801025d8:	81 45 f4 90 00 00 00 	addl   $0x90,-0xc(%ebp)
801025df:	81 7d f4 54 32 11 80 	cmpl   $0x80113254,-0xc(%ebp)
801025e6:	72 97                	jb     8010257f <iget+0x26>
    }

    // Recycle an inode cache entry.
    if (empty == 0) panic("iget: no inodes");
801025e8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
801025ec:	75 0d                	jne    801025fb <iget+0xa2>
801025ee:	83 ec 0c             	sub    $0xc,%esp
801025f1:	68 05 8f 10 80       	push   $0x80108f05
801025f6:	e8 e8 ea ff ff       	call   801010e3 <panic>

    ip = empty;
801025fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
801025fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ip->dev = dev;
80102601:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102604:	8b 55 08             	mov    0x8(%ebp),%edx
80102607:	89 10                	mov    %edx,(%eax)
    ip->inum = inum;
80102609:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010260c:	8b 55 0c             	mov    0xc(%ebp),%edx
8010260f:	89 50 04             	mov    %edx,0x4(%eax)
    ip->ref = 1;
80102612:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102615:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    ip->valid = 0;
8010261c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010261f:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
    release(&icache.lock);
80102626:	83 ec 0c             	sub    $0xc,%esp
80102629:	68 00 16 11 80       	push   $0x80111600
8010262e:	e8 22 3c 00 00       	call   80106255 <release>
80102633:	83 c4 10             	add    $0x10,%esp

    return ip;
80102636:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
80102639:	c9                   	leave  
8010263a:	c3                   	ret    

8010263b <idup>:

// Increment reference count for ip.
// Returns ip to enable ip = idup(ip1) idiom.
struct inode* idup(struct inode* ip) {
8010263b:	55                   	push   %ebp
8010263c:	89 e5                	mov    %esp,%ebp
8010263e:	83 ec 08             	sub    $0x8,%esp
    acquire(&icache.lock);
80102641:	83 ec 0c             	sub    $0xc,%esp
80102644:	68 00 16 11 80       	push   $0x80111600
80102649:	e8 94 3b 00 00       	call   801061e2 <acquire>
8010264e:	83 c4 10             	add    $0x10,%esp
    ip->ref++;
80102651:	8b 45 08             	mov    0x8(%ebp),%eax
80102654:	8b 40 08             	mov    0x8(%eax),%eax
80102657:	8d 50 01             	lea    0x1(%eax),%edx
8010265a:	8b 45 08             	mov    0x8(%ebp),%eax
8010265d:	89 50 08             	mov    %edx,0x8(%eax)
    release(&icache.lock);
80102660:	83 ec 0c             	sub    $0xc,%esp
80102663:	68 00 16 11 80       	push   $0x80111600
80102668:	e8 e8 3b 00 00       	call   80106255 <release>
8010266d:	83 c4 10             	add    $0x10,%esp
    return ip;
80102670:	8b 45 08             	mov    0x8(%ebp),%eax
}
80102673:	c9                   	leave  
80102674:	c3                   	ret    

80102675 <ilock>:

// Lock the given inode.
// Reads the inode from disk if necessary.
void ilock(struct inode* ip) {
80102675:	55                   	push   %ebp
80102676:	89 e5                	mov    %esp,%ebp
80102678:	83 ec 18             	sub    $0x18,%esp
    struct buf* bp;
    struct dinode* dip;

    if (ip == 0 || ip->ref < 1) panic("ilock");
8010267b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
8010267f:	74 0a                	je     8010268b <ilock+0x16>
80102681:	8b 45 08             	mov    0x8(%ebp),%eax
80102684:	8b 40 08             	mov    0x8(%eax),%eax
80102687:	85 c0                	test   %eax,%eax
80102689:	7f 0d                	jg     80102698 <ilock+0x23>
8010268b:	83 ec 0c             	sub    $0xc,%esp
8010268e:	68 15 8f 10 80       	push   $0x80108f15
80102693:	e8 4b ea ff ff       	call   801010e3 <panic>

    acquiresleep(&ip->lock);
80102698:	8b 45 08             	mov    0x8(%ebp),%eax
8010269b:	83 c0 0c             	add    $0xc,%eax
8010269e:	83 ec 0c             	sub    $0xc,%esp
801026a1:	50                   	push   %eax
801026a2:	e8 dd 39 00 00       	call   80106084 <acquiresleep>
801026a7:	83 c4 10             	add    $0x10,%esp

    if (ip->valid == 0) {
801026aa:	8b 45 08             	mov    0x8(%ebp),%eax
801026ad:	8b 40 4c             	mov    0x4c(%eax),%eax
801026b0:	85 c0                	test   %eax,%eax
801026b2:	0f 85 e9 00 00 00    	jne    801027a1 <ilock+0x12c>
        bp = bread(ip->dev, IBLOCK(ip->inum, sb));
801026b8:	8b 45 08             	mov    0x8(%ebp),%eax
801026bb:	8b 40 04             	mov    0x4(%eax),%eax
801026be:	c1 e8 03             	shr    $0x3,%eax
801026c1:	89 c2                	mov    %eax,%edx
801026c3:	a1 f4 15 11 80       	mov    0x801115f4,%eax
801026c8:	01 c2                	add    %eax,%edx
801026ca:	8b 45 08             	mov    0x8(%ebp),%eax
801026cd:	8b 00                	mov    (%eax),%eax
801026cf:	83 ec 08             	sub    $0x8,%esp
801026d2:	52                   	push   %edx
801026d3:	50                   	push   %eax
801026d4:	e8 a0 e5 ff ff       	call   80100c79 <bread>
801026d9:	83 c4 10             	add    $0x10,%esp
801026dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
        dip = (struct dinode*) bp->data + ip->inum % IPB;
801026df:	8b 45 f4             	mov    -0xc(%ebp),%eax
801026e2:	8d 50 5c             	lea    0x5c(%eax),%edx
801026e5:	8b 45 08             	mov    0x8(%ebp),%eax
801026e8:	8b 40 04             	mov    0x4(%eax),%eax
801026eb:	83 e0 07             	and    $0x7,%eax
801026ee:	c1 e0 06             	shl    $0x6,%eax
801026f1:	01 d0                	add    %edx,%eax
801026f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ip->type = dip->type;
801026f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
801026f9:	0f b7 10             	movzwl (%eax),%edx
801026fc:	8b 45 08             	mov    0x8(%ebp),%eax
801026ff:	66 89 50 50          	mov    %dx,0x50(%eax)
        ip->major = dip->major;
80102703:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102706:	0f b7 50 02          	movzwl 0x2(%eax),%edx
8010270a:	8b 45 08             	mov    0x8(%ebp),%eax
8010270d:	66 89 50 52          	mov    %dx,0x52(%eax)
        ip->minor = dip->minor;
80102711:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102714:	0f b7 50 04          	movzwl 0x4(%eax),%edx
80102718:	8b 45 08             	mov    0x8(%ebp),%eax
8010271b:	66 89 50 54          	mov    %dx,0x54(%eax)
        ip->nlink = dip->nlink;
8010271f:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102722:	0f b7 50 06          	movzwl 0x6(%eax),%edx
80102726:	8b 45 08             	mov    0x8(%ebp),%eax
80102729:	66 89 50 56          	mov    %dx,0x56(%eax)
        ip->size = dip->size;
8010272d:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102730:	8b 50 08             	mov    0x8(%eax),%edx
80102733:	8b 45 08             	mov    0x8(%ebp),%eax
80102736:	89 50 58             	mov    %edx,0x58(%eax)
        ip->owner = dip->owner;  //lab4
80102739:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010273c:	0f b7 50 0c          	movzwl 0xc(%eax),%edx
80102740:	8b 45 08             	mov    0x8(%ebp),%eax
80102743:	66 89 50 5c          	mov    %dx,0x5c(%eax)
        ip->perms = dip->perms;
80102747:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010274a:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
8010274e:	8b 45 08             	mov    0x8(%ebp),%eax
80102751:	66 89 50 5e          	mov    %dx,0x5e(%eax)
        memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
80102755:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102758:	8d 50 10             	lea    0x10(%eax),%edx
8010275b:	8b 45 08             	mov    0x8(%ebp),%eax
8010275e:	83 c0 60             	add    $0x60,%eax
80102761:	83 ec 04             	sub    $0x4,%esp
80102764:	6a 30                	push   $0x30
80102766:	52                   	push   %edx
80102767:	50                   	push   %eax
80102768:	e8 c9 3d 00 00       	call   80106536 <memmove>
8010276d:	83 c4 10             	add    $0x10,%esp
        brelse(bp);
80102770:	83 ec 0c             	sub    $0xc,%esp
80102773:	ff 75 f4             	push   -0xc(%ebp)
80102776:	e8 04 e6 ff ff       	call   80100d7f <brelse>
8010277b:	83 c4 10             	add    $0x10,%esp
        ip->valid = 1;
8010277e:	8b 45 08             	mov    0x8(%ebp),%eax
80102781:	c7 40 4c 01 00 00 00 	movl   $0x1,0x4c(%eax)
        if (ip->type == 0) panic("ilock: no type");
80102788:	8b 45 08             	mov    0x8(%ebp),%eax
8010278b:	0f b7 40 50          	movzwl 0x50(%eax),%eax
8010278f:	66 85 c0             	test   %ax,%ax
80102792:	75 0d                	jne    801027a1 <ilock+0x12c>
80102794:	83 ec 0c             	sub    $0xc,%esp
80102797:	68 1b 8f 10 80       	push   $0x80108f1b
8010279c:	e8 42 e9 ff ff       	call   801010e3 <panic>
    }
}
801027a1:	90                   	nop
801027a2:	c9                   	leave  
801027a3:	c3                   	ret    

801027a4 <iunlock>:

// Unlock the given inode.
void iunlock(struct inode* ip) {
801027a4:	55                   	push   %ebp
801027a5:	89 e5                	mov    %esp,%ebp
801027a7:	83 ec 08             	sub    $0x8,%esp
    if (ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1) panic("iunlock");
801027aa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
801027ae:	74 20                	je     801027d0 <iunlock+0x2c>
801027b0:	8b 45 08             	mov    0x8(%ebp),%eax
801027b3:	83 c0 0c             	add    $0xc,%eax
801027b6:	83 ec 0c             	sub    $0xc,%esp
801027b9:	50                   	push   %eax
801027ba:	e8 77 39 00 00       	call   80106136 <holdingsleep>
801027bf:	83 c4 10             	add    $0x10,%esp
801027c2:	85 c0                	test   %eax,%eax
801027c4:	74 0a                	je     801027d0 <iunlock+0x2c>
801027c6:	8b 45 08             	mov    0x8(%ebp),%eax
801027c9:	8b 40 08             	mov    0x8(%eax),%eax
801027cc:	85 c0                	test   %eax,%eax
801027ce:	7f 0d                	jg     801027dd <iunlock+0x39>
801027d0:	83 ec 0c             	sub    $0xc,%esp
801027d3:	68 2a 8f 10 80       	push   $0x80108f2a
801027d8:	e8 06 e9 ff ff       	call   801010e3 <panic>

    releasesleep(&ip->lock);
801027dd:	8b 45 08             	mov    0x8(%ebp),%eax
801027e0:	83 c0 0c             	add    $0xc,%eax
801027e3:	83 ec 0c             	sub    $0xc,%esp
801027e6:	50                   	push   %eax
801027e7:	e8 fc 38 00 00       	call   801060e8 <releasesleep>
801027ec:	83 c4 10             	add    $0x10,%esp
}
801027ef:	90                   	nop
801027f0:	c9                   	leave  
801027f1:	c3                   	ret    

801027f2 <iput>:
// be recycled.
// If that was the last reference and the inode has no links
// to it, free the inode (and its content) on disk.
// All calls to iput() must be inside a transaction in
// case it has to free the inode.
void iput(struct inode* ip) {
801027f2:	55                   	push   %ebp
801027f3:	89 e5                	mov    %esp,%ebp
801027f5:	83 ec 18             	sub    $0x18,%esp
    acquiresleep(&ip->lock);
801027f8:	8b 45 08             	mov    0x8(%ebp),%eax
801027fb:	83 c0 0c             	add    $0xc,%eax
801027fe:	83 ec 0c             	sub    $0xc,%esp
80102801:	50                   	push   %eax
80102802:	e8 7d 38 00 00       	call   80106084 <acquiresleep>
80102807:	83 c4 10             	add    $0x10,%esp
    if (ip->valid && ip->nlink == 0) {
8010280a:	8b 45 08             	mov    0x8(%ebp),%eax
8010280d:	8b 40 4c             	mov    0x4c(%eax),%eax
80102810:	85 c0                	test   %eax,%eax
80102812:	74 6a                	je     8010287e <iput+0x8c>
80102814:	8b 45 08             	mov    0x8(%ebp),%eax
80102817:	0f b7 40 56          	movzwl 0x56(%eax),%eax
8010281b:	66 85 c0             	test   %ax,%ax
8010281e:	75 5e                	jne    8010287e <iput+0x8c>
        acquire(&icache.lock);
80102820:	83 ec 0c             	sub    $0xc,%esp
80102823:	68 00 16 11 80       	push   $0x80111600
80102828:	e8 b5 39 00 00       	call   801061e2 <acquire>
8010282d:	83 c4 10             	add    $0x10,%esp
        int r = ip->ref;
80102830:	8b 45 08             	mov    0x8(%ebp),%eax
80102833:	8b 40 08             	mov    0x8(%eax),%eax
80102836:	89 45 f4             	mov    %eax,-0xc(%ebp)
        release(&icache.lock);
80102839:	83 ec 0c             	sub    $0xc,%esp
8010283c:	68 00 16 11 80       	push   $0x80111600
80102841:	e8 0f 3a 00 00       	call   80106255 <release>
80102846:	83 c4 10             	add    $0x10,%esp
        if (r == 1) {
80102849:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
8010284d:	75 2f                	jne    8010287e <iput+0x8c>
            // inode has no links and no other references: truncate and free.
            itrunc(ip);
8010284f:	83 ec 0c             	sub    $0xc,%esp
80102852:	ff 75 08             	push   0x8(%ebp)
80102855:	e8 fe 02 00 00       	call   80102b58 <itrunc>
8010285a:	83 c4 10             	add    $0x10,%esp
            ip->type = 0;
8010285d:	8b 45 08             	mov    0x8(%ebp),%eax
80102860:	66 c7 40 50 00 00    	movw   $0x0,0x50(%eax)
            iupdate(ip);
80102866:	83 ec 0c             	sub    $0xc,%esp
80102869:	ff 75 08             	push   0x8(%ebp)
8010286c:	e8 0b fc ff ff       	call   8010247c <iupdate>
80102871:	83 c4 10             	add    $0x10,%esp
            ip->valid = 0;
80102874:	8b 45 08             	mov    0x8(%ebp),%eax
80102877:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
        }
    }
    releasesleep(&ip->lock);
8010287e:	8b 45 08             	mov    0x8(%ebp),%eax
80102881:	83 c0 0c             	add    $0xc,%eax
80102884:	83 ec 0c             	sub    $0xc,%esp
80102887:	50                   	push   %eax
80102888:	e8 5b 38 00 00       	call   801060e8 <releasesleep>
8010288d:	83 c4 10             	add    $0x10,%esp

    acquire(&icache.lock);
80102890:	83 ec 0c             	sub    $0xc,%esp
80102893:	68 00 16 11 80       	push   $0x80111600
80102898:	e8 45 39 00 00       	call   801061e2 <acquire>
8010289d:	83 c4 10             	add    $0x10,%esp
    ip->ref--;
801028a0:	8b 45 08             	mov    0x8(%ebp),%eax
801028a3:	8b 40 08             	mov    0x8(%eax),%eax
801028a6:	8d 50 ff             	lea    -0x1(%eax),%edx
801028a9:	8b 45 08             	mov    0x8(%ebp),%eax
801028ac:	89 50 08             	mov    %edx,0x8(%eax)
    release(&icache.lock);
801028af:	83 ec 0c             	sub    $0xc,%esp
801028b2:	68 00 16 11 80       	push   $0x80111600
801028b7:	e8 99 39 00 00       	call   80106255 <release>
801028bc:	83 c4 10             	add    $0x10,%esp
}
801028bf:	90                   	nop
801028c0:	c9                   	leave  
801028c1:	c3                   	ret    

801028c2 <iunlockput>:

// Common idiom: unlock, then put.
void iunlockput(struct inode* ip) {
801028c2:	55                   	push   %ebp
801028c3:	89 e5                	mov    %esp,%ebp
801028c5:	83 ec 08             	sub    $0x8,%esp
    iunlock(ip);
801028c8:	83 ec 0c             	sub    $0xc,%esp
801028cb:	ff 75 08             	push   0x8(%ebp)
801028ce:	e8 d1 fe ff ff       	call   801027a4 <iunlock>
801028d3:	83 c4 10             	add    $0x10,%esp
    iput(ip);
801028d6:	83 ec 0c             	sub    $0xc,%esp
801028d9:	ff 75 08             	push   0x8(%ebp)
801028dc:	e8 11 ff ff ff       	call   801027f2 <iput>
801028e1:	83 c4 10             	add    $0x10,%esp
}
801028e4:	90                   	nop
801028e5:	c9                   	leave  
801028e6:	c3                   	ret    

801028e7 <bmap>:
// are listed in ip->addrs[].  The next NINDIRECT blocks are
// listed in block ip->addrs[NDIRECT].

// Return the disk block address of the nth block in inode ip.
// If there is no such block, bmap allocates one.
static uint bmap(struct inode* ip, uint bn) {
801028e7:	55                   	push   %ebp
801028e8:	89 e5                	mov    %esp,%ebp
801028ea:	83 ec 18             	sub    $0x18,%esp
    uint addr, *a;
    struct buf* bp;
    struct buf* indirect;

    if (bn < NDIRECT) {
801028ed:	83 7d 0c 09          	cmpl   $0x9,0xc(%ebp)
801028f1:	77 40                	ja     80102933 <bmap+0x4c>
        if ((addr = ip->addrs[bn]) == 0) ip->addrs[bn] = addr = balloc(ip->dev);
801028f3:	8b 45 08             	mov    0x8(%ebp),%eax
801028f6:	8b 55 0c             	mov    0xc(%ebp),%edx
801028f9:	83 c2 18             	add    $0x18,%edx
801028fc:	8b 04 90             	mov    (%eax,%edx,4),%eax
801028ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
80102902:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80102906:	75 23                	jne    8010292b <bmap+0x44>
80102908:	8b 45 08             	mov    0x8(%ebp),%eax
8010290b:	8b 00                	mov    (%eax),%eax
8010290d:	83 ec 0c             	sub    $0xc,%esp
80102910:	50                   	push   %eax
80102911:	e8 ee f6 ff ff       	call   80102004 <balloc>
80102916:	83 c4 10             	add    $0x10,%esp
80102919:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010291c:	8b 45 08             	mov    0x8(%ebp),%eax
8010291f:	8b 55 0c             	mov    0xc(%ebp),%edx
80102922:	8d 4a 18             	lea    0x18(%edx),%ecx
80102925:	8b 55 f4             	mov    -0xc(%ebp),%edx
80102928:	89 14 88             	mov    %edx,(%eax,%ecx,4)
        return addr;
8010292b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010292e:	e9 23 02 00 00       	jmp    80102b56 <bmap+0x26f>
    }
    bn -= NDIRECT;
80102933:	83 6d 0c 0a          	subl   $0xa,0xc(%ebp)

    if (bn < NINDIRECT) {
80102937:	83 7d 0c 7f          	cmpl   $0x7f,0xc(%ebp)
8010293b:	0f 87 b8 00 00 00    	ja     801029f9 <bmap+0x112>
        // Load indirect block, allocating if necessary.
        if ((addr = ip->addrs[NDIRECT]) == 0)
80102941:	8b 45 08             	mov    0x8(%ebp),%eax
80102944:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
8010294a:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010294d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80102951:	75 20                	jne    80102973 <bmap+0x8c>
            ip->addrs[NDIRECT] = addr = balloc(ip->dev);
80102953:	8b 45 08             	mov    0x8(%ebp),%eax
80102956:	8b 00                	mov    (%eax),%eax
80102958:	83 ec 0c             	sub    $0xc,%esp
8010295b:	50                   	push   %eax
8010295c:	e8 a3 f6 ff ff       	call   80102004 <balloc>
80102961:	83 c4 10             	add    $0x10,%esp
80102964:	89 45 f4             	mov    %eax,-0xc(%ebp)
80102967:	8b 45 08             	mov    0x8(%ebp),%eax
8010296a:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010296d:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
        bp = bread(ip->dev, addr);
80102973:	8b 45 08             	mov    0x8(%ebp),%eax
80102976:	8b 00                	mov    (%eax),%eax
80102978:	83 ec 08             	sub    $0x8,%esp
8010297b:	ff 75 f4             	push   -0xc(%ebp)
8010297e:	50                   	push   %eax
8010297f:	e8 f5 e2 ff ff       	call   80100c79 <bread>
80102984:	83 c4 10             	add    $0x10,%esp
80102987:	89 45 f0             	mov    %eax,-0x10(%ebp)
        a = (uint*) bp->data;
8010298a:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010298d:	83 c0 5c             	add    $0x5c,%eax
80102990:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((addr = a[bn]) == 0) {
80102993:	8b 45 0c             	mov    0xc(%ebp),%eax
80102996:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
8010299d:	8b 45 ec             	mov    -0x14(%ebp),%eax
801029a0:	01 d0                	add    %edx,%eax
801029a2:	8b 00                	mov    (%eax),%eax
801029a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
801029a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801029ab:	75 36                	jne    801029e3 <bmap+0xfc>
            a[bn] = addr = balloc(ip->dev);
801029ad:	8b 45 08             	mov    0x8(%ebp),%eax
801029b0:	8b 00                	mov    (%eax),%eax
801029b2:	83 ec 0c             	sub    $0xc,%esp
801029b5:	50                   	push   %eax
801029b6:	e8 49 f6 ff ff       	call   80102004 <balloc>
801029bb:	83 c4 10             	add    $0x10,%esp
801029be:	89 45 f4             	mov    %eax,-0xc(%ebp)
801029c1:	8b 45 0c             	mov    0xc(%ebp),%eax
801029c4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
801029cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
801029ce:	01 c2                	add    %eax,%edx
801029d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
801029d3:	89 02                	mov    %eax,(%edx)
            log_write(bp);
801029d5:	83 ec 0c             	sub    $0xc,%esp
801029d8:	ff 75 f0             	push   -0x10(%ebp)
801029db:	e8 89 1f 00 00       	call   80104969 <log_write>
801029e0:	83 c4 10             	add    $0x10,%esp
        }
        brelse(bp);
801029e3:	83 ec 0c             	sub    $0xc,%esp
801029e6:	ff 75 f0             	push   -0x10(%ebp)
801029e9:	e8 91 e3 ff ff       	call   80100d7f <brelse>
801029ee:	83 c4 10             	add    $0x10,%esp
        return addr;
801029f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
801029f4:	e9 5d 01 00 00       	jmp    80102b56 <bmap+0x26f>
    }
    bn -= NINDIRECT;
801029f9:	83 45 0c 80          	addl   $0xffffff80,0xc(%ebp)
    // Lab 4 Change:
    if (bn < NDOUBLE_INDIRECT){
801029fd:	81 7d 0c ff 3f 00 00 	cmpl   $0x3fff,0xc(%ebp)
80102a04:	0f 87 3f 01 00 00    	ja     80102b49 <bmap+0x262>
        if ((addr = ip->addrs[NDIRECT+1]) == 0)
80102a0a:	8b 45 08             	mov    0x8(%ebp),%eax
80102a0d:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
80102a13:	89 45 f4             	mov    %eax,-0xc(%ebp)
80102a16:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80102a1a:	75 20                	jne    80102a3c <bmap+0x155>
            ip->addrs[NDIRECT + 1] = addr = balloc(ip->dev);
80102a1c:	8b 45 08             	mov    0x8(%ebp),%eax
80102a1f:	8b 00                	mov    (%eax),%eax
80102a21:	83 ec 0c             	sub    $0xc,%esp
80102a24:	50                   	push   %eax
80102a25:	e8 da f5 ff ff       	call   80102004 <balloc>
80102a2a:	83 c4 10             	add    $0x10,%esp
80102a2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
80102a30:	8b 45 08             	mov    0x8(%ebp),%eax
80102a33:	8b 55 f4             	mov    -0xc(%ebp),%edx
80102a36:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
        bp = bread(ip->dev, addr);
80102a3c:	8b 45 08             	mov    0x8(%ebp),%eax
80102a3f:	8b 00                	mov    (%eax),%eax
80102a41:	83 ec 08             	sub    $0x8,%esp
80102a44:	ff 75 f4             	push   -0xc(%ebp)
80102a47:	50                   	push   %eax
80102a48:	e8 2c e2 ff ff       	call   80100c79 <bread>
80102a4d:	83 c4 10             	add    $0x10,%esp
80102a50:	89 45 f0             	mov    %eax,-0x10(%ebp)
        a = (uint*)bp->data;
80102a53:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102a56:	83 c0 5c             	add    $0x5c,%eax
80102a59:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if ((addr = a[bn / NINDIRECT]) == 0) {
80102a5c:	8b 45 0c             	mov    0xc(%ebp),%eax
80102a5f:	c1 e8 07             	shr    $0x7,%eax
80102a62:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80102a69:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102a6c:	01 d0                	add    %edx,%eax
80102a6e:	8b 00                	mov    (%eax),%eax
80102a70:	89 45 f4             	mov    %eax,-0xc(%ebp)
80102a73:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80102a77:	75 39                	jne    80102ab2 <bmap+0x1cb>
            a[bn / NINDIRECT] = addr = balloc(ip->dev);
80102a79:	8b 45 08             	mov    0x8(%ebp),%eax
80102a7c:	8b 00                	mov    (%eax),%eax
80102a7e:	83 ec 0c             	sub    $0xc,%esp
80102a81:	50                   	push   %eax
80102a82:	e8 7d f5 ff ff       	call   80102004 <balloc>
80102a87:	83 c4 10             	add    $0x10,%esp
80102a8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
80102a8d:	8b 45 0c             	mov    0xc(%ebp),%eax
80102a90:	c1 e8 07             	shr    $0x7,%eax
80102a93:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80102a9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102a9d:	01 c2                	add    %eax,%edx
80102a9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102aa2:	89 02                	mov    %eax,(%edx)
            log_write(bp);
80102aa4:	83 ec 0c             	sub    $0xc,%esp
80102aa7:	ff 75 f0             	push   -0x10(%ebp)
80102aaa:	e8 ba 1e 00 00       	call   80104969 <log_write>
80102aaf:	83 c4 10             	add    $0x10,%esp
        }
        brelse(bp);
80102ab2:	83 ec 0c             	sub    $0xc,%esp
80102ab5:	ff 75 f0             	push   -0x10(%ebp)
80102ab8:	e8 c2 e2 ff ff       	call   80100d7f <brelse>
80102abd:	83 c4 10             	add    $0x10,%esp

        indirect = bread(ip->dev, addr);
80102ac0:	8b 45 08             	mov    0x8(%ebp),%eax
80102ac3:	8b 00                	mov    (%eax),%eax
80102ac5:	83 ec 08             	sub    $0x8,%esp
80102ac8:	ff 75 f4             	push   -0xc(%ebp)
80102acb:	50                   	push   %eax
80102acc:	e8 a8 e1 ff ff       	call   80100c79 <bread>
80102ad1:	83 c4 10             	add    $0x10,%esp
80102ad4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        a = (uint*)indirect->data;
80102ad7:	8b 45 e8             	mov    -0x18(%ebp),%eax
80102ada:	83 c0 5c             	add    $0x5c,%eax
80102add:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((addr = a[bn % NINDIRECT]) == 0) {
80102ae0:	8b 45 0c             	mov    0xc(%ebp),%eax
80102ae3:	83 e0 7f             	and    $0x7f,%eax
80102ae6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80102aed:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102af0:	01 d0                	add    %edx,%eax
80102af2:	8b 00                	mov    (%eax),%eax
80102af4:	89 45 f4             	mov    %eax,-0xc(%ebp)
80102af7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80102afb:	75 39                	jne    80102b36 <bmap+0x24f>
            a[bn % NINDIRECT] = addr = balloc(ip->dev);
80102afd:	8b 45 08             	mov    0x8(%ebp),%eax
80102b00:	8b 00                	mov    (%eax),%eax
80102b02:	83 ec 0c             	sub    $0xc,%esp
80102b05:	50                   	push   %eax
80102b06:	e8 f9 f4 ff ff       	call   80102004 <balloc>
80102b0b:	83 c4 10             	add    $0x10,%esp
80102b0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
80102b11:	8b 45 0c             	mov    0xc(%ebp),%eax
80102b14:	83 e0 7f             	and    $0x7f,%eax
80102b17:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80102b1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102b21:	01 c2                	add    %eax,%edx
80102b23:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102b26:	89 02                	mov    %eax,(%edx)
            log_write(indirect);
80102b28:	83 ec 0c             	sub    $0xc,%esp
80102b2b:	ff 75 e8             	push   -0x18(%ebp)
80102b2e:	e8 36 1e 00 00       	call   80104969 <log_write>
80102b33:	83 c4 10             	add    $0x10,%esp
        }
        brelse(indirect);
80102b36:	83 ec 0c             	sub    $0xc,%esp
80102b39:	ff 75 e8             	push   -0x18(%ebp)
80102b3c:	e8 3e e2 ff ff       	call   80100d7f <brelse>
80102b41:	83 c4 10             	add    $0x10,%esp
        return addr;
80102b44:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102b47:	eb 0d                	jmp    80102b56 <bmap+0x26f>
    }

    panic("bmap: out of range");
80102b49:	83 ec 0c             	sub    $0xc,%esp
80102b4c:	68 32 8f 10 80       	push   $0x80108f32
80102b51:	e8 8d e5 ff ff       	call   801010e3 <panic>
}
80102b56:	c9                   	leave  
80102b57:	c3                   	ret    

80102b58 <itrunc>:
// Truncate inode (discard contents).
// Only called when the inode has no links
// to it (no directory entries referring to it)
// and has no in-memory reference to it (is
// not an open file or current directory).
static void itrunc(struct inode* ip) {
80102b58:	55                   	push   %ebp
80102b59:	89 e5                	mov    %esp,%ebp
80102b5b:	83 ec 28             	sub    $0x28,%esp
    struct buf* bp;
    struct buf* indirect;
    uint* a;
    uint* b;

    for (i = 0; i < NDIRECT; i++) {
80102b5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80102b65:	eb 42                	jmp    80102ba9 <itrunc+0x51>
        if (ip->addrs[i]) {
80102b67:	8b 45 08             	mov    0x8(%ebp),%eax
80102b6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
80102b6d:	83 c2 18             	add    $0x18,%edx
80102b70:	8b 04 90             	mov    (%eax,%edx,4),%eax
80102b73:	85 c0                	test   %eax,%eax
80102b75:	74 2e                	je     80102ba5 <itrunc+0x4d>
            bfree(ip->dev, ip->addrs[i]);
80102b77:	8b 45 08             	mov    0x8(%ebp),%eax
80102b7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
80102b7d:	83 c2 18             	add    $0x18,%edx
80102b80:	8b 04 90             	mov    (%eax,%edx,4),%eax
80102b83:	8b 55 08             	mov    0x8(%ebp),%edx
80102b86:	8b 12                	mov    (%edx),%edx
80102b88:	83 ec 08             	sub    $0x8,%esp
80102b8b:	50                   	push   %eax
80102b8c:	52                   	push   %edx
80102b8d:	e8 98 f6 ff ff       	call   8010222a <bfree>
80102b92:	83 c4 10             	add    $0x10,%esp
            ip->addrs[i] = 0;
80102b95:	8b 45 08             	mov    0x8(%ebp),%eax
80102b98:	8b 55 f4             	mov    -0xc(%ebp),%edx
80102b9b:	83 c2 18             	add    $0x18,%edx
80102b9e:	c7 04 90 00 00 00 00 	movl   $0x0,(%eax,%edx,4)
    for (i = 0; i < NDIRECT; i++) {
80102ba5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80102ba9:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
80102bad:	7e b8                	jle    80102b67 <itrunc+0xf>
        }
    }

    if (ip->addrs[NDIRECT]) {
80102baf:	8b 45 08             	mov    0x8(%ebp),%eax
80102bb2:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
80102bb8:	85 c0                	test   %eax,%eax
80102bba:	0f 84 aa 00 00 00    	je     80102c6a <itrunc+0x112>
        bp = bread(ip->dev, ip->addrs[NDIRECT]);
80102bc0:	8b 45 08             	mov    0x8(%ebp),%eax
80102bc3:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
80102bc9:	8b 45 08             	mov    0x8(%ebp),%eax
80102bcc:	8b 00                	mov    (%eax),%eax
80102bce:	83 ec 08             	sub    $0x8,%esp
80102bd1:	52                   	push   %edx
80102bd2:	50                   	push   %eax
80102bd3:	e8 a1 e0 ff ff       	call   80100c79 <bread>
80102bd8:	83 c4 10             	add    $0x10,%esp
80102bdb:	89 45 ec             	mov    %eax,-0x14(%ebp)
        a = (uint*) bp->data;
80102bde:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102be1:	83 c0 5c             	add    $0x5c,%eax
80102be4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        for (j = 0; j < NINDIRECT; j++) {
80102be7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
80102bee:	eb 3c                	jmp    80102c2c <itrunc+0xd4>
            if (a[j]) bfree(ip->dev, a[j]);
80102bf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102bf3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80102bfa:	8b 45 e8             	mov    -0x18(%ebp),%eax
80102bfd:	01 d0                	add    %edx,%eax
80102bff:	8b 00                	mov    (%eax),%eax
80102c01:	85 c0                	test   %eax,%eax
80102c03:	74 23                	je     80102c28 <itrunc+0xd0>
80102c05:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102c08:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80102c0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
80102c12:	01 d0                	add    %edx,%eax
80102c14:	8b 00                	mov    (%eax),%eax
80102c16:	8b 55 08             	mov    0x8(%ebp),%edx
80102c19:	8b 12                	mov    (%edx),%edx
80102c1b:	83 ec 08             	sub    $0x8,%esp
80102c1e:	50                   	push   %eax
80102c1f:	52                   	push   %edx
80102c20:	e8 05 f6 ff ff       	call   8010222a <bfree>
80102c25:	83 c4 10             	add    $0x10,%esp
        for (j = 0; j < NINDIRECT; j++) {
80102c28:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
80102c2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102c2f:	83 f8 7f             	cmp    $0x7f,%eax
80102c32:	76 bc                	jbe    80102bf0 <itrunc+0x98>
        }
        brelse(bp);
80102c34:	83 ec 0c             	sub    $0xc,%esp
80102c37:	ff 75 ec             	push   -0x14(%ebp)
80102c3a:	e8 40 e1 ff ff       	call   80100d7f <brelse>
80102c3f:	83 c4 10             	add    $0x10,%esp
        bfree(ip->dev, ip->addrs[NDIRECT]);
80102c42:	8b 45 08             	mov    0x8(%ebp),%eax
80102c45:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
80102c4b:	8b 55 08             	mov    0x8(%ebp),%edx
80102c4e:	8b 12                	mov    (%edx),%edx
80102c50:	83 ec 08             	sub    $0x8,%esp
80102c53:	50                   	push   %eax
80102c54:	52                   	push   %edx
80102c55:	e8 d0 f5 ff ff       	call   8010222a <bfree>
80102c5a:	83 c4 10             	add    $0x10,%esp
        ip->addrs[NDIRECT] = 0;
80102c5d:	8b 45 08             	mov    0x8(%ebp),%eax
80102c60:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%eax)
80102c67:	00 00 00 
    }
    //Lab 4 Change
    if (ip->addrs[NDIRECT + 1]) {
80102c6a:	8b 45 08             	mov    0x8(%ebp),%eax
80102c6d:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
80102c73:	85 c0                	test   %eax,%eax
80102c75:	0f 84 3f 01 00 00    	je     80102dba <itrunc+0x262>
        bp = bread(ip->dev, ip->addrs[NDIRECT + 1]);
80102c7b:	8b 45 08             	mov    0x8(%ebp),%eax
80102c7e:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
80102c84:	8b 45 08             	mov    0x8(%ebp),%eax
80102c87:	8b 00                	mov    (%eax),%eax
80102c89:	83 ec 08             	sub    $0x8,%esp
80102c8c:	52                   	push   %edx
80102c8d:	50                   	push   %eax
80102c8e:	e8 e6 df ff ff       	call   80100c79 <bread>
80102c93:	83 c4 10             	add    $0x10,%esp
80102c96:	89 45 ec             	mov    %eax,-0x14(%ebp)
        a = (uint *)bp->data;
80102c99:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102c9c:	83 c0 5c             	add    $0x5c,%eax
80102c9f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        for (i = 0; i < NINDIRECT; i++) {
80102ca2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80102ca9:	e9 ca 00 00 00       	jmp    80102d78 <itrunc+0x220>
            if (a[i]) {
80102cae:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102cb1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80102cb8:	8b 45 e8             	mov    -0x18(%ebp),%eax
80102cbb:	01 d0                	add    %edx,%eax
80102cbd:	8b 00                	mov    (%eax),%eax
80102cbf:	85 c0                	test   %eax,%eax
80102cc1:	0f 84 ad 00 00 00    	je     80102d74 <itrunc+0x21c>
                indirect = bread(ip->dev, a[i]);
80102cc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102cca:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80102cd1:	8b 45 e8             	mov    -0x18(%ebp),%eax
80102cd4:	01 d0                	add    %edx,%eax
80102cd6:	8b 10                	mov    (%eax),%edx
80102cd8:	8b 45 08             	mov    0x8(%ebp),%eax
80102cdb:	8b 00                	mov    (%eax),%eax
80102cdd:	83 ec 08             	sub    $0x8,%esp
80102ce0:	52                   	push   %edx
80102ce1:	50                   	push   %eax
80102ce2:	e8 92 df ff ff       	call   80100c79 <bread>
80102ce7:	83 c4 10             	add    $0x10,%esp
80102cea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                b = (uint *)indirect->data;
80102ced:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80102cf0:	83 c0 5c             	add    $0x5c,%eax
80102cf3:	89 45 e0             	mov    %eax,-0x20(%ebp)
                for (j = 0; j < NINDIRECT; j++) {
80102cf6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
80102cfd:	eb 3c                	jmp    80102d3b <itrunc+0x1e3>
                    if (b[j]) {
80102cff:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102d02:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80102d09:	8b 45 e0             	mov    -0x20(%ebp),%eax
80102d0c:	01 d0                	add    %edx,%eax
80102d0e:	8b 00                	mov    (%eax),%eax
80102d10:	85 c0                	test   %eax,%eax
80102d12:	74 23                	je     80102d37 <itrunc+0x1df>
                        bfree(ip->dev, b[j]);
80102d14:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102d17:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80102d1e:	8b 45 e0             	mov    -0x20(%ebp),%eax
80102d21:	01 d0                	add    %edx,%eax
80102d23:	8b 00                	mov    (%eax),%eax
80102d25:	8b 55 08             	mov    0x8(%ebp),%edx
80102d28:	8b 12                	mov    (%edx),%edx
80102d2a:	83 ec 08             	sub    $0x8,%esp
80102d2d:	50                   	push   %eax
80102d2e:	52                   	push   %edx
80102d2f:	e8 f6 f4 ff ff       	call   8010222a <bfree>
80102d34:	83 c4 10             	add    $0x10,%esp
                for (j = 0; j < NINDIRECT; j++) {
80102d37:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
80102d3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102d3e:	83 f8 7f             	cmp    $0x7f,%eax
80102d41:	76 bc                	jbe    80102cff <itrunc+0x1a7>
                    }
                        
                }
                brelse(indirect);
80102d43:	83 ec 0c             	sub    $0xc,%esp
80102d46:	ff 75 e4             	push   -0x1c(%ebp)
80102d49:	e8 31 e0 ff ff       	call   80100d7f <brelse>
80102d4e:	83 c4 10             	add    $0x10,%esp
                bfree(ip->dev, a[i]);
80102d51:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102d54:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80102d5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
80102d5e:	01 d0                	add    %edx,%eax
80102d60:	8b 00                	mov    (%eax),%eax
80102d62:	8b 55 08             	mov    0x8(%ebp),%edx
80102d65:	8b 12                	mov    (%edx),%edx
80102d67:	83 ec 08             	sub    $0x8,%esp
80102d6a:	50                   	push   %eax
80102d6b:	52                   	push   %edx
80102d6c:	e8 b9 f4 ff ff       	call   8010222a <bfree>
80102d71:	83 c4 10             	add    $0x10,%esp
        for (i = 0; i < NINDIRECT; i++) {
80102d74:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80102d78:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102d7b:	83 f8 7f             	cmp    $0x7f,%eax
80102d7e:	0f 86 2a ff ff ff    	jbe    80102cae <itrunc+0x156>
            }
        }
        brelse(bp);
80102d84:	83 ec 0c             	sub    $0xc,%esp
80102d87:	ff 75 ec             	push   -0x14(%ebp)
80102d8a:	e8 f0 df ff ff       	call   80100d7f <brelse>
80102d8f:	83 c4 10             	add    $0x10,%esp
        bfree(ip->dev, ip->addrs[NDIRECT + 1]);
80102d92:	8b 45 08             	mov    0x8(%ebp),%eax
80102d95:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
80102d9b:	8b 55 08             	mov    0x8(%ebp),%edx
80102d9e:	8b 12                	mov    (%edx),%edx
80102da0:	83 ec 08             	sub    $0x8,%esp
80102da3:	50                   	push   %eax
80102da4:	52                   	push   %edx
80102da5:	e8 80 f4 ff ff       	call   8010222a <bfree>
80102daa:	83 c4 10             	add    $0x10,%esp
        ip->addrs[NDIRECT + 1] = 0;
80102dad:	8b 45 08             	mov    0x8(%ebp),%eax
80102db0:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%eax)
80102db7:	00 00 00 
    }
    ip->size = 0;
80102dba:	8b 45 08             	mov    0x8(%ebp),%eax
80102dbd:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)
    iupdate(ip);
80102dc4:	83 ec 0c             	sub    $0xc,%esp
80102dc7:	ff 75 08             	push   0x8(%ebp)
80102dca:	e8 ad f6 ff ff       	call   8010247c <iupdate>
80102dcf:	83 c4 10             	add    $0x10,%esp
}
80102dd2:	90                   	nop
80102dd3:	c9                   	leave  
80102dd4:	c3                   	ret    

80102dd5 <stati>:

// Copy stat information from inode.
// Caller must hold ip->lock.
void stati(struct inode* ip, struct stat* st) {
80102dd5:	55                   	push   %ebp
80102dd6:	89 e5                	mov    %esp,%ebp
    st->dev = ip->dev;
80102dd8:	8b 45 08             	mov    0x8(%ebp),%eax
80102ddb:	8b 00                	mov    (%eax),%eax
80102ddd:	89 c2                	mov    %eax,%edx
80102ddf:	8b 45 0c             	mov    0xc(%ebp),%eax
80102de2:	89 50 04             	mov    %edx,0x4(%eax)
    st->ino = ip->inum;
80102de5:	8b 45 08             	mov    0x8(%ebp),%eax
80102de8:	8b 50 04             	mov    0x4(%eax),%edx
80102deb:	8b 45 0c             	mov    0xc(%ebp),%eax
80102dee:	89 50 08             	mov    %edx,0x8(%eax)
    st->type = ip->type;
80102df1:	8b 45 08             	mov    0x8(%ebp),%eax
80102df4:	0f b7 50 50          	movzwl 0x50(%eax),%edx
80102df8:	8b 45 0c             	mov    0xc(%ebp),%eax
80102dfb:	66 89 10             	mov    %dx,(%eax)
    st->nlink = ip->nlink;
80102dfe:	8b 45 08             	mov    0x8(%ebp),%eax
80102e01:	0f b7 50 56          	movzwl 0x56(%eax),%edx
80102e05:	8b 45 0c             	mov    0xc(%ebp),%eax
80102e08:	66 89 50 0c          	mov    %dx,0xc(%eax)
    st->size = ip->size;
80102e0c:	8b 45 08             	mov    0x8(%ebp),%eax
80102e0f:	8b 50 58             	mov    0x58(%eax),%edx
80102e12:	8b 45 0c             	mov    0xc(%ebp),%eax
80102e15:	89 50 10             	mov    %edx,0x10(%eax)
}
80102e18:	90                   	nop
80102e19:	5d                   	pop    %ebp
80102e1a:	c3                   	ret    

80102e1b <readi>:

//PAGEBREAK!
// Read data from inode.
// Caller must hold ip->lock.
int readi(struct inode* ip, char* dst, uint off, uint n) {
80102e1b:	55                   	push   %ebp
80102e1c:	89 e5                	mov    %esp,%ebp
80102e1e:	83 ec 18             	sub    $0x18,%esp

    // if(!(ip->perms & PROT_R) && ip->owner != myproc()->uid && myproc()->uid != 0){
    //   return -1;
    // }

    if (ip->type == T_DEV) {
80102e21:	8b 45 08             	mov    0x8(%ebp),%eax
80102e24:	0f b7 40 50          	movzwl 0x50(%eax),%eax
80102e28:	66 83 f8 03          	cmp    $0x3,%ax
80102e2c:	75 5c                	jne    80102e8a <readi+0x6f>
        if (ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
80102e2e:	8b 45 08             	mov    0x8(%ebp),%eax
80102e31:	0f b7 40 52          	movzwl 0x52(%eax),%eax
80102e35:	66 85 c0             	test   %ax,%ax
80102e38:	78 20                	js     80102e5a <readi+0x3f>
80102e3a:	8b 45 08             	mov    0x8(%ebp),%eax
80102e3d:	0f b7 40 52          	movzwl 0x52(%eax),%eax
80102e41:	66 83 f8 09          	cmp    $0x9,%ax
80102e45:	7f 13                	jg     80102e5a <readi+0x3f>
80102e47:	8b 45 08             	mov    0x8(%ebp),%eax
80102e4a:	0f b7 40 52          	movzwl 0x52(%eax),%eax
80102e4e:	98                   	cwtl   
80102e4f:	8b 04 c5 e0 0b 11 80 	mov    -0x7feef420(,%eax,8),%eax
80102e56:	85 c0                	test   %eax,%eax
80102e58:	75 0a                	jne    80102e64 <readi+0x49>
            return -1;
80102e5a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80102e5f:	e9 0a 01 00 00       	jmp    80102f6e <readi+0x153>
        return devsw[ip->major].read(ip, dst, n);
80102e64:	8b 45 08             	mov    0x8(%ebp),%eax
80102e67:	0f b7 40 52          	movzwl 0x52(%eax),%eax
80102e6b:	98                   	cwtl   
80102e6c:	8b 04 c5 e0 0b 11 80 	mov    -0x7feef420(,%eax,8),%eax
80102e73:	8b 55 14             	mov    0x14(%ebp),%edx
80102e76:	83 ec 04             	sub    $0x4,%esp
80102e79:	52                   	push   %edx
80102e7a:	ff 75 0c             	push   0xc(%ebp)
80102e7d:	ff 75 08             	push   0x8(%ebp)
80102e80:	ff d0                	call   *%eax
80102e82:	83 c4 10             	add    $0x10,%esp
80102e85:	e9 e4 00 00 00       	jmp    80102f6e <readi+0x153>
    }

    if (off > ip->size || off + n < off) return -1;
80102e8a:	8b 45 08             	mov    0x8(%ebp),%eax
80102e8d:	8b 40 58             	mov    0x58(%eax),%eax
80102e90:	39 45 10             	cmp    %eax,0x10(%ebp)
80102e93:	77 0d                	ja     80102ea2 <readi+0x87>
80102e95:	8b 55 10             	mov    0x10(%ebp),%edx
80102e98:	8b 45 14             	mov    0x14(%ebp),%eax
80102e9b:	01 d0                	add    %edx,%eax
80102e9d:	39 45 10             	cmp    %eax,0x10(%ebp)
80102ea0:	76 0a                	jbe    80102eac <readi+0x91>
80102ea2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80102ea7:	e9 c2 00 00 00       	jmp    80102f6e <readi+0x153>
    if (off + n > ip->size) n = ip->size - off;
80102eac:	8b 55 10             	mov    0x10(%ebp),%edx
80102eaf:	8b 45 14             	mov    0x14(%ebp),%eax
80102eb2:	01 c2                	add    %eax,%edx
80102eb4:	8b 45 08             	mov    0x8(%ebp),%eax
80102eb7:	8b 40 58             	mov    0x58(%eax),%eax
80102eba:	39 c2                	cmp    %eax,%edx
80102ebc:	76 0c                	jbe    80102eca <readi+0xaf>
80102ebe:	8b 45 08             	mov    0x8(%ebp),%eax
80102ec1:	8b 40 58             	mov    0x58(%eax),%eax
80102ec4:	2b 45 10             	sub    0x10(%ebp),%eax
80102ec7:	89 45 14             	mov    %eax,0x14(%ebp)

    for (tot = 0; tot < n; tot += m, off += m, dst += m) {
80102eca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80102ed1:	e9 89 00 00 00       	jmp    80102f5f <readi+0x144>
        bp = bread(ip->dev, bmap(ip, off / BSIZE));
80102ed6:	8b 45 10             	mov    0x10(%ebp),%eax
80102ed9:	c1 e8 09             	shr    $0x9,%eax
80102edc:	83 ec 08             	sub    $0x8,%esp
80102edf:	50                   	push   %eax
80102ee0:	ff 75 08             	push   0x8(%ebp)
80102ee3:	e8 ff f9 ff ff       	call   801028e7 <bmap>
80102ee8:	83 c4 10             	add    $0x10,%esp
80102eeb:	8b 55 08             	mov    0x8(%ebp),%edx
80102eee:	8b 12                	mov    (%edx),%edx
80102ef0:	83 ec 08             	sub    $0x8,%esp
80102ef3:	50                   	push   %eax
80102ef4:	52                   	push   %edx
80102ef5:	e8 7f dd ff ff       	call   80100c79 <bread>
80102efa:	83 c4 10             	add    $0x10,%esp
80102efd:	89 45 f0             	mov    %eax,-0x10(%ebp)
        m = min(n - tot, BSIZE - off % BSIZE);
80102f00:	8b 45 10             	mov    0x10(%ebp),%eax
80102f03:	25 ff 01 00 00       	and    $0x1ff,%eax
80102f08:	ba 00 02 00 00       	mov    $0x200,%edx
80102f0d:	29 c2                	sub    %eax,%edx
80102f0f:	8b 45 14             	mov    0x14(%ebp),%eax
80102f12:	2b 45 f4             	sub    -0xc(%ebp),%eax
80102f15:	39 c2                	cmp    %eax,%edx
80102f17:	0f 46 c2             	cmovbe %edx,%eax
80102f1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memmove(dst, bp->data + off % BSIZE, m);
80102f1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
80102f20:	8d 50 5c             	lea    0x5c(%eax),%edx
80102f23:	8b 45 10             	mov    0x10(%ebp),%eax
80102f26:	25 ff 01 00 00       	and    $0x1ff,%eax
80102f2b:	01 d0                	add    %edx,%eax
80102f2d:	83 ec 04             	sub    $0x4,%esp
80102f30:	ff 75 ec             	push   -0x14(%ebp)
80102f33:	50                   	push   %eax
80102f34:	ff 75 0c             	push   0xc(%ebp)
80102f37:	e8 fa 35 00 00       	call   80106536 <memmove>
80102f3c:	83 c4 10             	add    $0x10,%esp
        brelse(bp);
80102f3f:	83 ec 0c             	sub    $0xc,%esp
80102f42:	ff 75 f0             	push   -0x10(%ebp)
80102f45:	e8 35 de ff ff       	call   80100d7f <brelse>
80102f4a:	83 c4 10             	add    $0x10,%esp
    for (tot = 0; tot < n; tot += m, off += m, dst += m) {
80102f4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102f50:	01 45 f4             	add    %eax,-0xc(%ebp)
80102f53:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102f56:	01 45 10             	add    %eax,0x10(%ebp)
80102f59:	8b 45 ec             	mov    -0x14(%ebp),%eax
80102f5c:	01 45 0c             	add    %eax,0xc(%ebp)
80102f5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80102f62:	3b 45 14             	cmp    0x14(%ebp),%eax
80102f65:	0f 82 6b ff ff ff    	jb     80102ed6 <readi+0xbb>
    }
    return n;
80102f6b:	8b 45 14             	mov    0x14(%ebp),%eax
}
80102f6e:	c9                   	leave  
80102f6f:	c3                   	ret    

80102f70 <writei>:

// PAGEBREAK!
// Write data to inode.
// Caller must hold ip->lock.
int writei(struct inode* ip, char* src, uint off, uint n) {
80102f70:	55                   	push   %ebp
80102f71:	89 e5                	mov    %esp,%ebp
80102f73:	83 ec 18             	sub    $0x18,%esp

    // if(!(ip->perms & PROT_W) && ip->owner != myproc()->uid && myproc()->uid != 0){
    //   return -1;
    // }

    if (ip->type == T_DEV) {
80102f76:	8b 45 08             	mov    0x8(%ebp),%eax
80102f79:	0f b7 40 50          	movzwl 0x50(%eax),%eax
80102f7d:	66 83 f8 03          	cmp    $0x3,%ax
80102f81:	75 5c                	jne    80102fdf <writei+0x6f>
        if (ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
80102f83:	8b 45 08             	mov    0x8(%ebp),%eax
80102f86:	0f b7 40 52          	movzwl 0x52(%eax),%eax
80102f8a:	66 85 c0             	test   %ax,%ax
80102f8d:	78 20                	js     80102faf <writei+0x3f>
80102f8f:	8b 45 08             	mov    0x8(%ebp),%eax
80102f92:	0f b7 40 52          	movzwl 0x52(%eax),%eax
80102f96:	66 83 f8 09          	cmp    $0x9,%ax
80102f9a:	7f 13                	jg     80102faf <writei+0x3f>
80102f9c:	8b 45 08             	mov    0x8(%ebp),%eax
80102f9f:	0f b7 40 52          	movzwl 0x52(%eax),%eax
80102fa3:	98                   	cwtl   
80102fa4:	8b 04 c5 e4 0b 11 80 	mov    -0x7feef41c(,%eax,8),%eax
80102fab:	85 c0                	test   %eax,%eax
80102fad:	75 0a                	jne    80102fb9 <writei+0x49>
            return -1;
80102faf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80102fb4:	e9 3b 01 00 00       	jmp    801030f4 <writei+0x184>
        return devsw[ip->major].write(ip, src, n);
80102fb9:	8b 45 08             	mov    0x8(%ebp),%eax
80102fbc:	0f b7 40 52          	movzwl 0x52(%eax),%eax
80102fc0:	98                   	cwtl   
80102fc1:	8b 04 c5 e4 0b 11 80 	mov    -0x7feef41c(,%eax,8),%eax
80102fc8:	8b 55 14             	mov    0x14(%ebp),%edx
80102fcb:	83 ec 04             	sub    $0x4,%esp
80102fce:	52                   	push   %edx
80102fcf:	ff 75 0c             	push   0xc(%ebp)
80102fd2:	ff 75 08             	push   0x8(%ebp)
80102fd5:	ff d0                	call   *%eax
80102fd7:	83 c4 10             	add    $0x10,%esp
80102fda:	e9 15 01 00 00       	jmp    801030f4 <writei+0x184>
    }

    if (off > ip->size || off + n < off) return -1;
80102fdf:	8b 45 08             	mov    0x8(%ebp),%eax
80102fe2:	8b 40 58             	mov    0x58(%eax),%eax
80102fe5:	39 45 10             	cmp    %eax,0x10(%ebp)
80102fe8:	77 0d                	ja     80102ff7 <writei+0x87>
80102fea:	8b 55 10             	mov    0x10(%ebp),%edx
80102fed:	8b 45 14             	mov    0x14(%ebp),%eax
80102ff0:	01 d0                	add    %edx,%eax
80102ff2:	39 45 10             	cmp    %eax,0x10(%ebp)
80102ff5:	76 0a                	jbe    80103001 <writei+0x91>
80102ff7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80102ffc:	e9 f3 00 00 00       	jmp    801030f4 <writei+0x184>
    if (off + n > MAXFILE * BSIZE) return -1;
80103001:	8b 55 10             	mov    0x10(%ebp),%edx
80103004:	8b 45 14             	mov    0x14(%ebp),%eax
80103007:	01 d0                	add    %edx,%eax
80103009:	3d 00 14 81 00       	cmp    $0x811400,%eax
8010300e:	76 0a                	jbe    8010301a <writei+0xaa>
80103010:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80103015:	e9 da 00 00 00       	jmp    801030f4 <writei+0x184>

    for (tot = 0; tot < n; tot += m, off += m, src += m) {
8010301a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80103021:	e9 97 00 00 00       	jmp    801030bd <writei+0x14d>
        bp = bread(ip->dev, bmap(ip, off / BSIZE));
80103026:	8b 45 10             	mov    0x10(%ebp),%eax
80103029:	c1 e8 09             	shr    $0x9,%eax
8010302c:	83 ec 08             	sub    $0x8,%esp
8010302f:	50                   	push   %eax
80103030:	ff 75 08             	push   0x8(%ebp)
80103033:	e8 af f8 ff ff       	call   801028e7 <bmap>
80103038:	83 c4 10             	add    $0x10,%esp
8010303b:	8b 55 08             	mov    0x8(%ebp),%edx
8010303e:	8b 12                	mov    (%edx),%edx
80103040:	83 ec 08             	sub    $0x8,%esp
80103043:	50                   	push   %eax
80103044:	52                   	push   %edx
80103045:	e8 2f dc ff ff       	call   80100c79 <bread>
8010304a:	83 c4 10             	add    $0x10,%esp
8010304d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        m = min(n - tot, BSIZE - off % BSIZE);
80103050:	8b 45 10             	mov    0x10(%ebp),%eax
80103053:	25 ff 01 00 00       	and    $0x1ff,%eax
80103058:	ba 00 02 00 00       	mov    $0x200,%edx
8010305d:	29 c2                	sub    %eax,%edx
8010305f:	8b 45 14             	mov    0x14(%ebp),%eax
80103062:	2b 45 f4             	sub    -0xc(%ebp),%eax
80103065:	39 c2                	cmp    %eax,%edx
80103067:	0f 46 c2             	cmovbe %edx,%eax
8010306a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memmove(bp->data + off % BSIZE, src, m);
8010306d:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103070:	8d 50 5c             	lea    0x5c(%eax),%edx
80103073:	8b 45 10             	mov    0x10(%ebp),%eax
80103076:	25 ff 01 00 00       	and    $0x1ff,%eax
8010307b:	01 d0                	add    %edx,%eax
8010307d:	83 ec 04             	sub    $0x4,%esp
80103080:	ff 75 ec             	push   -0x14(%ebp)
80103083:	ff 75 0c             	push   0xc(%ebp)
80103086:	50                   	push   %eax
80103087:	e8 aa 34 00 00       	call   80106536 <memmove>
8010308c:	83 c4 10             	add    $0x10,%esp
        log_write(bp);
8010308f:	83 ec 0c             	sub    $0xc,%esp
80103092:	ff 75 f0             	push   -0x10(%ebp)
80103095:	e8 cf 18 00 00       	call   80104969 <log_write>
8010309a:	83 c4 10             	add    $0x10,%esp
        brelse(bp);
8010309d:	83 ec 0c             	sub    $0xc,%esp
801030a0:	ff 75 f0             	push   -0x10(%ebp)
801030a3:	e8 d7 dc ff ff       	call   80100d7f <brelse>
801030a8:	83 c4 10             	add    $0x10,%esp
    for (tot = 0; tot < n; tot += m, off += m, src += m) {
801030ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
801030ae:	01 45 f4             	add    %eax,-0xc(%ebp)
801030b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
801030b4:	01 45 10             	add    %eax,0x10(%ebp)
801030b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
801030ba:	01 45 0c             	add    %eax,0xc(%ebp)
801030bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
801030c0:	3b 45 14             	cmp    0x14(%ebp),%eax
801030c3:	0f 82 5d ff ff ff    	jb     80103026 <writei+0xb6>
    }

    if (n > 0 && off > ip->size) {
801030c9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
801030cd:	74 22                	je     801030f1 <writei+0x181>
801030cf:	8b 45 08             	mov    0x8(%ebp),%eax
801030d2:	8b 40 58             	mov    0x58(%eax),%eax
801030d5:	39 45 10             	cmp    %eax,0x10(%ebp)
801030d8:	76 17                	jbe    801030f1 <writei+0x181>
        ip->size = off;
801030da:	8b 45 08             	mov    0x8(%ebp),%eax
801030dd:	8b 55 10             	mov    0x10(%ebp),%edx
801030e0:	89 50 58             	mov    %edx,0x58(%eax)
        iupdate(ip);
801030e3:	83 ec 0c             	sub    $0xc,%esp
801030e6:	ff 75 08             	push   0x8(%ebp)
801030e9:	e8 8e f3 ff ff       	call   8010247c <iupdate>
801030ee:	83 c4 10             	add    $0x10,%esp
    }
    return n;
801030f1:	8b 45 14             	mov    0x14(%ebp),%eax
}
801030f4:	c9                   	leave  
801030f5:	c3                   	ret    

801030f6 <namecmp>:

//PAGEBREAK!
// Directories

int namecmp(const char* s, const char* t) { return strncmp(s, t, DIRSIZ); }
801030f6:	55                   	push   %ebp
801030f7:	89 e5                	mov    %esp,%ebp
801030f9:	83 ec 08             	sub    $0x8,%esp
801030fc:	83 ec 04             	sub    $0x4,%esp
801030ff:	6a 0e                	push   $0xe
80103101:	ff 75 0c             	push   0xc(%ebp)
80103104:	ff 75 08             	push   0x8(%ebp)
80103107:	e8 c0 34 00 00       	call   801065cc <strncmp>
8010310c:	83 c4 10             	add    $0x10,%esp
8010310f:	c9                   	leave  
80103110:	c3                   	ret    

80103111 <dirlookup>:

// Look for a directory entry in a directory.
// If found, set *poff to byte offset of entry.
struct inode* dirlookup(struct inode* dp, char* name, uint* poff) {
80103111:	55                   	push   %ebp
80103112:	89 e5                	mov    %esp,%ebp
80103114:	83 ec 28             	sub    $0x28,%esp
    uint off, inum;
    struct dirent de;

    if (dp->type != T_DIR) panic("dirlookup not DIR");
80103117:	8b 45 08             	mov    0x8(%ebp),%eax
8010311a:	0f b7 40 50          	movzwl 0x50(%eax),%eax
8010311e:	66 83 f8 01          	cmp    $0x1,%ax
80103122:	74 0d                	je     80103131 <dirlookup+0x20>
80103124:	83 ec 0c             	sub    $0xc,%esp
80103127:	68 45 8f 10 80       	push   $0x80108f45
8010312c:	e8 b2 df ff ff       	call   801010e3 <panic>

    for (off = 0; off < dp->size; off += sizeof(de)) {
80103131:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80103138:	eb 7b                	jmp    801031b5 <dirlookup+0xa4>
        if (readi(dp, (char*) &de, off, sizeof(de)) != sizeof(de))
8010313a:	6a 10                	push   $0x10
8010313c:	ff 75 f4             	push   -0xc(%ebp)
8010313f:	8d 45 e0             	lea    -0x20(%ebp),%eax
80103142:	50                   	push   %eax
80103143:	ff 75 08             	push   0x8(%ebp)
80103146:	e8 d0 fc ff ff       	call   80102e1b <readi>
8010314b:	83 c4 10             	add    $0x10,%esp
8010314e:	83 f8 10             	cmp    $0x10,%eax
80103151:	74 0d                	je     80103160 <dirlookup+0x4f>
            panic("dirlookup read");
80103153:	83 ec 0c             	sub    $0xc,%esp
80103156:	68 57 8f 10 80       	push   $0x80108f57
8010315b:	e8 83 df ff ff       	call   801010e3 <panic>
        if (de.inum == 0) continue;
80103160:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
80103164:	66 85 c0             	test   %ax,%ax
80103167:	74 47                	je     801031b0 <dirlookup+0x9f>
        if (namecmp(name, de.name) == 0) {
80103169:	83 ec 08             	sub    $0x8,%esp
8010316c:	8d 45 e0             	lea    -0x20(%ebp),%eax
8010316f:	83 c0 02             	add    $0x2,%eax
80103172:	50                   	push   %eax
80103173:	ff 75 0c             	push   0xc(%ebp)
80103176:	e8 7b ff ff ff       	call   801030f6 <namecmp>
8010317b:	83 c4 10             	add    $0x10,%esp
8010317e:	85 c0                	test   %eax,%eax
80103180:	75 2f                	jne    801031b1 <dirlookup+0xa0>
            // entry matches path element
            if (poff) *poff = off;
80103182:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80103186:	74 08                	je     80103190 <dirlookup+0x7f>
80103188:	8b 45 10             	mov    0x10(%ebp),%eax
8010318b:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010318e:	89 10                	mov    %edx,(%eax)
            inum = de.inum;
80103190:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
80103194:	0f b7 c0             	movzwl %ax,%eax
80103197:	89 45 f0             	mov    %eax,-0x10(%ebp)
            return iget(dp->dev, inum);
8010319a:	8b 45 08             	mov    0x8(%ebp),%eax
8010319d:	8b 00                	mov    (%eax),%eax
8010319f:	83 ec 08             	sub    $0x8,%esp
801031a2:	ff 75 f0             	push   -0x10(%ebp)
801031a5:	50                   	push   %eax
801031a6:	e8 ae f3 ff ff       	call   80102559 <iget>
801031ab:	83 c4 10             	add    $0x10,%esp
801031ae:	eb 19                	jmp    801031c9 <dirlookup+0xb8>
        if (de.inum == 0) continue;
801031b0:	90                   	nop
    for (off = 0; off < dp->size; off += sizeof(de)) {
801031b1:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
801031b5:	8b 45 08             	mov    0x8(%ebp),%eax
801031b8:	8b 40 58             	mov    0x58(%eax),%eax
801031bb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
801031be:	0f 82 76 ff ff ff    	jb     8010313a <dirlookup+0x29>
        }
    }

    return 0;
801031c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
801031c9:	c9                   	leave  
801031ca:	c3                   	ret    

801031cb <dirlink>:

// Write a new directory entry (name, inum) into the directory dp.
int dirlink(struct inode* dp, char* name, uint inum) {
801031cb:	55                   	push   %ebp
801031cc:	89 e5                	mov    %esp,%ebp
801031ce:	83 ec 28             	sub    $0x28,%esp
    int off;
    struct dirent de;
    struct inode* ip;

    // Check that name is not present.
    if ((ip = dirlookup(dp, name, 0)) != 0) {
801031d1:	83 ec 04             	sub    $0x4,%esp
801031d4:	6a 00                	push   $0x0
801031d6:	ff 75 0c             	push   0xc(%ebp)
801031d9:	ff 75 08             	push   0x8(%ebp)
801031dc:	e8 30 ff ff ff       	call   80103111 <dirlookup>
801031e1:	83 c4 10             	add    $0x10,%esp
801031e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
801031e7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
801031eb:	74 18                	je     80103205 <dirlink+0x3a>
        iput(ip);
801031ed:	83 ec 0c             	sub    $0xc,%esp
801031f0:	ff 75 f0             	push   -0x10(%ebp)
801031f3:	e8 fa f5 ff ff       	call   801027f2 <iput>
801031f8:	83 c4 10             	add    $0x10,%esp
        return -1;
801031fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80103200:	e9 9c 00 00 00       	jmp    801032a1 <dirlink+0xd6>
    }

    // Look for an empty dirent.
    for (off = 0; off < dp->size; off += sizeof(de)) {
80103205:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010320c:	eb 39                	jmp    80103247 <dirlink+0x7c>
        if (readi(dp, (char*) &de, off, sizeof(de)) != sizeof(de))
8010320e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103211:	6a 10                	push   $0x10
80103213:	50                   	push   %eax
80103214:	8d 45 e0             	lea    -0x20(%ebp),%eax
80103217:	50                   	push   %eax
80103218:	ff 75 08             	push   0x8(%ebp)
8010321b:	e8 fb fb ff ff       	call   80102e1b <readi>
80103220:	83 c4 10             	add    $0x10,%esp
80103223:	83 f8 10             	cmp    $0x10,%eax
80103226:	74 0d                	je     80103235 <dirlink+0x6a>
            panic("dirlink read");
80103228:	83 ec 0c             	sub    $0xc,%esp
8010322b:	68 66 8f 10 80       	push   $0x80108f66
80103230:	e8 ae de ff ff       	call   801010e3 <panic>
        if (de.inum == 0) break;
80103235:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
80103239:	66 85 c0             	test   %ax,%ax
8010323c:	74 18                	je     80103256 <dirlink+0x8b>
    for (off = 0; off < dp->size; off += sizeof(de)) {
8010323e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103241:	83 c0 10             	add    $0x10,%eax
80103244:	89 45 f4             	mov    %eax,-0xc(%ebp)
80103247:	8b 45 08             	mov    0x8(%ebp),%eax
8010324a:	8b 50 58             	mov    0x58(%eax),%edx
8010324d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103250:	39 c2                	cmp    %eax,%edx
80103252:	77 ba                	ja     8010320e <dirlink+0x43>
80103254:	eb 01                	jmp    80103257 <dirlink+0x8c>
        if (de.inum == 0) break;
80103256:	90                   	nop
    }

    strncpy(de.name, name, DIRSIZ);
80103257:	83 ec 04             	sub    $0x4,%esp
8010325a:	6a 0e                	push   $0xe
8010325c:	ff 75 0c             	push   0xc(%ebp)
8010325f:	8d 45 e0             	lea    -0x20(%ebp),%eax
80103262:	83 c0 02             	add    $0x2,%eax
80103265:	50                   	push   %eax
80103266:	e8 b7 33 00 00       	call   80106622 <strncpy>
8010326b:	83 c4 10             	add    $0x10,%esp
    de.inum = inum;
8010326e:	8b 45 10             	mov    0x10(%ebp),%eax
80103271:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
    if (writei(dp, (char*) &de, off, sizeof(de)) != sizeof(de))
80103275:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103278:	6a 10                	push   $0x10
8010327a:	50                   	push   %eax
8010327b:	8d 45 e0             	lea    -0x20(%ebp),%eax
8010327e:	50                   	push   %eax
8010327f:	ff 75 08             	push   0x8(%ebp)
80103282:	e8 e9 fc ff ff       	call   80102f70 <writei>
80103287:	83 c4 10             	add    $0x10,%esp
8010328a:	83 f8 10             	cmp    $0x10,%eax
8010328d:	74 0d                	je     8010329c <dirlink+0xd1>
        panic("dirlink");
8010328f:	83 ec 0c             	sub    $0xc,%esp
80103292:	68 73 8f 10 80       	push   $0x80108f73
80103297:	e8 47 de ff ff       	call   801010e3 <panic>

    return 0;
8010329c:	b8 00 00 00 00       	mov    $0x0,%eax
}
801032a1:	c9                   	leave  
801032a2:	c3                   	ret    

801032a3 <skipelem>:
//   skipelem("a/bb/c", name) = "bb/c", setting name = "a"
//   skipelem("///a//bb", name) = "bb", setting name = "a"
//   skipelem("a", name) = "", setting name = "a"
//   skipelem("", name) = skipelem("////", name) = 0
//
static char* skipelem(char* path, char* name) {
801032a3:	55                   	push   %ebp
801032a4:	89 e5                	mov    %esp,%ebp
801032a6:	83 ec 18             	sub    $0x18,%esp
    char* s;
    int len;

    while (*path == '/') path++;
801032a9:	eb 04                	jmp    801032af <skipelem+0xc>
801032ab:	83 45 08 01          	addl   $0x1,0x8(%ebp)
801032af:	8b 45 08             	mov    0x8(%ebp),%eax
801032b2:	0f b6 00             	movzbl (%eax),%eax
801032b5:	3c 2f                	cmp    $0x2f,%al
801032b7:	74 f2                	je     801032ab <skipelem+0x8>
    if (*path == 0) return 0;
801032b9:	8b 45 08             	mov    0x8(%ebp),%eax
801032bc:	0f b6 00             	movzbl (%eax),%eax
801032bf:	84 c0                	test   %al,%al
801032c1:	75 07                	jne    801032ca <skipelem+0x27>
801032c3:	b8 00 00 00 00       	mov    $0x0,%eax
801032c8:	eb 77                	jmp    80103341 <skipelem+0x9e>
    s = path;
801032ca:	8b 45 08             	mov    0x8(%ebp),%eax
801032cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*path != '/' && *path != 0) path++;
801032d0:	eb 04                	jmp    801032d6 <skipelem+0x33>
801032d2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
801032d6:	8b 45 08             	mov    0x8(%ebp),%eax
801032d9:	0f b6 00             	movzbl (%eax),%eax
801032dc:	3c 2f                	cmp    $0x2f,%al
801032de:	74 0a                	je     801032ea <skipelem+0x47>
801032e0:	8b 45 08             	mov    0x8(%ebp),%eax
801032e3:	0f b6 00             	movzbl (%eax),%eax
801032e6:	84 c0                	test   %al,%al
801032e8:	75 e8                	jne    801032d2 <skipelem+0x2f>
    len = path - s;
801032ea:	8b 45 08             	mov    0x8(%ebp),%eax
801032ed:	2b 45 f4             	sub    -0xc(%ebp),%eax
801032f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (len >= DIRSIZ)
801032f3:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
801032f7:	7e 15                	jle    8010330e <skipelem+0x6b>
        memmove(name, s, DIRSIZ);
801032f9:	83 ec 04             	sub    $0x4,%esp
801032fc:	6a 0e                	push   $0xe
801032fe:	ff 75 f4             	push   -0xc(%ebp)
80103301:	ff 75 0c             	push   0xc(%ebp)
80103304:	e8 2d 32 00 00       	call   80106536 <memmove>
80103309:	83 c4 10             	add    $0x10,%esp
8010330c:	eb 26                	jmp    80103334 <skipelem+0x91>
    else {
        memmove(name, s, len);
8010330e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103311:	83 ec 04             	sub    $0x4,%esp
80103314:	50                   	push   %eax
80103315:	ff 75 f4             	push   -0xc(%ebp)
80103318:	ff 75 0c             	push   0xc(%ebp)
8010331b:	e8 16 32 00 00       	call   80106536 <memmove>
80103320:	83 c4 10             	add    $0x10,%esp
        name[len] = 0;
80103323:	8b 55 f0             	mov    -0x10(%ebp),%edx
80103326:	8b 45 0c             	mov    0xc(%ebp),%eax
80103329:	01 d0                	add    %edx,%eax
8010332b:	c6 00 00             	movb   $0x0,(%eax)
    }
    while (*path == '/') path++;
8010332e:	eb 04                	jmp    80103334 <skipelem+0x91>
80103330:	83 45 08 01          	addl   $0x1,0x8(%ebp)
80103334:	8b 45 08             	mov    0x8(%ebp),%eax
80103337:	0f b6 00             	movzbl (%eax),%eax
8010333a:	3c 2f                	cmp    $0x2f,%al
8010333c:	74 f2                	je     80103330 <skipelem+0x8d>
    return path;
8010333e:	8b 45 08             	mov    0x8(%ebp),%eax
}
80103341:	c9                   	leave  
80103342:	c3                   	ret    

80103343 <namex>:

// Look up and return the inode for a path name.
// If parent != 0, return the inode for the parent and copy the final
// path element into name, which must have room for DIRSIZ bytes.
// Must be called inside a transaction since it calls iput().
static struct inode* namex(char* path, int nameiparent, char* name) {
80103343:	55                   	push   %ebp
80103344:	89 e5                	mov    %esp,%ebp
80103346:	83 ec 18             	sub    $0x18,%esp
    struct inode *ip, *next;

    if (*path == '/')
80103349:	8b 45 08             	mov    0x8(%ebp),%eax
8010334c:	0f b6 00             	movzbl (%eax),%eax
8010334f:	3c 2f                	cmp    $0x2f,%al
80103351:	75 17                	jne    8010336a <namex+0x27>
        ip = iget(ROOTDEV, ROOTINO);
80103353:	83 ec 08             	sub    $0x8,%esp
80103356:	6a 01                	push   $0x1
80103358:	6a 01                	push   $0x1
8010335a:	e8 fa f1 ff ff       	call   80102559 <iget>
8010335f:	83 c4 10             	add    $0x10,%esp
80103362:	89 45 f4             	mov    %eax,-0xc(%ebp)
80103365:	e9 e6 00 00 00       	jmp    80103450 <namex+0x10d>
    else
        ip = idup(myproc()->cwd);
8010336a:	e8 22 21 00 00       	call   80105491 <myproc>
8010336f:	8b 40 68             	mov    0x68(%eax),%eax
80103372:	83 ec 0c             	sub    $0xc,%esp
80103375:	50                   	push   %eax
80103376:	e8 c0 f2 ff ff       	call   8010263b <idup>
8010337b:	83 c4 10             	add    $0x10,%esp
8010337e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while ((path = skipelem(path, name)) != 0) {
80103381:	e9 ca 00 00 00       	jmp    80103450 <namex+0x10d>
        ilock(ip);
80103386:	83 ec 0c             	sub    $0xc,%esp
80103389:	ff 75 f4             	push   -0xc(%ebp)
8010338c:	e8 e4 f2 ff ff       	call   80102675 <ilock>
80103391:	83 c4 10             	add    $0x10,%esp

        // cprintf("\n\n[namex] About to check access...\n");
        if (!can_access(ip, PROT_R)) {
80103394:	83 ec 08             	sub    $0x8,%esp
80103397:	6a 01                	push   $0x1
80103399:	ff 75 f4             	push   -0xc(%ebp)
8010339c:	e8 db 02 00 00       	call   8010367c <can_access>
801033a1:	83 c4 10             	add    $0x10,%esp
801033a4:	85 c0                	test   %eax,%eax
801033a6:	75 18                	jne    801033c0 <namex+0x7d>
            iunlockput(ip);
801033a8:	83 ec 0c             	sub    $0xc,%esp
801033ab:	ff 75 f4             	push   -0xc(%ebp)
801033ae:	e8 0f f5 ff ff       	call   801028c2 <iunlockput>
801033b3:	83 c4 10             	add    $0x10,%esp
            return 0;
801033b6:	b8 00 00 00 00       	mov    $0x0,%eax
801033bb:	e9 cc 00 00 00       	jmp    8010348c <namex+0x149>
        }

        if (ip->type != T_DIR) {
801033c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
801033c3:	0f b7 40 50          	movzwl 0x50(%eax),%eax
801033c7:	66 83 f8 01          	cmp    $0x1,%ax
801033cb:	74 18                	je     801033e5 <namex+0xa2>
            iunlockput(ip);
801033cd:	83 ec 0c             	sub    $0xc,%esp
801033d0:	ff 75 f4             	push   -0xc(%ebp)
801033d3:	e8 ea f4 ff ff       	call   801028c2 <iunlockput>
801033d8:	83 c4 10             	add    $0x10,%esp
            return 0;
801033db:	b8 00 00 00 00       	mov    $0x0,%eax
801033e0:	e9 a7 00 00 00       	jmp    8010348c <namex+0x149>
        }
        if (nameiparent && *path == '\0') {
801033e5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
801033e9:	74 20                	je     8010340b <namex+0xc8>
801033eb:	8b 45 08             	mov    0x8(%ebp),%eax
801033ee:	0f b6 00             	movzbl (%eax),%eax
801033f1:	84 c0                	test   %al,%al
801033f3:	75 16                	jne    8010340b <namex+0xc8>
            // Stop one level early.
            iunlock(ip);
801033f5:	83 ec 0c             	sub    $0xc,%esp
801033f8:	ff 75 f4             	push   -0xc(%ebp)
801033fb:	e8 a4 f3 ff ff       	call   801027a4 <iunlock>
80103400:	83 c4 10             	add    $0x10,%esp
            return ip;
80103403:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103406:	e9 81 00 00 00       	jmp    8010348c <namex+0x149>
        }
        if ((next = dirlookup(ip, name, 0)) == 0) {
8010340b:	83 ec 04             	sub    $0x4,%esp
8010340e:	6a 00                	push   $0x0
80103410:	ff 75 10             	push   0x10(%ebp)
80103413:	ff 75 f4             	push   -0xc(%ebp)
80103416:	e8 f6 fc ff ff       	call   80103111 <dirlookup>
8010341b:	83 c4 10             	add    $0x10,%esp
8010341e:	89 45 f0             	mov    %eax,-0x10(%ebp)
80103421:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80103425:	75 15                	jne    8010343c <namex+0xf9>
            iunlockput(ip);
80103427:	83 ec 0c             	sub    $0xc,%esp
8010342a:	ff 75 f4             	push   -0xc(%ebp)
8010342d:	e8 90 f4 ff ff       	call   801028c2 <iunlockput>
80103432:	83 c4 10             	add    $0x10,%esp
            return 0;
80103435:	b8 00 00 00 00       	mov    $0x0,%eax
8010343a:	eb 50                	jmp    8010348c <namex+0x149>
        }

        iunlockput(ip);
8010343c:	83 ec 0c             	sub    $0xc,%esp
8010343f:	ff 75 f4             	push   -0xc(%ebp)
80103442:	e8 7b f4 ff ff       	call   801028c2 <iunlockput>
80103447:	83 c4 10             	add    $0x10,%esp

        ip = next;
8010344a:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010344d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((path = skipelem(path, name)) != 0) {
80103450:	83 ec 08             	sub    $0x8,%esp
80103453:	ff 75 10             	push   0x10(%ebp)
80103456:	ff 75 08             	push   0x8(%ebp)
80103459:	e8 45 fe ff ff       	call   801032a3 <skipelem>
8010345e:	83 c4 10             	add    $0x10,%esp
80103461:	89 45 08             	mov    %eax,0x8(%ebp)
80103464:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80103468:	0f 85 18 ff ff ff    	jne    80103386 <namex+0x43>
    }

    if (nameiparent) {
8010346e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
80103472:	74 15                	je     80103489 <namex+0x146>
        iput(ip);
80103474:	83 ec 0c             	sub    $0xc,%esp
80103477:	ff 75 f4             	push   -0xc(%ebp)
8010347a:	e8 73 f3 ff ff       	call   801027f2 <iput>
8010347f:	83 c4 10             	add    $0x10,%esp
        return 0;
80103482:	b8 00 00 00 00       	mov    $0x0,%eax
80103487:	eb 03                	jmp    8010348c <namex+0x149>
    }
    return ip;
80103489:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
8010348c:	c9                   	leave  
8010348d:	c3                   	ret    

8010348e <namei>:

struct inode* namei(char* path) {
8010348e:	55                   	push   %ebp
8010348f:	89 e5                	mov    %esp,%ebp
80103491:	83 ec 18             	sub    $0x18,%esp
    char name[DIRSIZ];
    return namex(path, 0, name);
80103494:	83 ec 04             	sub    $0x4,%esp
80103497:	8d 45 ea             	lea    -0x16(%ebp),%eax
8010349a:	50                   	push   %eax
8010349b:	6a 00                	push   $0x0
8010349d:	ff 75 08             	push   0x8(%ebp)
801034a0:	e8 9e fe ff ff       	call   80103343 <namex>
801034a5:	83 c4 10             	add    $0x10,%esp
}
801034a8:	c9                   	leave  
801034a9:	c3                   	ret    

801034aa <nameiparent>:

struct inode* nameiparent(char* path, char* name) {
801034aa:	55                   	push   %ebp
801034ab:	89 e5                	mov    %esp,%ebp
801034ad:	83 ec 08             	sub    $0x8,%esp
    return namex(path, 1, name);
801034b0:	83 ec 04             	sub    $0x4,%esp
801034b3:	ff 75 0c             	push   0xc(%ebp)
801034b6:	6a 01                	push   $0x1
801034b8:	ff 75 08             	push   0x8(%ebp)
801034bb:	e8 83 fe ff ff       	call   80103343 <namex>
801034c0:	83 c4 10             	add    $0x10,%esp
}
801034c3:	c9                   	leave  
801034c4:	c3                   	ret    

801034c5 <chown>:

int chown(const char* filename, int uid) {
801034c5:	55                   	push   %ebp
801034c6:	89 e5                	mov    %esp,%ebp
801034c8:	83 ec 18             	sub    $0x18,%esp
    // cprintf("[chown] entry\n");
    if (uid < 0 || uid > 0xFFFF || !filename) {
801034cb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
801034cf:	78 0f                	js     801034e0 <chown+0x1b>
801034d1:	81 7d 0c ff ff 00 00 	cmpl   $0xffff,0xc(%ebp)
801034d8:	7f 06                	jg     801034e0 <chown+0x1b>
801034da:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
801034de:	75 0a                	jne    801034ea <chown+0x25>
        // cprintf("[chown] fail: illegal input\n");

        return -1;
801034e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801034e5:	e9 ab 00 00 00       	jmp    80103595 <chown+0xd0>
    }

    struct inode* ip;
    begin_op();
801034ea:	e8 41 12 00 00       	call   80104730 <begin_op>

    if ((ip = namei((char*) filename)) == 0) {
801034ef:	83 ec 0c             	sub    $0xc,%esp
801034f2:	ff 75 08             	push   0x8(%ebp)
801034f5:	e8 94 ff ff ff       	call   8010348e <namei>
801034fa:	83 c4 10             	add    $0x10,%esp
801034fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
80103500:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80103504:	75 0f                	jne    80103515 <chown+0x50>
        end_op();
80103506:	e8 b1 12 00 00       	call   801047bc <end_op>
        // cprintf("[chown] fail: namei failed (path not readable?)\n");
        return -1;
8010350b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80103510:	e9 80 00 00 00       	jmp    80103595 <chown+0xd0>
    }

    ilock(ip);
80103515:	83 ec 0c             	sub    $0xc,%esp
80103518:	ff 75 f4             	push   -0xc(%ebp)
8010351b:	e8 55 f1 ff ff       	call   80102675 <ilock>
80103520:	83 c4 10             	add    $0x10,%esp

    struct proc* p = myproc();
80103523:	e8 69 1f 00 00       	call   80105491 <myproc>
80103528:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(p->uid == ip->owner || p->uid == 0)) {
8010352b:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010352e:	8b 50 7c             	mov    0x7c(%eax),%edx
80103531:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103534:	0f b7 40 5c          	movzwl 0x5c(%eax),%eax
80103538:	0f b7 c0             	movzwl %ax,%eax
8010353b:	39 c2                	cmp    %eax,%edx
8010353d:	74 24                	je     80103563 <chown+0x9e>
8010353f:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103542:	8b 40 7c             	mov    0x7c(%eax),%eax
80103545:	85 c0                	test   %eax,%eax
80103547:	74 1a                	je     80103563 <chown+0x9e>
        iunlockput(ip);
80103549:	83 ec 0c             	sub    $0xc,%esp
8010354c:	ff 75 f4             	push   -0xc(%ebp)
8010354f:	e8 6e f3 ff ff       	call   801028c2 <iunlockput>
80103554:	83 c4 10             	add    $0x10,%esp
        end_op();
80103557:	e8 60 12 00 00       	call   801047bc <end_op>
        // cprintf("[chown] fail: not root or owner\n");

        return -1;
8010355c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80103561:	eb 32                	jmp    80103595 <chown+0xd0>
    }

    ip->owner = uid;
80103563:	8b 45 0c             	mov    0xc(%ebp),%eax
80103566:	89 c2                	mov    %eax,%edx
80103568:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010356b:	66 89 50 5c          	mov    %dx,0x5c(%eax)
    iupdate(ip);
8010356f:	83 ec 0c             	sub    $0xc,%esp
80103572:	ff 75 f4             	push   -0xc(%ebp)
80103575:	e8 02 ef ff ff       	call   8010247c <iupdate>
8010357a:	83 c4 10             	add    $0x10,%esp
    iunlock(ip);
8010357d:	83 ec 0c             	sub    $0xc,%esp
80103580:	ff 75 f4             	push   -0xc(%ebp)
80103583:	e8 1c f2 ff ff       	call   801027a4 <iunlock>
80103588:	83 c4 10             	add    $0x10,%esp
    end_op();
8010358b:	e8 2c 12 00 00       	call   801047bc <end_op>
    // cprintf("[chown] success; changed %s owner to %d\n", filename, uid);

    return 0;
80103590:	b8 00 00 00 00       	mov    $0x0,%eax
}
80103595:	c9                   	leave  
80103596:	c3                   	ret    

80103597 <chmod>:

int chmod(const char* filename, int perm) {
80103597:	55                   	push   %ebp
80103598:	89 e5                	mov    %esp,%ebp
8010359a:	83 ec 18             	sub    $0x18,%esp
    struct inode* ip;
    if (!(perm == 0 || perm == PROT_R || perm == PROT_W ||
8010359d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
801035a1:	74 1c                	je     801035bf <chmod+0x28>
801035a3:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
801035a7:	74 16                	je     801035bf <chmod+0x28>
801035a9:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
801035ad:	74 10                	je     801035bf <chmod+0x28>
801035af:	83 7d 0c 03          	cmpl   $0x3,0xc(%ebp)
801035b3:	74 0a                	je     801035bf <chmod+0x28>
          perm == (PROT_R | PROT_W)))
        return -1;
801035b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801035ba:	e9 bb 00 00 00       	jmp    8010367a <chmod+0xe3>
    if (!filename) return -1;
801035bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
801035c3:	75 0a                	jne    801035cf <chmod+0x38>
801035c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801035ca:	e9 ab 00 00 00       	jmp    8010367a <chmod+0xe3>

    begin_op();
801035cf:	e8 5c 11 00 00       	call   80104730 <begin_op>

    if ((ip = namei((char*) filename)) == 0) {
801035d4:	83 ec 0c             	sub    $0xc,%esp
801035d7:	ff 75 08             	push   0x8(%ebp)
801035da:	e8 af fe ff ff       	call   8010348e <namei>
801035df:	83 c4 10             	add    $0x10,%esp
801035e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
801035e5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801035e9:	75 0f                	jne    801035fa <chmod+0x63>
        end_op();
801035eb:	e8 cc 11 00 00       	call   801047bc <end_op>
        // cprintf("[chmod] no read permissions on file; namei failed\n");
        return -1;
801035f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801035f5:	e9 80 00 00 00       	jmp    8010367a <chmod+0xe3>
    }
    ilock(ip);
801035fa:	83 ec 0c             	sub    $0xc,%esp
801035fd:	ff 75 f4             	push   -0xc(%ebp)
80103600:	e8 70 f0 ff ff       	call   80102675 <ilock>
80103605:	83 c4 10             	add    $0x10,%esp

    struct proc* p = myproc();
80103608:	e8 84 1e 00 00       	call   80105491 <myproc>
8010360d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(p->uid == ip->owner || p->uid == 0)) {
80103610:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103613:	8b 50 7c             	mov    0x7c(%eax),%edx
80103616:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103619:	0f b7 40 5c          	movzwl 0x5c(%eax),%eax
8010361d:	0f b7 c0             	movzwl %ax,%eax
80103620:	39 c2                	cmp    %eax,%edx
80103622:	74 24                	je     80103648 <chmod+0xb1>
80103624:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103627:	8b 40 7c             	mov    0x7c(%eax),%eax
8010362a:	85 c0                	test   %eax,%eax
8010362c:	74 1a                	je     80103648 <chmod+0xb1>
        iunlockput(ip);
8010362e:	83 ec 0c             	sub    $0xc,%esp
80103631:	ff 75 f4             	push   -0xc(%ebp)
80103634:	e8 89 f2 ff ff       	call   801028c2 <iunlockput>
80103639:	83 c4 10             	add    $0x10,%esp
        end_op();
8010363c:	e8 7b 11 00 00       	call   801047bc <end_op>
        return -1;
80103641:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80103646:	eb 32                	jmp    8010367a <chmod+0xe3>
    }

    ip->perms = perm;
80103648:	8b 45 0c             	mov    0xc(%ebp),%eax
8010364b:	89 c2                	mov    %eax,%edx
8010364d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103650:	66 89 50 5e          	mov    %dx,0x5e(%eax)
    iupdate(ip);
80103654:	83 ec 0c             	sub    $0xc,%esp
80103657:	ff 75 f4             	push   -0xc(%ebp)
8010365a:	e8 1d ee ff ff       	call   8010247c <iupdate>
8010365f:	83 c4 10             	add    $0x10,%esp
    iunlock(ip);
80103662:	83 ec 0c             	sub    $0xc,%esp
80103665:	ff 75 f4             	push   -0xc(%ebp)
80103668:	e8 37 f1 ff ff       	call   801027a4 <iunlock>
8010366d:	83 c4 10             	add    $0x10,%esp
    end_op();
80103670:	e8 47 11 00 00       	call   801047bc <end_op>
    return 0;
80103675:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010367a:	c9                   	leave  
8010367b:	c3                   	ret    

8010367c <can_access>:

int can_access(struct inode* ip, ushort perm) {
8010367c:	55                   	push   %ebp
8010367d:	89 e5                	mov    %esp,%ebp
8010367f:	83 ec 28             	sub    $0x28,%esp
80103682:	8b 45 0c             	mov    0xc(%ebp),%eax
80103685:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    struct proc* p = myproc();
80103689:	e8 03 1e 00 00       	call   80105491 <myproc>
8010368e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (p == 0) {
80103691:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80103695:	75 07                	jne    8010369e <can_access+0x22>
        return 1;
80103697:	b8 01 00 00 00       	mov    $0x1,%eax
8010369c:	eb 42                	jmp    801036e0 <can_access+0x64>
    }

    if (ip->owner == p->uid || p->uid == 0) {
8010369e:	8b 45 08             	mov    0x8(%ebp),%eax
801036a1:	0f b7 40 5c          	movzwl 0x5c(%eax),%eax
801036a5:	0f b7 d0             	movzwl %ax,%edx
801036a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801036ab:	8b 40 7c             	mov    0x7c(%eax),%eax
801036ae:	39 c2                	cmp    %eax,%edx
801036b0:	74 0a                	je     801036bc <can_access+0x40>
801036b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801036b5:	8b 40 7c             	mov    0x7c(%eax),%eax
801036b8:	85 c0                	test   %eax,%eax
801036ba:	75 07                	jne    801036c3 <can_access+0x47>
        return 1;
801036bc:	b8 01 00 00 00       	mov    $0x1,%eax
801036c1:	eb 1d                	jmp    801036e0 <can_access+0x64>
    }

    // cprintf("[can_access] Current uid is %d but owner is %d\n", p->uid, ip->owner);

    if ((ip->perms & perm) == perm) {
801036c3:	8b 45 08             	mov    0x8(%ebp),%eax
801036c6:	0f b7 40 5e          	movzwl 0x5e(%eax),%eax
801036ca:	66 23 45 e4          	and    -0x1c(%ebp),%ax
801036ce:	66 39 45 e4          	cmp    %ax,-0x1c(%ebp)
801036d2:	75 07                	jne    801036db <can_access+0x5f>
        return 1;
801036d4:	b8 01 00 00 00       	mov    $0x1,%eax
801036d9:	eb 05                	jmp    801036e0 <can_access+0x64>
    }

    // cprintf("[can_access] Can not access...\n");

    return 0;
801036db:	b8 00 00 00 00       	mov    $0x0,%eax
801036e0:	c9                   	leave  
801036e1:	c3                   	ret    

801036e2 <inb>:
{
801036e2:	55                   	push   %ebp
801036e3:	89 e5                	mov    %esp,%ebp
801036e5:	83 ec 14             	sub    $0x14,%esp
801036e8:	8b 45 08             	mov    0x8(%ebp),%eax
801036eb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ volatile("in %1,%0" : "=a" (data) : "d" (port));
801036ef:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
801036f3:	89 c2                	mov    %eax,%edx
801036f5:	ec                   	in     (%dx),%al
801036f6:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
801036f9:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
801036fd:	c9                   	leave  
801036fe:	c3                   	ret    

801036ff <insl>:
{
801036ff:	55                   	push   %ebp
80103700:	89 e5                	mov    %esp,%ebp
80103702:	57                   	push   %edi
80103703:	53                   	push   %ebx
  __asm__ volatile("cld; rep insl" :
80103704:	8b 55 08             	mov    0x8(%ebp),%edx
80103707:	8b 4d 0c             	mov    0xc(%ebp),%ecx
8010370a:	8b 45 10             	mov    0x10(%ebp),%eax
8010370d:	89 cb                	mov    %ecx,%ebx
8010370f:	89 df                	mov    %ebx,%edi
80103711:	89 c1                	mov    %eax,%ecx
80103713:	fc                   	cld    
80103714:	f3 6d                	rep insl (%dx),%es:(%edi)
80103716:	89 c8                	mov    %ecx,%eax
80103718:	89 fb                	mov    %edi,%ebx
8010371a:	89 5d 0c             	mov    %ebx,0xc(%ebp)
8010371d:	89 45 10             	mov    %eax,0x10(%ebp)
}
80103720:	90                   	nop
80103721:	5b                   	pop    %ebx
80103722:	5f                   	pop    %edi
80103723:	5d                   	pop    %ebp
80103724:	c3                   	ret    

80103725 <outb>:
{
80103725:	55                   	push   %ebp
80103726:	89 e5                	mov    %esp,%ebp
80103728:	83 ec 08             	sub    $0x8,%esp
8010372b:	8b 45 08             	mov    0x8(%ebp),%eax
8010372e:	8b 55 0c             	mov    0xc(%ebp),%edx
80103731:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
80103735:	89 d0                	mov    %edx,%eax
80103737:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ volatile("out %0,%1" : : "a" (data), "d" (port));
8010373a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
8010373e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
80103742:	ee                   	out    %al,(%dx)
}
80103743:	90                   	nop
80103744:	c9                   	leave  
80103745:	c3                   	ret    

80103746 <outsl>:
{
80103746:	55                   	push   %ebp
80103747:	89 e5                	mov    %esp,%ebp
80103749:	56                   	push   %esi
8010374a:	53                   	push   %ebx
  __asm__ volatile("cld; rep outsl" :
8010374b:	8b 55 08             	mov    0x8(%ebp),%edx
8010374e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80103751:	8b 45 10             	mov    0x10(%ebp),%eax
80103754:	89 cb                	mov    %ecx,%ebx
80103756:	89 de                	mov    %ebx,%esi
80103758:	89 c1                	mov    %eax,%ecx
8010375a:	fc                   	cld    
8010375b:	f3 6f                	rep outsl %ds:(%esi),(%dx)
8010375d:	89 c8                	mov    %ecx,%eax
8010375f:	89 f3                	mov    %esi,%ebx
80103761:	89 5d 0c             	mov    %ebx,0xc(%ebp)
80103764:	89 45 10             	mov    %eax,0x10(%ebp)
}
80103767:	90                   	nop
80103768:	5b                   	pop    %ebx
80103769:	5e                   	pop    %esi
8010376a:	5d                   	pop    %ebp
8010376b:	c3                   	ret    

8010376c <idewait>:

static int havedisk1;
static void idestart(struct buf*);

// Wait for IDE disk to become ready.
static int idewait(int checkerr) {
8010376c:	55                   	push   %ebp
8010376d:	89 e5                	mov    %esp,%ebp
8010376f:	83 ec 10             	sub    $0x10,%esp
    int r;

    while (((r = inb(0x1f7)) & (IDE_BSY | IDE_DRDY)) != IDE_DRDY)
80103772:	90                   	nop
80103773:	68 f7 01 00 00       	push   $0x1f7
80103778:	e8 65 ff ff ff       	call   801036e2 <inb>
8010377d:	83 c4 04             	add    $0x4,%esp
80103780:	0f b6 c0             	movzbl %al,%eax
80103783:	89 45 fc             	mov    %eax,-0x4(%ebp)
80103786:	8b 45 fc             	mov    -0x4(%ebp),%eax
80103789:	25 c0 00 00 00       	and    $0xc0,%eax
8010378e:	83 f8 40             	cmp    $0x40,%eax
80103791:	75 e0                	jne    80103773 <idewait+0x7>
        ;
    if (checkerr && (r & (IDE_DF | IDE_ERR)) != 0) return -1;
80103793:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80103797:	74 11                	je     801037aa <idewait+0x3e>
80103799:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010379c:	83 e0 21             	and    $0x21,%eax
8010379f:	85 c0                	test   %eax,%eax
801037a1:	74 07                	je     801037aa <idewait+0x3e>
801037a3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801037a8:	eb 05                	jmp    801037af <idewait+0x43>
    return 0;
801037aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
801037af:	c9                   	leave  
801037b0:	c3                   	ret    

801037b1 <ideinit>:

void ideinit(void) {
801037b1:	55                   	push   %ebp
801037b2:	89 e5                	mov    %esp,%ebp
801037b4:	83 ec 18             	sub    $0x18,%esp
    int i;

    initlock(&idelock, "ide");
801037b7:	83 ec 08             	sub    $0x8,%esp
801037ba:	68 7b 8f 10 80       	push   $0x80108f7b
801037bf:	68 60 32 11 80       	push   $0x80113260
801037c4:	e8 e8 29 00 00       	call   801061b1 <initlock>
801037c9:	83 c4 10             	add    $0x10,%esp
    ioapicenable(IRQ_IDE, ncpu - 1);
801037cc:	a1 60 39 11 80       	mov    0x80113960,%eax
801037d1:	83 e8 01             	sub    $0x1,%eax
801037d4:	83 ec 08             	sub    $0x8,%esp
801037d7:	50                   	push   %eax
801037d8:	6a 0e                	push   $0xe
801037da:	e8 a3 04 00 00       	call   80103c82 <ioapicenable>
801037df:	83 c4 10             	add    $0x10,%esp
    idewait(0);
801037e2:	83 ec 0c             	sub    $0xc,%esp
801037e5:	6a 00                	push   $0x0
801037e7:	e8 80 ff ff ff       	call   8010376c <idewait>
801037ec:	83 c4 10             	add    $0x10,%esp

    // Check if disk 1 is present
    outb(0x1f6, 0xe0 | (1 << 4));
801037ef:	83 ec 08             	sub    $0x8,%esp
801037f2:	68 f0 00 00 00       	push   $0xf0
801037f7:	68 f6 01 00 00       	push   $0x1f6
801037fc:	e8 24 ff ff ff       	call   80103725 <outb>
80103801:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < 1000; i++) {
80103804:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010380b:	eb 24                	jmp    80103831 <ideinit+0x80>
        if (inb(0x1f7) != 0) {
8010380d:	83 ec 0c             	sub    $0xc,%esp
80103810:	68 f7 01 00 00       	push   $0x1f7
80103815:	e8 c8 fe ff ff       	call   801036e2 <inb>
8010381a:	83 c4 10             	add    $0x10,%esp
8010381d:	84 c0                	test   %al,%al
8010381f:	74 0c                	je     8010382d <ideinit+0x7c>
            havedisk1 = 1;
80103821:	c7 05 98 32 11 80 01 	movl   $0x1,0x80113298
80103828:	00 00 00 
            break;
8010382b:	eb 0d                	jmp    8010383a <ideinit+0x89>
    for (i = 0; i < 1000; i++) {
8010382d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80103831:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)
80103838:	7e d3                	jle    8010380d <ideinit+0x5c>
        }
    }

    // Switch back to disk 0.
    outb(0x1f6, 0xe0 | (0 << 4));
8010383a:	83 ec 08             	sub    $0x8,%esp
8010383d:	68 e0 00 00 00       	push   $0xe0
80103842:	68 f6 01 00 00       	push   $0x1f6
80103847:	e8 d9 fe ff ff       	call   80103725 <outb>
8010384c:	83 c4 10             	add    $0x10,%esp
}
8010384f:	90                   	nop
80103850:	c9                   	leave  
80103851:	c3                   	ret    

80103852 <idestart>:

// Start the request for b.  Caller must hold idelock.
static void idestart(struct buf* b) {
80103852:	55                   	push   %ebp
80103853:	89 e5                	mov    %esp,%ebp
80103855:	83 ec 18             	sub    $0x18,%esp
    if (b == 0) panic("idestart");
80103858:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
8010385c:	75 0d                	jne    8010386b <idestart+0x19>
8010385e:	83 ec 0c             	sub    $0xc,%esp
80103861:	68 7f 8f 10 80       	push   $0x80108f7f
80103866:	e8 78 d8 ff ff       	call   801010e3 <panic>
    if (b->blockno >= FSSIZE) panic("incorrect blockno");
8010386b:	8b 45 08             	mov    0x8(%ebp),%eax
8010386e:	8b 40 08             	mov    0x8(%eax),%eax
80103871:	3d 07 52 00 00       	cmp    $0x5207,%eax
80103876:	76 0d                	jbe    80103885 <idestart+0x33>
80103878:	83 ec 0c             	sub    $0xc,%esp
8010387b:	68 88 8f 10 80       	push   $0x80108f88
80103880:	e8 5e d8 ff ff       	call   801010e3 <panic>
    int sector_per_block = BSIZE / SECTOR_SIZE;
80103885:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    int sector = b->blockno * sector_per_block;
8010388c:	8b 45 08             	mov    0x8(%ebp),%eax
8010388f:	8b 50 08             	mov    0x8(%eax),%edx
80103892:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103895:	0f af c2             	imul   %edx,%eax
80103898:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int read_cmd = (sector_per_block == 1) ? IDE_CMD_READ : IDE_CMD_RDMUL;
8010389b:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
8010389f:	75 07                	jne    801038a8 <idestart+0x56>
801038a1:	b8 20 00 00 00       	mov    $0x20,%eax
801038a6:	eb 05                	jmp    801038ad <idestart+0x5b>
801038a8:	b8 c4 00 00 00       	mov    $0xc4,%eax
801038ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int write_cmd = (sector_per_block == 1) ? IDE_CMD_WRITE : IDE_CMD_WRMUL;
801038b0:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
801038b4:	75 07                	jne    801038bd <idestart+0x6b>
801038b6:	b8 30 00 00 00       	mov    $0x30,%eax
801038bb:	eb 05                	jmp    801038c2 <idestart+0x70>
801038bd:	b8 c5 00 00 00       	mov    $0xc5,%eax
801038c2:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (sector_per_block > 7) panic("idestart");
801038c5:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
801038c9:	7e 0d                	jle    801038d8 <idestart+0x86>
801038cb:	83 ec 0c             	sub    $0xc,%esp
801038ce:	68 7f 8f 10 80       	push   $0x80108f7f
801038d3:	e8 0b d8 ff ff       	call   801010e3 <panic>

    idewait(0);
801038d8:	83 ec 0c             	sub    $0xc,%esp
801038db:	6a 00                	push   $0x0
801038dd:	e8 8a fe ff ff       	call   8010376c <idewait>
801038e2:	83 c4 10             	add    $0x10,%esp
    outb(0x3f6, 0);                 // generate interrupt
801038e5:	83 ec 08             	sub    $0x8,%esp
801038e8:	6a 00                	push   $0x0
801038ea:	68 f6 03 00 00       	push   $0x3f6
801038ef:	e8 31 fe ff ff       	call   80103725 <outb>
801038f4:	83 c4 10             	add    $0x10,%esp
    outb(0x1f2, sector_per_block);  // number of sectors
801038f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
801038fa:	0f b6 c0             	movzbl %al,%eax
801038fd:	83 ec 08             	sub    $0x8,%esp
80103900:	50                   	push   %eax
80103901:	68 f2 01 00 00       	push   $0x1f2
80103906:	e8 1a fe ff ff       	call   80103725 <outb>
8010390b:	83 c4 10             	add    $0x10,%esp
    outb(0x1f3, sector & 0xff);
8010390e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103911:	0f b6 c0             	movzbl %al,%eax
80103914:	83 ec 08             	sub    $0x8,%esp
80103917:	50                   	push   %eax
80103918:	68 f3 01 00 00       	push   $0x1f3
8010391d:	e8 03 fe ff ff       	call   80103725 <outb>
80103922:	83 c4 10             	add    $0x10,%esp
    outb(0x1f4, (sector >> 8) & 0xff);
80103925:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103928:	c1 f8 08             	sar    $0x8,%eax
8010392b:	0f b6 c0             	movzbl %al,%eax
8010392e:	83 ec 08             	sub    $0x8,%esp
80103931:	50                   	push   %eax
80103932:	68 f4 01 00 00       	push   $0x1f4
80103937:	e8 e9 fd ff ff       	call   80103725 <outb>
8010393c:	83 c4 10             	add    $0x10,%esp
    outb(0x1f5, (sector >> 16) & 0xff);
8010393f:	8b 45 f0             	mov    -0x10(%ebp),%eax
80103942:	c1 f8 10             	sar    $0x10,%eax
80103945:	0f b6 c0             	movzbl %al,%eax
80103948:	83 ec 08             	sub    $0x8,%esp
8010394b:	50                   	push   %eax
8010394c:	68 f5 01 00 00       	push   $0x1f5
80103951:	e8 cf fd ff ff       	call   80103725 <outb>
80103956:	83 c4 10             	add    $0x10,%esp
    outb(0x1f6, 0xe0 | ((b->dev & 1) << 4) | ((sector >> 24) & 0x0f));
80103959:	8b 45 08             	mov    0x8(%ebp),%eax
8010395c:	8b 40 04             	mov    0x4(%eax),%eax
8010395f:	c1 e0 04             	shl    $0x4,%eax
80103962:	83 e0 10             	and    $0x10,%eax
80103965:	89 c2                	mov    %eax,%edx
80103967:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010396a:	c1 f8 18             	sar    $0x18,%eax
8010396d:	83 e0 0f             	and    $0xf,%eax
80103970:	09 d0                	or     %edx,%eax
80103972:	83 c8 e0             	or     $0xffffffe0,%eax
80103975:	0f b6 c0             	movzbl %al,%eax
80103978:	83 ec 08             	sub    $0x8,%esp
8010397b:	50                   	push   %eax
8010397c:	68 f6 01 00 00       	push   $0x1f6
80103981:	e8 9f fd ff ff       	call   80103725 <outb>
80103986:	83 c4 10             	add    $0x10,%esp
    if (b->flags & B_DIRTY) {
80103989:	8b 45 08             	mov    0x8(%ebp),%eax
8010398c:	8b 00                	mov    (%eax),%eax
8010398e:	83 e0 04             	and    $0x4,%eax
80103991:	85 c0                	test   %eax,%eax
80103993:	74 35                	je     801039ca <idestart+0x178>
        outb(0x1f7, write_cmd);
80103995:	8b 45 e8             	mov    -0x18(%ebp),%eax
80103998:	0f b6 c0             	movzbl %al,%eax
8010399b:	83 ec 08             	sub    $0x8,%esp
8010399e:	50                   	push   %eax
8010399f:	68 f7 01 00 00       	push   $0x1f7
801039a4:	e8 7c fd ff ff       	call   80103725 <outb>
801039a9:	83 c4 10             	add    $0x10,%esp
        outsl(0x1f0, b->data, BSIZE / 4);
801039ac:	8b 45 08             	mov    0x8(%ebp),%eax
801039af:	83 c0 5c             	add    $0x5c,%eax
801039b2:	83 ec 04             	sub    $0x4,%esp
801039b5:	68 80 00 00 00       	push   $0x80
801039ba:	50                   	push   %eax
801039bb:	68 f0 01 00 00       	push   $0x1f0
801039c0:	e8 81 fd ff ff       	call   80103746 <outsl>
801039c5:	83 c4 10             	add    $0x10,%esp
    } else {
        outb(0x1f7, read_cmd);
    }
}
801039c8:	eb 17                	jmp    801039e1 <idestart+0x18f>
        outb(0x1f7, read_cmd);
801039ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
801039cd:	0f b6 c0             	movzbl %al,%eax
801039d0:	83 ec 08             	sub    $0x8,%esp
801039d3:	50                   	push   %eax
801039d4:	68 f7 01 00 00       	push   $0x1f7
801039d9:	e8 47 fd ff ff       	call   80103725 <outb>
801039de:	83 c4 10             	add    $0x10,%esp
}
801039e1:	90                   	nop
801039e2:	c9                   	leave  
801039e3:	c3                   	ret    

801039e4 <ideintr>:

// Interrupt handler.
void ideintr(void) {
801039e4:	55                   	push   %ebp
801039e5:	89 e5                	mov    %esp,%ebp
801039e7:	83 ec 18             	sub    $0x18,%esp
    struct buf* b;

    // First queued buffer is the active request.
    acquire(&idelock);
801039ea:	83 ec 0c             	sub    $0xc,%esp
801039ed:	68 60 32 11 80       	push   $0x80113260
801039f2:	e8 eb 27 00 00       	call   801061e2 <acquire>
801039f7:	83 c4 10             	add    $0x10,%esp

    if ((b = idequeue) == 0) {
801039fa:	a1 94 32 11 80       	mov    0x80113294,%eax
801039ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
80103a02:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80103a06:	75 15                	jne    80103a1d <ideintr+0x39>
        release(&idelock);
80103a08:	83 ec 0c             	sub    $0xc,%esp
80103a0b:	68 60 32 11 80       	push   $0x80113260
80103a10:	e8 40 28 00 00       	call   80106255 <release>
80103a15:	83 c4 10             	add    $0x10,%esp
        return;
80103a18:	e9 9a 00 00 00       	jmp    80103ab7 <ideintr+0xd3>
    }
    idequeue = b->qnext;
80103a1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103a20:	8b 40 58             	mov    0x58(%eax),%eax
80103a23:	a3 94 32 11 80       	mov    %eax,0x80113294

    // Read data if needed.
    if (!(b->flags & B_DIRTY) && idewait(1) >= 0)
80103a28:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103a2b:	8b 00                	mov    (%eax),%eax
80103a2d:	83 e0 04             	and    $0x4,%eax
80103a30:	85 c0                	test   %eax,%eax
80103a32:	75 2d                	jne    80103a61 <ideintr+0x7d>
80103a34:	83 ec 0c             	sub    $0xc,%esp
80103a37:	6a 01                	push   $0x1
80103a39:	e8 2e fd ff ff       	call   8010376c <idewait>
80103a3e:	83 c4 10             	add    $0x10,%esp
80103a41:	85 c0                	test   %eax,%eax
80103a43:	78 1c                	js     80103a61 <ideintr+0x7d>
        insl(0x1f0, b->data, BSIZE / 4);
80103a45:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103a48:	83 c0 5c             	add    $0x5c,%eax
80103a4b:	83 ec 04             	sub    $0x4,%esp
80103a4e:	68 80 00 00 00       	push   $0x80
80103a53:	50                   	push   %eax
80103a54:	68 f0 01 00 00       	push   $0x1f0
80103a59:	e8 a1 fc ff ff       	call   801036ff <insl>
80103a5e:	83 c4 10             	add    $0x10,%esp

    // Wake process waiting for this buf.
    b->flags |= B_VALID;
80103a61:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103a64:	8b 00                	mov    (%eax),%eax
80103a66:	83 c8 02             	or     $0x2,%eax
80103a69:	89 c2                	mov    %eax,%edx
80103a6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103a6e:	89 10                	mov    %edx,(%eax)
    b->flags &= ~B_DIRTY;
80103a70:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103a73:	8b 00                	mov    (%eax),%eax
80103a75:	83 e0 fb             	and    $0xfffffffb,%eax
80103a78:	89 c2                	mov    %eax,%edx
80103a7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103a7d:	89 10                	mov    %edx,(%eax)
    wakeup(b);
80103a7f:	83 ec 0c             	sub    $0xc,%esp
80103a82:	ff 75 f4             	push   -0xc(%ebp)
80103a85:	e8 bb 23 00 00       	call   80105e45 <wakeup>
80103a8a:	83 c4 10             	add    $0x10,%esp

    // Start disk on next buf in queue.
    if (idequeue != 0) idestart(idequeue);
80103a8d:	a1 94 32 11 80       	mov    0x80113294,%eax
80103a92:	85 c0                	test   %eax,%eax
80103a94:	74 11                	je     80103aa7 <ideintr+0xc3>
80103a96:	a1 94 32 11 80       	mov    0x80113294,%eax
80103a9b:	83 ec 0c             	sub    $0xc,%esp
80103a9e:	50                   	push   %eax
80103a9f:	e8 ae fd ff ff       	call   80103852 <idestart>
80103aa4:	83 c4 10             	add    $0x10,%esp

    release(&idelock);
80103aa7:	83 ec 0c             	sub    $0xc,%esp
80103aaa:	68 60 32 11 80       	push   $0x80113260
80103aaf:	e8 a1 27 00 00       	call   80106255 <release>
80103ab4:	83 c4 10             	add    $0x10,%esp
}
80103ab7:	c9                   	leave  
80103ab8:	c3                   	ret    

80103ab9 <iderw>:

//PAGEBREAK!
// Sync buf with disk.
// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
// Else if B_VALID is not set, read buf from disk, set B_VALID.
void iderw(struct buf* b) {
80103ab9:	55                   	push   %ebp
80103aba:	89 e5                	mov    %esp,%ebp
80103abc:	83 ec 18             	sub    $0x18,%esp
    struct buf** pp;

    if (!holdingsleep(&b->lock)) panic("iderw: buf not locked");
80103abf:	8b 45 08             	mov    0x8(%ebp),%eax
80103ac2:	83 c0 0c             	add    $0xc,%eax
80103ac5:	83 ec 0c             	sub    $0xc,%esp
80103ac8:	50                   	push   %eax
80103ac9:	e8 68 26 00 00       	call   80106136 <holdingsleep>
80103ace:	83 c4 10             	add    $0x10,%esp
80103ad1:	85 c0                	test   %eax,%eax
80103ad3:	75 0d                	jne    80103ae2 <iderw+0x29>
80103ad5:	83 ec 0c             	sub    $0xc,%esp
80103ad8:	68 9a 8f 10 80       	push   $0x80108f9a
80103add:	e8 01 d6 ff ff       	call   801010e3 <panic>
    if ((b->flags & (B_VALID | B_DIRTY)) == B_VALID)
80103ae2:	8b 45 08             	mov    0x8(%ebp),%eax
80103ae5:	8b 00                	mov    (%eax),%eax
80103ae7:	83 e0 06             	and    $0x6,%eax
80103aea:	83 f8 02             	cmp    $0x2,%eax
80103aed:	75 0d                	jne    80103afc <iderw+0x43>
        panic("iderw: nothing to do");
80103aef:	83 ec 0c             	sub    $0xc,%esp
80103af2:	68 b0 8f 10 80       	push   $0x80108fb0
80103af7:	e8 e7 d5 ff ff       	call   801010e3 <panic>
    if (b->dev != 0 && !havedisk1) panic("iderw: ide disk 1 not present");
80103afc:	8b 45 08             	mov    0x8(%ebp),%eax
80103aff:	8b 40 04             	mov    0x4(%eax),%eax
80103b02:	85 c0                	test   %eax,%eax
80103b04:	74 16                	je     80103b1c <iderw+0x63>
80103b06:	a1 98 32 11 80       	mov    0x80113298,%eax
80103b0b:	85 c0                	test   %eax,%eax
80103b0d:	75 0d                	jne    80103b1c <iderw+0x63>
80103b0f:	83 ec 0c             	sub    $0xc,%esp
80103b12:	68 c5 8f 10 80       	push   $0x80108fc5
80103b17:	e8 c7 d5 ff ff       	call   801010e3 <panic>

    acquire(&idelock);  //DOC:acquire-lock
80103b1c:	83 ec 0c             	sub    $0xc,%esp
80103b1f:	68 60 32 11 80       	push   $0x80113260
80103b24:	e8 b9 26 00 00       	call   801061e2 <acquire>
80103b29:	83 c4 10             	add    $0x10,%esp

    // Append b to idequeue.
    b->qnext = 0;
80103b2c:	8b 45 08             	mov    0x8(%ebp),%eax
80103b2f:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)
    for (pp = &idequeue; *pp; pp = &(*pp)->qnext)  //DOC:insert-queue
80103b36:	c7 45 f4 94 32 11 80 	movl   $0x80113294,-0xc(%ebp)
80103b3d:	eb 0b                	jmp    80103b4a <iderw+0x91>
80103b3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103b42:	8b 00                	mov    (%eax),%eax
80103b44:	83 c0 58             	add    $0x58,%eax
80103b47:	89 45 f4             	mov    %eax,-0xc(%ebp)
80103b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103b4d:	8b 00                	mov    (%eax),%eax
80103b4f:	85 c0                	test   %eax,%eax
80103b51:	75 ec                	jne    80103b3f <iderw+0x86>
        ;
    *pp = b;
80103b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103b56:	8b 55 08             	mov    0x8(%ebp),%edx
80103b59:	89 10                	mov    %edx,(%eax)

    // Start disk if necessary.
    if (idequeue == b) idestart(b);
80103b5b:	a1 94 32 11 80       	mov    0x80113294,%eax
80103b60:	39 45 08             	cmp    %eax,0x8(%ebp)
80103b63:	75 23                	jne    80103b88 <iderw+0xcf>
80103b65:	83 ec 0c             	sub    $0xc,%esp
80103b68:	ff 75 08             	push   0x8(%ebp)
80103b6b:	e8 e2 fc ff ff       	call   80103852 <idestart>
80103b70:	83 c4 10             	add    $0x10,%esp

    // Wait for request to finish.
    while ((b->flags & (B_VALID | B_DIRTY)) != B_VALID) {
80103b73:	eb 13                	jmp    80103b88 <iderw+0xcf>
        sleep(b, &idelock);
80103b75:	83 ec 08             	sub    $0x8,%esp
80103b78:	68 60 32 11 80       	push   $0x80113260
80103b7d:	ff 75 08             	push   0x8(%ebp)
80103b80:	e8 d9 21 00 00       	call   80105d5e <sleep>
80103b85:	83 c4 10             	add    $0x10,%esp
    while ((b->flags & (B_VALID | B_DIRTY)) != B_VALID) {
80103b88:	8b 45 08             	mov    0x8(%ebp),%eax
80103b8b:	8b 00                	mov    (%eax),%eax
80103b8d:	83 e0 06             	and    $0x6,%eax
80103b90:	83 f8 02             	cmp    $0x2,%eax
80103b93:	75 e0                	jne    80103b75 <iderw+0xbc>
    }

    release(&idelock);
80103b95:	83 ec 0c             	sub    $0xc,%esp
80103b98:	68 60 32 11 80       	push   $0x80113260
80103b9d:	e8 b3 26 00 00       	call   80106255 <release>
80103ba2:	83 c4 10             	add    $0x10,%esp
}
80103ba5:	90                   	nop
80103ba6:	c9                   	leave  
80103ba7:	c3                   	ret    

80103ba8 <ioapicread>:
    uint reg;
    uint pad[3];
    uint data;
};

static uint ioapicread(int reg) {
80103ba8:	55                   	push   %ebp
80103ba9:	89 e5                	mov    %esp,%ebp
    ioapic->reg = reg;
80103bab:	a1 9c 32 11 80       	mov    0x8011329c,%eax
80103bb0:	8b 55 08             	mov    0x8(%ebp),%edx
80103bb3:	89 10                	mov    %edx,(%eax)
    return ioapic->data;
80103bb5:	a1 9c 32 11 80       	mov    0x8011329c,%eax
80103bba:	8b 40 10             	mov    0x10(%eax),%eax
}
80103bbd:	5d                   	pop    %ebp
80103bbe:	c3                   	ret    

80103bbf <ioapicwrite>:

static void ioapicwrite(int reg, uint data) {
80103bbf:	55                   	push   %ebp
80103bc0:	89 e5                	mov    %esp,%ebp
    ioapic->reg = reg;
80103bc2:	a1 9c 32 11 80       	mov    0x8011329c,%eax
80103bc7:	8b 55 08             	mov    0x8(%ebp),%edx
80103bca:	89 10                	mov    %edx,(%eax)
    ioapic->data = data;
80103bcc:	a1 9c 32 11 80       	mov    0x8011329c,%eax
80103bd1:	8b 55 0c             	mov    0xc(%ebp),%edx
80103bd4:	89 50 10             	mov    %edx,0x10(%eax)
}
80103bd7:	90                   	nop
80103bd8:	5d                   	pop    %ebp
80103bd9:	c3                   	ret    

80103bda <ioapicinit>:

void ioapicinit(void) {
80103bda:	55                   	push   %ebp
80103bdb:	89 e5                	mov    %esp,%ebp
80103bdd:	83 ec 18             	sub    $0x18,%esp
    int i, id, maxintr;

    ioapic = (volatile struct ioapic*) IOAPIC;
80103be0:	c7 05 9c 32 11 80 00 	movl   $0xfec00000,0x8011329c
80103be7:	00 c0 fe 
    maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
80103bea:	6a 01                	push   $0x1
80103bec:	e8 b7 ff ff ff       	call   80103ba8 <ioapicread>
80103bf1:	83 c4 04             	add    $0x4,%esp
80103bf4:	c1 e8 10             	shr    $0x10,%eax
80103bf7:	25 ff 00 00 00       	and    $0xff,%eax
80103bfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    id = ioapicread(REG_ID) >> 24;
80103bff:	6a 00                	push   $0x0
80103c01:	e8 a2 ff ff ff       	call   80103ba8 <ioapicread>
80103c06:	83 c4 04             	add    $0x4,%esp
80103c09:	c1 e8 18             	shr    $0x18,%eax
80103c0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (id != ioapicid)
80103c0f:	0f b6 05 64 39 11 80 	movzbl 0x80113964,%eax
80103c16:	0f b6 c0             	movzbl %al,%eax
80103c19:	39 45 ec             	cmp    %eax,-0x14(%ebp)
80103c1c:	74 10                	je     80103c2e <ioapicinit+0x54>
        cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
80103c1e:	83 ec 0c             	sub    $0xc,%esp
80103c21:	68 e4 8f 10 80       	push   $0x80108fe4
80103c26:	e8 03 d3 ff ff       	call   80100f2e <cprintf>
80103c2b:	83 c4 10             	add    $0x10,%esp

    // Mark all interrupts edge-triggered, active high, disabled,
    // and not routed to any CPUs.
    for (i = 0; i <= maxintr; i++) {
80103c2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80103c35:	eb 3f                	jmp    80103c76 <ioapicinit+0x9c>
        ioapicwrite(REG_TABLE + 2 * i, INT_DISABLED | (T_IRQ0 + i));
80103c37:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103c3a:	83 c0 20             	add    $0x20,%eax
80103c3d:	0d 00 00 01 00       	or     $0x10000,%eax
80103c42:	89 c2                	mov    %eax,%edx
80103c44:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103c47:	83 c0 08             	add    $0x8,%eax
80103c4a:	01 c0                	add    %eax,%eax
80103c4c:	83 ec 08             	sub    $0x8,%esp
80103c4f:	52                   	push   %edx
80103c50:	50                   	push   %eax
80103c51:	e8 69 ff ff ff       	call   80103bbf <ioapicwrite>
80103c56:	83 c4 10             	add    $0x10,%esp
        ioapicwrite(REG_TABLE + 2 * i + 1, 0);
80103c59:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103c5c:	83 c0 08             	add    $0x8,%eax
80103c5f:	01 c0                	add    %eax,%eax
80103c61:	83 c0 01             	add    $0x1,%eax
80103c64:	83 ec 08             	sub    $0x8,%esp
80103c67:	6a 00                	push   $0x0
80103c69:	50                   	push   %eax
80103c6a:	e8 50 ff ff ff       	call   80103bbf <ioapicwrite>
80103c6f:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i <= maxintr; i++) {
80103c72:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80103c76:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103c79:	3b 45 f0             	cmp    -0x10(%ebp),%eax
80103c7c:	7e b9                	jle    80103c37 <ioapicinit+0x5d>
    }
}
80103c7e:	90                   	nop
80103c7f:	90                   	nop
80103c80:	c9                   	leave  
80103c81:	c3                   	ret    

80103c82 <ioapicenable>:

void ioapicenable(int irq, int cpunum) {
80103c82:	55                   	push   %ebp
80103c83:	89 e5                	mov    %esp,%ebp
    // Mark interrupt edge-triggered, active high,
    // enabled, and routed to the given cpunum,
    // which happens to be that cpu's APIC ID.
    ioapicwrite(REG_TABLE + 2 * irq, T_IRQ0 + irq);
80103c85:	8b 45 08             	mov    0x8(%ebp),%eax
80103c88:	83 c0 20             	add    $0x20,%eax
80103c8b:	89 c2                	mov    %eax,%edx
80103c8d:	8b 45 08             	mov    0x8(%ebp),%eax
80103c90:	83 c0 08             	add    $0x8,%eax
80103c93:	01 c0                	add    %eax,%eax
80103c95:	52                   	push   %edx
80103c96:	50                   	push   %eax
80103c97:	e8 23 ff ff ff       	call   80103bbf <ioapicwrite>
80103c9c:	83 c4 08             	add    $0x8,%esp
    ioapicwrite(REG_TABLE + 2 * irq + 1, cpunum << 24);
80103c9f:	8b 45 0c             	mov    0xc(%ebp),%eax
80103ca2:	c1 e0 18             	shl    $0x18,%eax
80103ca5:	89 c2                	mov    %eax,%edx
80103ca7:	8b 45 08             	mov    0x8(%ebp),%eax
80103caa:	83 c0 08             	add    $0x8,%eax
80103cad:	01 c0                	add    %eax,%eax
80103caf:	83 c0 01             	add    $0x1,%eax
80103cb2:	52                   	push   %edx
80103cb3:	50                   	push   %eax
80103cb4:	e8 06 ff ff ff       	call   80103bbf <ioapicwrite>
80103cb9:	83 c4 08             	add    $0x8,%esp
}
80103cbc:	90                   	nop
80103cbd:	c9                   	leave  
80103cbe:	c3                   	ret    

80103cbf <kinit1>:
// Initialization happens in two phases.
// 1. main() calls kinit1() while still using entrypgdir to place just
// the pages mapped by entrypgdir on free list.
// 2. main() calls kinit2() with the rest of the physical pages
// after installing a full page table that maps them on all cores.
void kinit1(void* vstart, void* vend) {
80103cbf:	55                   	push   %ebp
80103cc0:	89 e5                	mov    %esp,%ebp
80103cc2:	83 ec 08             	sub    $0x8,%esp
    initlock(&kmem.lock, "kmem");
80103cc5:	83 ec 08             	sub    $0x8,%esp
80103cc8:	68 16 90 10 80       	push   $0x80109016
80103ccd:	68 a0 32 11 80       	push   $0x801132a0
80103cd2:	e8 da 24 00 00       	call   801061b1 <initlock>
80103cd7:	83 c4 10             	add    $0x10,%esp
    kmem.use_lock = 0;
80103cda:	c7 05 d4 32 11 80 00 	movl   $0x0,0x801132d4
80103ce1:	00 00 00 
    freerange(vstart, vend);
80103ce4:	83 ec 08             	sub    $0x8,%esp
80103ce7:	ff 75 0c             	push   0xc(%ebp)
80103cea:	ff 75 08             	push   0x8(%ebp)
80103ced:	e8 2a 00 00 00       	call   80103d1c <freerange>
80103cf2:	83 c4 10             	add    $0x10,%esp
}
80103cf5:	90                   	nop
80103cf6:	c9                   	leave  
80103cf7:	c3                   	ret    

80103cf8 <kinit2>:

void kinit2(void* vstart, void* vend) {
80103cf8:	55                   	push   %ebp
80103cf9:	89 e5                	mov    %esp,%ebp
80103cfb:	83 ec 08             	sub    $0x8,%esp
    freerange(vstart, vend);
80103cfe:	83 ec 08             	sub    $0x8,%esp
80103d01:	ff 75 0c             	push   0xc(%ebp)
80103d04:	ff 75 08             	push   0x8(%ebp)
80103d07:	e8 10 00 00 00       	call   80103d1c <freerange>
80103d0c:	83 c4 10             	add    $0x10,%esp
    kmem.use_lock = 1;
80103d0f:	c7 05 d4 32 11 80 01 	movl   $0x1,0x801132d4
80103d16:	00 00 00 
}
80103d19:	90                   	nop
80103d1a:	c9                   	leave  
80103d1b:	c3                   	ret    

80103d1c <freerange>:

void freerange(void* vstart, void* vend) {
80103d1c:	55                   	push   %ebp
80103d1d:	89 e5                	mov    %esp,%ebp
80103d1f:	83 ec 18             	sub    $0x18,%esp
    char* p;
    p = (char*) PGROUNDUP((uint) vstart);
80103d22:	8b 45 08             	mov    0x8(%ebp),%eax
80103d25:	05 ff 0f 00 00       	add    $0xfff,%eax
80103d2a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80103d2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p + PGSIZE <= (char*) vend; p += PGSIZE) kfree(p);
80103d32:	eb 15                	jmp    80103d49 <freerange+0x2d>
80103d34:	83 ec 0c             	sub    $0xc,%esp
80103d37:	ff 75 f4             	push   -0xc(%ebp)
80103d3a:	e8 1b 00 00 00       	call   80103d5a <kfree>
80103d3f:	83 c4 10             	add    $0x10,%esp
80103d42:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
80103d49:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103d4c:	05 00 10 00 00       	add    $0x1000,%eax
80103d51:	39 45 0c             	cmp    %eax,0xc(%ebp)
80103d54:	73 de                	jae    80103d34 <freerange+0x18>
}
80103d56:	90                   	nop
80103d57:	90                   	nop
80103d58:	c9                   	leave  
80103d59:	c3                   	ret    

80103d5a <kfree>:
//PAGEBREAK: 21
// Free the page of physical memory pointed at by v,
// which normally should have been returned by a
// call to kalloc().  (The exception is when
// initializing the allocator; see kinit above.)
void kfree(char* v) {
80103d5a:	55                   	push   %ebp
80103d5b:	89 e5                	mov    %esp,%ebp
80103d5d:	83 ec 18             	sub    $0x18,%esp
    struct run* r;

    if ((uint) v % PGSIZE || v < end || V2P(v) >= PHYSTOP) panic("kfree");
80103d60:	8b 45 08             	mov    0x8(%ebp),%eax
80103d63:	25 ff 0f 00 00       	and    $0xfff,%eax
80103d68:	85 c0                	test   %eax,%eax
80103d6a:	75 18                	jne    80103d84 <kfree+0x2a>
80103d6c:	81 7d 08 00 72 11 80 	cmpl   $0x80117200,0x8(%ebp)
80103d73:	72 0f                	jb     80103d84 <kfree+0x2a>
80103d75:	8b 45 08             	mov    0x8(%ebp),%eax
80103d78:	05 00 00 00 80       	add    $0x80000000,%eax
80103d7d:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
80103d82:	76 0d                	jbe    80103d91 <kfree+0x37>
80103d84:	83 ec 0c             	sub    $0xc,%esp
80103d87:	68 1b 90 10 80       	push   $0x8010901b
80103d8c:	e8 52 d3 ff ff       	call   801010e3 <panic>

    // Fill with junk to catch dangling refs.
    memset(v, 1, PGSIZE);
80103d91:	83 ec 04             	sub    $0x4,%esp
80103d94:	68 00 10 00 00       	push   $0x1000
80103d99:	6a 01                	push   $0x1
80103d9b:	ff 75 08             	push   0x8(%ebp)
80103d9e:	e8 d4 26 00 00       	call   80106477 <memset>
80103da3:	83 c4 10             	add    $0x10,%esp

    if (kmem.use_lock) acquire(&kmem.lock);
80103da6:	a1 d4 32 11 80       	mov    0x801132d4,%eax
80103dab:	85 c0                	test   %eax,%eax
80103dad:	74 10                	je     80103dbf <kfree+0x65>
80103daf:	83 ec 0c             	sub    $0xc,%esp
80103db2:	68 a0 32 11 80       	push   $0x801132a0
80103db7:	e8 26 24 00 00       	call   801061e2 <acquire>
80103dbc:	83 c4 10             	add    $0x10,%esp
    r = (struct run*) v;
80103dbf:	8b 45 08             	mov    0x8(%ebp),%eax
80103dc2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    r->next = kmem.freelist;
80103dc5:	8b 15 d8 32 11 80    	mov    0x801132d8,%edx
80103dcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103dce:	89 10                	mov    %edx,(%eax)
    kmem.freelist = r;
80103dd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103dd3:	a3 d8 32 11 80       	mov    %eax,0x801132d8
    if (kmem.use_lock) release(&kmem.lock);
80103dd8:	a1 d4 32 11 80       	mov    0x801132d4,%eax
80103ddd:	85 c0                	test   %eax,%eax
80103ddf:	74 10                	je     80103df1 <kfree+0x97>
80103de1:	83 ec 0c             	sub    $0xc,%esp
80103de4:	68 a0 32 11 80       	push   $0x801132a0
80103de9:	e8 67 24 00 00       	call   80106255 <release>
80103dee:	83 c4 10             	add    $0x10,%esp
}
80103df1:	90                   	nop
80103df2:	c9                   	leave  
80103df3:	c3                   	ret    

80103df4 <kalloc>:

// Allocate one 4096-byte page of physical memory.
// Returns a pointer that the kernel can use.
// Returns 0 if the memory cannot be allocated.
char* kalloc(void) {
80103df4:	55                   	push   %ebp
80103df5:	89 e5                	mov    %esp,%ebp
80103df7:	83 ec 18             	sub    $0x18,%esp
    struct run* r;

    if (kmem.use_lock) acquire(&kmem.lock);
80103dfa:	a1 d4 32 11 80       	mov    0x801132d4,%eax
80103dff:	85 c0                	test   %eax,%eax
80103e01:	74 10                	je     80103e13 <kalloc+0x1f>
80103e03:	83 ec 0c             	sub    $0xc,%esp
80103e06:	68 a0 32 11 80       	push   $0x801132a0
80103e0b:	e8 d2 23 00 00       	call   801061e2 <acquire>
80103e10:	83 c4 10             	add    $0x10,%esp
    r = kmem.freelist;
80103e13:	a1 d8 32 11 80       	mov    0x801132d8,%eax
80103e18:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (r) kmem.freelist = r->next;
80103e1b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80103e1f:	74 0a                	je     80103e2b <kalloc+0x37>
80103e21:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103e24:	8b 00                	mov    (%eax),%eax
80103e26:	a3 d8 32 11 80       	mov    %eax,0x801132d8
    if (kmem.use_lock) release(&kmem.lock);
80103e2b:	a1 d4 32 11 80       	mov    0x801132d4,%eax
80103e30:	85 c0                	test   %eax,%eax
80103e32:	74 10                	je     80103e44 <kalloc+0x50>
80103e34:	83 ec 0c             	sub    $0xc,%esp
80103e37:	68 a0 32 11 80       	push   $0x801132a0
80103e3c:	e8 14 24 00 00       	call   80106255 <release>
80103e41:	83 c4 10             	add    $0x10,%esp
    return (char*) r;
80103e44:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
80103e47:	c9                   	leave  
80103e48:	c3                   	ret    

80103e49 <inb>:
{
80103e49:	55                   	push   %ebp
80103e4a:	89 e5                	mov    %esp,%ebp
80103e4c:	83 ec 14             	sub    $0x14,%esp
80103e4f:	8b 45 08             	mov    0x8(%ebp),%eax
80103e52:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ volatile("in %1,%0" : "=a" (data) : "d" (port));
80103e56:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
80103e5a:	89 c2                	mov    %eax,%edx
80103e5c:	ec                   	in     (%dx),%al
80103e5d:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
80103e60:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
80103e64:	c9                   	leave  
80103e65:	c3                   	ret    

80103e66 <kbdgetc>:
#include "asm/x86.h"
#include "types.h"
#include "defs.h"
#include "kbd.h"

int kbdgetc(void) {
80103e66:	55                   	push   %ebp
80103e67:	89 e5                	mov    %esp,%ebp
80103e69:	83 ec 10             	sub    $0x10,%esp
    static uint shift;
    static uchar* charcode[4] = {normalmap, shiftmap, ctlmap, ctlmap};
    uint st, data, c;

    st = inb(KBSTATP);
80103e6c:	6a 64                	push   $0x64
80103e6e:	e8 d6 ff ff ff       	call   80103e49 <inb>
80103e73:	83 c4 04             	add    $0x4,%esp
80103e76:	0f b6 c0             	movzbl %al,%eax
80103e79:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((st & KBS_DIB) == 0) return -1;
80103e7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80103e7f:	83 e0 01             	and    $0x1,%eax
80103e82:	85 c0                	test   %eax,%eax
80103e84:	75 0a                	jne    80103e90 <kbdgetc+0x2a>
80103e86:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80103e8b:	e9 23 01 00 00       	jmp    80103fb3 <kbdgetc+0x14d>
    data = inb(KBDATAP);
80103e90:	6a 60                	push   $0x60
80103e92:	e8 b2 ff ff ff       	call   80103e49 <inb>
80103e97:	83 c4 04             	add    $0x4,%esp
80103e9a:	0f b6 c0             	movzbl %al,%eax
80103e9d:	89 45 fc             	mov    %eax,-0x4(%ebp)

    if (data == 0xE0) {
80103ea0:	81 7d fc e0 00 00 00 	cmpl   $0xe0,-0x4(%ebp)
80103ea7:	75 17                	jne    80103ec0 <kbdgetc+0x5a>
        shift |= E0ESC;
80103ea9:	a1 dc 32 11 80       	mov    0x801132dc,%eax
80103eae:	83 c8 40             	or     $0x40,%eax
80103eb1:	a3 dc 32 11 80       	mov    %eax,0x801132dc
        return 0;
80103eb6:	b8 00 00 00 00       	mov    $0x0,%eax
80103ebb:	e9 f3 00 00 00       	jmp    80103fb3 <kbdgetc+0x14d>
    } else if (data & 0x80) {
80103ec0:	8b 45 fc             	mov    -0x4(%ebp),%eax
80103ec3:	25 80 00 00 00       	and    $0x80,%eax
80103ec8:	85 c0                	test   %eax,%eax
80103eca:	74 45                	je     80103f11 <kbdgetc+0xab>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
80103ecc:	a1 dc 32 11 80       	mov    0x801132dc,%eax
80103ed1:	83 e0 40             	and    $0x40,%eax
80103ed4:	85 c0                	test   %eax,%eax
80103ed6:	75 08                	jne    80103ee0 <kbdgetc+0x7a>
80103ed8:	8b 45 fc             	mov    -0x4(%ebp),%eax
80103edb:	83 e0 7f             	and    $0x7f,%eax
80103ede:	eb 03                	jmp    80103ee3 <kbdgetc+0x7d>
80103ee0:	8b 45 fc             	mov    -0x4(%ebp),%eax
80103ee3:	89 45 fc             	mov    %eax,-0x4(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
80103ee6:	8b 45 fc             	mov    -0x4(%ebp),%eax
80103ee9:	05 20 a4 10 80       	add    $0x8010a420,%eax
80103eee:	0f b6 00             	movzbl (%eax),%eax
80103ef1:	83 c8 40             	or     $0x40,%eax
80103ef4:	0f b6 c0             	movzbl %al,%eax
80103ef7:	f7 d0                	not    %eax
80103ef9:	89 c2                	mov    %eax,%edx
80103efb:	a1 dc 32 11 80       	mov    0x801132dc,%eax
80103f00:	21 d0                	and    %edx,%eax
80103f02:	a3 dc 32 11 80       	mov    %eax,0x801132dc
        return 0;
80103f07:	b8 00 00 00 00       	mov    $0x0,%eax
80103f0c:	e9 a2 00 00 00       	jmp    80103fb3 <kbdgetc+0x14d>
    } else if (shift & E0ESC) {
80103f11:	a1 dc 32 11 80       	mov    0x801132dc,%eax
80103f16:	83 e0 40             	and    $0x40,%eax
80103f19:	85 c0                	test   %eax,%eax
80103f1b:	74 14                	je     80103f31 <kbdgetc+0xcb>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
80103f1d:	81 4d fc 80 00 00 00 	orl    $0x80,-0x4(%ebp)
        shift &= ~E0ESC;
80103f24:	a1 dc 32 11 80       	mov    0x801132dc,%eax
80103f29:	83 e0 bf             	and    $0xffffffbf,%eax
80103f2c:	a3 dc 32 11 80       	mov    %eax,0x801132dc
    }

    shift |= shiftcode[data];
80103f31:	8b 45 fc             	mov    -0x4(%ebp),%eax
80103f34:	05 20 a4 10 80       	add    $0x8010a420,%eax
80103f39:	0f b6 00             	movzbl (%eax),%eax
80103f3c:	0f b6 d0             	movzbl %al,%edx
80103f3f:	a1 dc 32 11 80       	mov    0x801132dc,%eax
80103f44:	09 d0                	or     %edx,%eax
80103f46:	a3 dc 32 11 80       	mov    %eax,0x801132dc
    shift ^= togglecode[data];
80103f4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
80103f4e:	05 20 a5 10 80       	add    $0x8010a520,%eax
80103f53:	0f b6 00             	movzbl (%eax),%eax
80103f56:	0f b6 d0             	movzbl %al,%edx
80103f59:	a1 dc 32 11 80       	mov    0x801132dc,%eax
80103f5e:	31 d0                	xor    %edx,%eax
80103f60:	a3 dc 32 11 80       	mov    %eax,0x801132dc
    c = charcode[shift & (CTL | SHIFT)][data];
80103f65:	a1 dc 32 11 80       	mov    0x801132dc,%eax
80103f6a:	83 e0 03             	and    $0x3,%eax
80103f6d:	8b 14 85 20 a9 10 80 	mov    -0x7fef56e0(,%eax,4),%edx
80103f74:	8b 45 fc             	mov    -0x4(%ebp),%eax
80103f77:	01 d0                	add    %edx,%eax
80103f79:	0f b6 00             	movzbl (%eax),%eax
80103f7c:	0f b6 c0             	movzbl %al,%eax
80103f7f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (shift & CAPSLOCK) {
80103f82:	a1 dc 32 11 80       	mov    0x801132dc,%eax
80103f87:	83 e0 08             	and    $0x8,%eax
80103f8a:	85 c0                	test   %eax,%eax
80103f8c:	74 22                	je     80103fb0 <kbdgetc+0x14a>
        if ('a' <= c && c <= 'z')
80103f8e:	83 7d f8 60          	cmpl   $0x60,-0x8(%ebp)
80103f92:	76 0c                	jbe    80103fa0 <kbdgetc+0x13a>
80103f94:	83 7d f8 7a          	cmpl   $0x7a,-0x8(%ebp)
80103f98:	77 06                	ja     80103fa0 <kbdgetc+0x13a>
            c += 'A' - 'a';
80103f9a:	83 6d f8 20          	subl   $0x20,-0x8(%ebp)
80103f9e:	eb 10                	jmp    80103fb0 <kbdgetc+0x14a>
        else if ('A' <= c && c <= 'Z')
80103fa0:	83 7d f8 40          	cmpl   $0x40,-0x8(%ebp)
80103fa4:	76 0a                	jbe    80103fb0 <kbdgetc+0x14a>
80103fa6:	83 7d f8 5a          	cmpl   $0x5a,-0x8(%ebp)
80103faa:	77 04                	ja     80103fb0 <kbdgetc+0x14a>
            c += 'a' - 'A';
80103fac:	83 45 f8 20          	addl   $0x20,-0x8(%ebp)
    }
    return c;
80103fb0:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
80103fb3:	c9                   	leave  
80103fb4:	c3                   	ret    

80103fb5 <kbdintr>:

void kbdintr(void) { consoleintr(kbdgetc); }
80103fb5:	55                   	push   %ebp
80103fb6:	89 e5                	mov    %esp,%ebp
80103fb8:	83 ec 08             	sub    $0x8,%esp
80103fbb:	83 ec 0c             	sub    $0xc,%esp
80103fbe:	68 66 3e 10 80       	push   $0x80103e66
80103fc3:	e8 b5 d3 ff ff       	call   8010137d <consoleintr>
80103fc8:	83 c4 10             	add    $0x10,%esp
80103fcb:	90                   	nop
80103fcc:	c9                   	leave  
80103fcd:	c3                   	ret    

80103fce <report_disk_data_read>:
static int disk_inode_read_count = 0;
static int disk_inode_write_count = 0;
//static int free_blocks = 0;
// extern int free_blocks;

void report_disk_data_read() { disk_data_read_count++; }
80103fce:	55                   	push   %ebp
80103fcf:	89 e5                	mov    %esp,%ebp
80103fd1:	a1 e0 32 11 80       	mov    0x801132e0,%eax
80103fd6:	83 c0 01             	add    $0x1,%eax
80103fd9:	a3 e0 32 11 80       	mov    %eax,0x801132e0
80103fde:	90                   	nop
80103fdf:	5d                   	pop    %ebp
80103fe0:	c3                   	ret    

80103fe1 <report_disk_inode_read>:

void report_disk_inode_read() { disk_inode_read_count++; }
80103fe1:	55                   	push   %ebp
80103fe2:	89 e5                	mov    %esp,%ebp
80103fe4:	a1 e8 32 11 80       	mov    0x801132e8,%eax
80103fe9:	83 c0 01             	add    $0x1,%eax
80103fec:	a3 e8 32 11 80       	mov    %eax,0x801132e8
80103ff1:	90                   	nop
80103ff2:	5d                   	pop    %ebp
80103ff3:	c3                   	ret    

80103ff4 <report_disk_data_write>:

void report_disk_data_write() { disk_data_write_count++; }
80103ff4:	55                   	push   %ebp
80103ff5:	89 e5                	mov    %esp,%ebp
80103ff7:	a1 e4 32 11 80       	mov    0x801132e4,%eax
80103ffc:	83 c0 01             	add    $0x1,%eax
80103fff:	a3 e4 32 11 80       	mov    %eax,0x801132e4
80104004:	90                   	nop
80104005:	5d                   	pop    %ebp
80104006:	c3                   	ret    

80104007 <report_disk_inode_write>:

void report_disk_inode_write() { disk_inode_write_count++; }
80104007:	55                   	push   %ebp
80104008:	89 e5                	mov    %esp,%ebp
8010400a:	a1 ec 32 11 80       	mov    0x801132ec,%eax
8010400f:	83 c0 01             	add    $0x1,%eax
80104012:	a3 ec 32 11 80       	mov    %eax,0x801132ec
80104017:	90                   	nop
80104018:	5d                   	pop    %ebp
80104019:	c3                   	ret    

8010401a <get_free_blocks>:

//Lab 4 Change:
int get_free_blocks() {
8010401a:	55                   	push   %ebp
8010401b:	89 e5                	mov    %esp,%ebp
8010401d:	83 ec 08             	sub    $0x8,%esp
    return count_free_blocks();
80104020:	e8 23 e1 ff ff       	call   80102148 <count_free_blocks>
}
80104025:	c9                   	leave  
80104026:	c3                   	ret    

80104027 <report_stats>:
//         }
//     }
//     brelse(bp);
// }

int report_stats(struct disk_stat* dstat) {
80104027:	55                   	push   %ebp
80104028:	89 e5                	mov    %esp,%ebp
8010402a:	83 ec 08             	sub    $0x8,%esp
    // cprintf("\nDisk data reads: %d", disk_data_read_count);
    // cprintf("\nDisk inode reads: %d", disk_inode_read_count);
    // cprintf("\nDisk data writes: %d", disk_data_write_count);
    // cprintf("\nDisk inode writes: %d", disk_inode_write_count);
    // cprintf("\nNumber of free blocks on disk: %d\n", free_blocks);z
    dstat->disk_data_read_count = disk_data_read_count;
8010402d:	8b 15 e0 32 11 80    	mov    0x801132e0,%edx
80104033:	8b 45 08             	mov    0x8(%ebp),%eax
80104036:	89 10                	mov    %edx,(%eax)
    dstat->disk_data_write_count = disk_data_write_count;
80104038:	8b 15 e4 32 11 80    	mov    0x801132e4,%edx
8010403e:	8b 45 08             	mov    0x8(%ebp),%eax
80104041:	89 50 04             	mov    %edx,0x4(%eax)
    dstat->disk_inode_read_count = disk_inode_read_count;
80104044:	8b 15 e8 32 11 80    	mov    0x801132e8,%edx
8010404a:	8b 45 08             	mov    0x8(%ebp),%eax
8010404d:	89 50 08             	mov    %edx,0x8(%eax)
    dstat->disk_inode_write_count = disk_inode_write_count;
80104050:	8b 15 ec 32 11 80    	mov    0x801132ec,%edx
80104056:	8b 45 08             	mov    0x8(%ebp),%eax
80104059:	89 50 0c             	mov    %edx,0xc(%eax)
    dstat->free_blocks = get_free_blocks();
8010405c:	e8 b9 ff ff ff       	call   8010401a <get_free_blocks>
80104061:	8b 55 08             	mov    0x8(%ebp),%edx
80104064:	89 42 10             	mov    %eax,0x10(%edx)
    return 0;
80104067:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010406c:	c9                   	leave  
8010406d:	c3                   	ret    

8010406e <inb>:
{
8010406e:	55                   	push   %ebp
8010406f:	89 e5                	mov    %esp,%ebp
80104071:	83 ec 14             	sub    $0x14,%esp
80104074:	8b 45 08             	mov    0x8(%ebp),%eax
80104077:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ volatile("in %1,%0" : "=a" (data) : "d" (port));
8010407b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
8010407f:	89 c2                	mov    %eax,%edx
80104081:	ec                   	in     (%dx),%al
80104082:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
80104085:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
80104089:	c9                   	leave  
8010408a:	c3                   	ret    

8010408b <outb>:
{
8010408b:	55                   	push   %ebp
8010408c:	89 e5                	mov    %esp,%ebp
8010408e:	83 ec 08             	sub    $0x8,%esp
80104091:	8b 45 08             	mov    0x8(%ebp),%eax
80104094:	8b 55 0c             	mov    0xc(%ebp),%edx
80104097:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
8010409b:	89 d0                	mov    %edx,%eax
8010409d:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ volatile("out %0,%1" : : "a" (data), "d" (port));
801040a0:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
801040a4:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
801040a8:	ee                   	out    %al,(%dx)
}
801040a9:	90                   	nop
801040aa:	c9                   	leave  
801040ab:	c3                   	ret    

801040ac <lapicw>:
#define TDCR     (0x03E0 / 4)  // Timer Divide Configuration

volatile uint* lapic;  // Initialized in mp.c

//PAGEBREAK!
static void lapicw(int index, int value) {
801040ac:	55                   	push   %ebp
801040ad:	89 e5                	mov    %esp,%ebp
    lapic[index] = value;
801040af:	8b 15 f0 32 11 80    	mov    0x801132f0,%edx
801040b5:	8b 45 08             	mov    0x8(%ebp),%eax
801040b8:	c1 e0 02             	shl    $0x2,%eax
801040bb:	01 c2                	add    %eax,%edx
801040bd:	8b 45 0c             	mov    0xc(%ebp),%eax
801040c0:	89 02                	mov    %eax,(%edx)
    lapic[ID];  // wait for write to finish, by reading
801040c2:	a1 f0 32 11 80       	mov    0x801132f0,%eax
801040c7:	83 c0 20             	add    $0x20,%eax
801040ca:	8b 00                	mov    (%eax),%eax
}
801040cc:	90                   	nop
801040cd:	5d                   	pop    %ebp
801040ce:	c3                   	ret    

801040cf <lapicinit>:

void lapicinit(void) {
801040cf:	55                   	push   %ebp
801040d0:	89 e5                	mov    %esp,%ebp
    if (!lapic) return;
801040d2:	a1 f0 32 11 80       	mov    0x801132f0,%eax
801040d7:	85 c0                	test   %eax,%eax
801040d9:	0f 84 0c 01 00 00    	je     801041eb <lapicinit+0x11c>

    // Enable local APIC; set spurious interrupt vector.
    lapicw(SVR, ENABLE | (T_IRQ0 + IRQ_SPURIOUS));
801040df:	68 3f 01 00 00       	push   $0x13f
801040e4:	6a 3c                	push   $0x3c
801040e6:	e8 c1 ff ff ff       	call   801040ac <lapicw>
801040eb:	83 c4 08             	add    $0x8,%esp

    // The timer repeatedly counts down at bus frequency
    // from lapic[TICR] and then issues an interrupt.
    // If xv6 cared more about precise timekeeping,
    // TICR would be calibrated using an external time source.
    lapicw(TDCR, X1);
801040ee:	6a 0b                	push   $0xb
801040f0:	68 f8 00 00 00       	push   $0xf8
801040f5:	e8 b2 ff ff ff       	call   801040ac <lapicw>
801040fa:	83 c4 08             	add    $0x8,%esp
    lapicw(TIMER, PERIODIC | (T_IRQ0 + IRQ_TIMER));
801040fd:	68 20 00 02 00       	push   $0x20020
80104102:	68 c8 00 00 00       	push   $0xc8
80104107:	e8 a0 ff ff ff       	call   801040ac <lapicw>
8010410c:	83 c4 08             	add    $0x8,%esp
    lapicw(TICR, 10000000);
8010410f:	68 80 96 98 00       	push   $0x989680
80104114:	68 e0 00 00 00       	push   $0xe0
80104119:	e8 8e ff ff ff       	call   801040ac <lapicw>
8010411e:	83 c4 08             	add    $0x8,%esp

    // Disable logical interrupt lines.
    lapicw(LINT0, MASKED);
80104121:	68 00 00 01 00       	push   $0x10000
80104126:	68 d4 00 00 00       	push   $0xd4
8010412b:	e8 7c ff ff ff       	call   801040ac <lapicw>
80104130:	83 c4 08             	add    $0x8,%esp
    lapicw(LINT1, MASKED);
80104133:	68 00 00 01 00       	push   $0x10000
80104138:	68 d8 00 00 00       	push   $0xd8
8010413d:	e8 6a ff ff ff       	call   801040ac <lapicw>
80104142:	83 c4 08             	add    $0x8,%esp

    // Disable performance counter overflow interrupts
    // on machines that provide that interrupt entry.
    if (((lapic[VER] >> 16) & 0xFF) >= 4) lapicw(PCINT, MASKED);
80104145:	a1 f0 32 11 80       	mov    0x801132f0,%eax
8010414a:	83 c0 30             	add    $0x30,%eax
8010414d:	8b 00                	mov    (%eax),%eax
8010414f:	c1 e8 10             	shr    $0x10,%eax
80104152:	25 fc 00 00 00       	and    $0xfc,%eax
80104157:	85 c0                	test   %eax,%eax
80104159:	74 12                	je     8010416d <lapicinit+0x9e>
8010415b:	68 00 00 01 00       	push   $0x10000
80104160:	68 d0 00 00 00       	push   $0xd0
80104165:	e8 42 ff ff ff       	call   801040ac <lapicw>
8010416a:	83 c4 08             	add    $0x8,%esp

    // Map error interrupt to IRQ_ERROR.
    lapicw(ERROR, T_IRQ0 + IRQ_ERROR);
8010416d:	6a 33                	push   $0x33
8010416f:	68 dc 00 00 00       	push   $0xdc
80104174:	e8 33 ff ff ff       	call   801040ac <lapicw>
80104179:	83 c4 08             	add    $0x8,%esp

    // Clear error status register (requires back-to-back writes).
    lapicw(ESR, 0);
8010417c:	6a 00                	push   $0x0
8010417e:	68 a0 00 00 00       	push   $0xa0
80104183:	e8 24 ff ff ff       	call   801040ac <lapicw>
80104188:	83 c4 08             	add    $0x8,%esp
    lapicw(ESR, 0);
8010418b:	6a 00                	push   $0x0
8010418d:	68 a0 00 00 00       	push   $0xa0
80104192:	e8 15 ff ff ff       	call   801040ac <lapicw>
80104197:	83 c4 08             	add    $0x8,%esp

    // Ack any outstanding interrupts.
    lapicw(EOI, 0);
8010419a:	6a 00                	push   $0x0
8010419c:	6a 2c                	push   $0x2c
8010419e:	e8 09 ff ff ff       	call   801040ac <lapicw>
801041a3:	83 c4 08             	add    $0x8,%esp

    // Send an Init Level De-Assert to synchronise arbitration ID's.
    lapicw(ICRHI, 0);
801041a6:	6a 00                	push   $0x0
801041a8:	68 c4 00 00 00       	push   $0xc4
801041ad:	e8 fa fe ff ff       	call   801040ac <lapicw>
801041b2:	83 c4 08             	add    $0x8,%esp
    lapicw(ICRLO, BCAST | INIT | LEVEL);
801041b5:	68 00 85 08 00       	push   $0x88500
801041ba:	68 c0 00 00 00       	push   $0xc0
801041bf:	e8 e8 fe ff ff       	call   801040ac <lapicw>
801041c4:	83 c4 08             	add    $0x8,%esp
    while (lapic[ICRLO] & DELIVS)
801041c7:	90                   	nop
801041c8:	a1 f0 32 11 80       	mov    0x801132f0,%eax
801041cd:	05 00 03 00 00       	add    $0x300,%eax
801041d2:	8b 00                	mov    (%eax),%eax
801041d4:	25 00 10 00 00       	and    $0x1000,%eax
801041d9:	85 c0                	test   %eax,%eax
801041db:	75 eb                	jne    801041c8 <lapicinit+0xf9>
        ;

    // Enable interrupts on the APIC (but not on the processor).
    lapicw(TPR, 0);
801041dd:	6a 00                	push   $0x0
801041df:	6a 20                	push   $0x20
801041e1:	e8 c6 fe ff ff       	call   801040ac <lapicw>
801041e6:	83 c4 08             	add    $0x8,%esp
801041e9:	eb 01                	jmp    801041ec <lapicinit+0x11d>
    if (!lapic) return;
801041eb:	90                   	nop
}
801041ec:	c9                   	leave  
801041ed:	c3                   	ret    

801041ee <lapicid>:

int lapicid(void) {
801041ee:	55                   	push   %ebp
801041ef:	89 e5                	mov    %esp,%ebp
    if (!lapic) return 0;
801041f1:	a1 f0 32 11 80       	mov    0x801132f0,%eax
801041f6:	85 c0                	test   %eax,%eax
801041f8:	75 07                	jne    80104201 <lapicid+0x13>
801041fa:	b8 00 00 00 00       	mov    $0x0,%eax
801041ff:	eb 0d                	jmp    8010420e <lapicid+0x20>
    return lapic[ID] >> 24;
80104201:	a1 f0 32 11 80       	mov    0x801132f0,%eax
80104206:	83 c0 20             	add    $0x20,%eax
80104209:	8b 00                	mov    (%eax),%eax
8010420b:	c1 e8 18             	shr    $0x18,%eax
}
8010420e:	5d                   	pop    %ebp
8010420f:	c3                   	ret    

80104210 <lapiceoi>:

// Acknowledge interrupt.
void lapiceoi(void) {
80104210:	55                   	push   %ebp
80104211:	89 e5                	mov    %esp,%ebp
    if (lapic) lapicw(EOI, 0);
80104213:	a1 f0 32 11 80       	mov    0x801132f0,%eax
80104218:	85 c0                	test   %eax,%eax
8010421a:	74 0c                	je     80104228 <lapiceoi+0x18>
8010421c:	6a 00                	push   $0x0
8010421e:	6a 2c                	push   $0x2c
80104220:	e8 87 fe ff ff       	call   801040ac <lapicw>
80104225:	83 c4 08             	add    $0x8,%esp
}
80104228:	90                   	nop
80104229:	c9                   	leave  
8010422a:	c3                   	ret    

8010422b <microdelay>:

// Spin for a given number of microseconds.
// On real hardware would want to tune this dynamically.
void microdelay(int us) {}
8010422b:	55                   	push   %ebp
8010422c:	89 e5                	mov    %esp,%ebp
8010422e:	90                   	nop
8010422f:	5d                   	pop    %ebp
80104230:	c3                   	ret    

80104231 <lapicstartap>:
#define CMOS_PORT   0x70
#define CMOS_RETURN 0x71

// Start additional processor running entry code at addr.
// See Appendix B of MultiProcessor Specification.
void lapicstartap(uchar apicid, uint addr) {
80104231:	55                   	push   %ebp
80104232:	89 e5                	mov    %esp,%ebp
80104234:	83 ec 14             	sub    $0x14,%esp
80104237:	8b 45 08             	mov    0x8(%ebp),%eax
8010423a:	88 45 ec             	mov    %al,-0x14(%ebp)
    ushort* wrv;

    // "The BSP must initialize CMOS shutdown code to 0AH
    // and the warm reset vector (DWORD based at 40:67) to point at
    // the AP startup code prior to the [universal startup algorithm]."
    outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
8010423d:	6a 0f                	push   $0xf
8010423f:	6a 70                	push   $0x70
80104241:	e8 45 fe ff ff       	call   8010408b <outb>
80104246:	83 c4 08             	add    $0x8,%esp
    outb(CMOS_PORT + 1, 0x0A);
80104249:	6a 0a                	push   $0xa
8010424b:	6a 71                	push   $0x71
8010424d:	e8 39 fe ff ff       	call   8010408b <outb>
80104252:	83 c4 08             	add    $0x8,%esp
    wrv = (ushort*) P2V((0x40 << 4 | 0x67));  // Warm reset vector
80104255:	c7 45 f8 67 04 00 80 	movl   $0x80000467,-0x8(%ebp)
    wrv[0] = 0;
8010425c:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010425f:	66 c7 00 00 00       	movw   $0x0,(%eax)
    wrv[1] = addr >> 4;
80104264:	8b 45 0c             	mov    0xc(%ebp),%eax
80104267:	c1 e8 04             	shr    $0x4,%eax
8010426a:	89 c2                	mov    %eax,%edx
8010426c:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010426f:	83 c0 02             	add    $0x2,%eax
80104272:	66 89 10             	mov    %dx,(%eax)

    // "Universal startup algorithm."
    // Send INIT (level-triggered) interrupt to reset other CPU.
    lapicw(ICRHI, apicid << 24);
80104275:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
80104279:	c1 e0 18             	shl    $0x18,%eax
8010427c:	50                   	push   %eax
8010427d:	68 c4 00 00 00       	push   $0xc4
80104282:	e8 25 fe ff ff       	call   801040ac <lapicw>
80104287:	83 c4 08             	add    $0x8,%esp
    lapicw(ICRLO, INIT | LEVEL | ASSERT);
8010428a:	68 00 c5 00 00       	push   $0xc500
8010428f:	68 c0 00 00 00       	push   $0xc0
80104294:	e8 13 fe ff ff       	call   801040ac <lapicw>
80104299:	83 c4 08             	add    $0x8,%esp
    microdelay(200);
8010429c:	68 c8 00 00 00       	push   $0xc8
801042a1:	e8 85 ff ff ff       	call   8010422b <microdelay>
801042a6:	83 c4 04             	add    $0x4,%esp
    lapicw(ICRLO, INIT | LEVEL);
801042a9:	68 00 85 00 00       	push   $0x8500
801042ae:	68 c0 00 00 00       	push   $0xc0
801042b3:	e8 f4 fd ff ff       	call   801040ac <lapicw>
801042b8:	83 c4 08             	add    $0x8,%esp
    microdelay(100);  // should be 10ms, but too slow in Bochs!
801042bb:	6a 64                	push   $0x64
801042bd:	e8 69 ff ff ff       	call   8010422b <microdelay>
801042c2:	83 c4 04             	add    $0x4,%esp
    // Send startup IPI (twice!) to enter code.
    // Regular hardware is supposed to only accept a STARTUP
    // when it is in the halted state due to an INIT.  So the second
    // should be ignored, but it is part of the official Intel algorithm.
    // Bochs complains about the second one.  Too bad for Bochs.
    for (i = 0; i < 2; i++) {
801042c5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
801042cc:	eb 3d                	jmp    8010430b <lapicstartap+0xda>
        lapicw(ICRHI, apicid << 24);
801042ce:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
801042d2:	c1 e0 18             	shl    $0x18,%eax
801042d5:	50                   	push   %eax
801042d6:	68 c4 00 00 00       	push   $0xc4
801042db:	e8 cc fd ff ff       	call   801040ac <lapicw>
801042e0:	83 c4 08             	add    $0x8,%esp
        lapicw(ICRLO, STARTUP | (addr >> 12));
801042e3:	8b 45 0c             	mov    0xc(%ebp),%eax
801042e6:	c1 e8 0c             	shr    $0xc,%eax
801042e9:	80 cc 06             	or     $0x6,%ah
801042ec:	50                   	push   %eax
801042ed:	68 c0 00 00 00       	push   $0xc0
801042f2:	e8 b5 fd ff ff       	call   801040ac <lapicw>
801042f7:	83 c4 08             	add    $0x8,%esp
        microdelay(200);
801042fa:	68 c8 00 00 00       	push   $0xc8
801042ff:	e8 27 ff ff ff       	call   8010422b <microdelay>
80104304:	83 c4 04             	add    $0x4,%esp
    for (i = 0; i < 2; i++) {
80104307:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
8010430b:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
8010430f:	7e bd                	jle    801042ce <lapicstartap+0x9d>
    }
}
80104311:	90                   	nop
80104312:	90                   	nop
80104313:	c9                   	leave  
80104314:	c3                   	ret    

80104315 <cmos_read>:
#define HOURS 0x04
#define DAY   0x07
#define MONTH 0x08
#define YEAR  0x09

static uint cmos_read(uint reg) {
80104315:	55                   	push   %ebp
80104316:	89 e5                	mov    %esp,%ebp
    outb(CMOS_PORT, reg);
80104318:	8b 45 08             	mov    0x8(%ebp),%eax
8010431b:	0f b6 c0             	movzbl %al,%eax
8010431e:	50                   	push   %eax
8010431f:	6a 70                	push   $0x70
80104321:	e8 65 fd ff ff       	call   8010408b <outb>
80104326:	83 c4 08             	add    $0x8,%esp
    microdelay(200);
80104329:	68 c8 00 00 00       	push   $0xc8
8010432e:	e8 f8 fe ff ff       	call   8010422b <microdelay>
80104333:	83 c4 04             	add    $0x4,%esp

    return inb(CMOS_RETURN);
80104336:	6a 71                	push   $0x71
80104338:	e8 31 fd ff ff       	call   8010406e <inb>
8010433d:	83 c4 04             	add    $0x4,%esp
80104340:	0f b6 c0             	movzbl %al,%eax
}
80104343:	c9                   	leave  
80104344:	c3                   	ret    

80104345 <fill_rtcdate>:

static void fill_rtcdate(struct rtcdate* r) {
80104345:	55                   	push   %ebp
80104346:	89 e5                	mov    %esp,%ebp
    r->second = cmos_read(SECS);
80104348:	6a 00                	push   $0x0
8010434a:	e8 c6 ff ff ff       	call   80104315 <cmos_read>
8010434f:	83 c4 04             	add    $0x4,%esp
80104352:	8b 55 08             	mov    0x8(%ebp),%edx
80104355:	89 02                	mov    %eax,(%edx)
    r->minute = cmos_read(MINS);
80104357:	6a 02                	push   $0x2
80104359:	e8 b7 ff ff ff       	call   80104315 <cmos_read>
8010435e:	83 c4 04             	add    $0x4,%esp
80104361:	8b 55 08             	mov    0x8(%ebp),%edx
80104364:	89 42 04             	mov    %eax,0x4(%edx)
    r->hour = cmos_read(HOURS);
80104367:	6a 04                	push   $0x4
80104369:	e8 a7 ff ff ff       	call   80104315 <cmos_read>
8010436e:	83 c4 04             	add    $0x4,%esp
80104371:	8b 55 08             	mov    0x8(%ebp),%edx
80104374:	89 42 08             	mov    %eax,0x8(%edx)
    r->day = cmos_read(DAY);
80104377:	6a 07                	push   $0x7
80104379:	e8 97 ff ff ff       	call   80104315 <cmos_read>
8010437e:	83 c4 04             	add    $0x4,%esp
80104381:	8b 55 08             	mov    0x8(%ebp),%edx
80104384:	89 42 0c             	mov    %eax,0xc(%edx)
    r->month = cmos_read(MONTH);
80104387:	6a 08                	push   $0x8
80104389:	e8 87 ff ff ff       	call   80104315 <cmos_read>
8010438e:	83 c4 04             	add    $0x4,%esp
80104391:	8b 55 08             	mov    0x8(%ebp),%edx
80104394:	89 42 10             	mov    %eax,0x10(%edx)
    r->year = cmos_read(YEAR);
80104397:	6a 09                	push   $0x9
80104399:	e8 77 ff ff ff       	call   80104315 <cmos_read>
8010439e:	83 c4 04             	add    $0x4,%esp
801043a1:	8b 55 08             	mov    0x8(%ebp),%edx
801043a4:	89 42 14             	mov    %eax,0x14(%edx)
}
801043a7:	90                   	nop
801043a8:	c9                   	leave  
801043a9:	c3                   	ret    

801043aa <cmostime>:

// qemu seems to use 24-hour GWT and the values are BCD encoded
void cmostime(struct rtcdate* r) {
801043aa:	55                   	push   %ebp
801043ab:	89 e5                	mov    %esp,%ebp
801043ad:	83 ec 48             	sub    $0x48,%esp
    struct rtcdate t1, t2;
    int sb, bcd;

    sb = cmos_read(CMOS_STATB);
801043b0:	6a 0b                	push   $0xb
801043b2:	e8 5e ff ff ff       	call   80104315 <cmos_read>
801043b7:	83 c4 04             	add    $0x4,%esp
801043ba:	89 45 f4             	mov    %eax,-0xc(%ebp)

    bcd = (sb & (1 << 2)) == 0;
801043bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
801043c0:	83 e0 04             	and    $0x4,%eax
801043c3:	85 c0                	test   %eax,%eax
801043c5:	0f 94 c0             	sete   %al
801043c8:	0f b6 c0             	movzbl %al,%eax
801043cb:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // make sure CMOS doesn't modify time while we read it
    for (;;) {
        fill_rtcdate(&t1);
801043ce:	8d 45 d8             	lea    -0x28(%ebp),%eax
801043d1:	50                   	push   %eax
801043d2:	e8 6e ff ff ff       	call   80104345 <fill_rtcdate>
801043d7:	83 c4 04             	add    $0x4,%esp
        if (cmos_read(CMOS_STATA) & CMOS_UIP) continue;
801043da:	6a 0a                	push   $0xa
801043dc:	e8 34 ff ff ff       	call   80104315 <cmos_read>
801043e1:	83 c4 04             	add    $0x4,%esp
801043e4:	25 80 00 00 00       	and    $0x80,%eax
801043e9:	85 c0                	test   %eax,%eax
801043eb:	75 27                	jne    80104414 <cmostime+0x6a>
        fill_rtcdate(&t2);
801043ed:	8d 45 c0             	lea    -0x40(%ebp),%eax
801043f0:	50                   	push   %eax
801043f1:	e8 4f ff ff ff       	call   80104345 <fill_rtcdate>
801043f6:	83 c4 04             	add    $0x4,%esp
        if (memcmp(&t1, &t2, sizeof(t1)) == 0) break;
801043f9:	83 ec 04             	sub    $0x4,%esp
801043fc:	6a 18                	push   $0x18
801043fe:	8d 45 c0             	lea    -0x40(%ebp),%eax
80104401:	50                   	push   %eax
80104402:	8d 45 d8             	lea    -0x28(%ebp),%eax
80104405:	50                   	push   %eax
80104406:	e8 d3 20 00 00       	call   801064de <memcmp>
8010440b:	83 c4 10             	add    $0x10,%esp
8010440e:	85 c0                	test   %eax,%eax
80104410:	74 05                	je     80104417 <cmostime+0x6d>
80104412:	eb ba                	jmp    801043ce <cmostime+0x24>
        if (cmos_read(CMOS_STATA) & CMOS_UIP) continue;
80104414:	90                   	nop
        fill_rtcdate(&t1);
80104415:	eb b7                	jmp    801043ce <cmostime+0x24>
        if (memcmp(&t1, &t2, sizeof(t1)) == 0) break;
80104417:	90                   	nop
    }

    // convert
    if (bcd) {
80104418:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8010441c:	0f 84 b4 00 00 00    	je     801044d6 <cmostime+0x12c>
#define CONV(x) (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
        CONV(second);
80104422:	8b 45 d8             	mov    -0x28(%ebp),%eax
80104425:	c1 e8 04             	shr    $0x4,%eax
80104428:	89 c2                	mov    %eax,%edx
8010442a:	89 d0                	mov    %edx,%eax
8010442c:	c1 e0 02             	shl    $0x2,%eax
8010442f:	01 d0                	add    %edx,%eax
80104431:	01 c0                	add    %eax,%eax
80104433:	89 c2                	mov    %eax,%edx
80104435:	8b 45 d8             	mov    -0x28(%ebp),%eax
80104438:	83 e0 0f             	and    $0xf,%eax
8010443b:	01 d0                	add    %edx,%eax
8010443d:	89 45 d8             	mov    %eax,-0x28(%ebp)
        CONV(minute);
80104440:	8b 45 dc             	mov    -0x24(%ebp),%eax
80104443:	c1 e8 04             	shr    $0x4,%eax
80104446:	89 c2                	mov    %eax,%edx
80104448:	89 d0                	mov    %edx,%eax
8010444a:	c1 e0 02             	shl    $0x2,%eax
8010444d:	01 d0                	add    %edx,%eax
8010444f:	01 c0                	add    %eax,%eax
80104451:	89 c2                	mov    %eax,%edx
80104453:	8b 45 dc             	mov    -0x24(%ebp),%eax
80104456:	83 e0 0f             	and    $0xf,%eax
80104459:	01 d0                	add    %edx,%eax
8010445b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        CONV(hour);
8010445e:	8b 45 e0             	mov    -0x20(%ebp),%eax
80104461:	c1 e8 04             	shr    $0x4,%eax
80104464:	89 c2                	mov    %eax,%edx
80104466:	89 d0                	mov    %edx,%eax
80104468:	c1 e0 02             	shl    $0x2,%eax
8010446b:	01 d0                	add    %edx,%eax
8010446d:	01 c0                	add    %eax,%eax
8010446f:	89 c2                	mov    %eax,%edx
80104471:	8b 45 e0             	mov    -0x20(%ebp),%eax
80104474:	83 e0 0f             	and    $0xf,%eax
80104477:	01 d0                	add    %edx,%eax
80104479:	89 45 e0             	mov    %eax,-0x20(%ebp)
        CONV(day);
8010447c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010447f:	c1 e8 04             	shr    $0x4,%eax
80104482:	89 c2                	mov    %eax,%edx
80104484:	89 d0                	mov    %edx,%eax
80104486:	c1 e0 02             	shl    $0x2,%eax
80104489:	01 d0                	add    %edx,%eax
8010448b:	01 c0                	add    %eax,%eax
8010448d:	89 c2                	mov    %eax,%edx
8010448f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80104492:	83 e0 0f             	and    $0xf,%eax
80104495:	01 d0                	add    %edx,%eax
80104497:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        CONV(month);
8010449a:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010449d:	c1 e8 04             	shr    $0x4,%eax
801044a0:	89 c2                	mov    %eax,%edx
801044a2:	89 d0                	mov    %edx,%eax
801044a4:	c1 e0 02             	shl    $0x2,%eax
801044a7:	01 d0                	add    %edx,%eax
801044a9:	01 c0                	add    %eax,%eax
801044ab:	89 c2                	mov    %eax,%edx
801044ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
801044b0:	83 e0 0f             	and    $0xf,%eax
801044b3:	01 d0                	add    %edx,%eax
801044b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
        CONV(year);
801044b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
801044bb:	c1 e8 04             	shr    $0x4,%eax
801044be:	89 c2                	mov    %eax,%edx
801044c0:	89 d0                	mov    %edx,%eax
801044c2:	c1 e0 02             	shl    $0x2,%eax
801044c5:	01 d0                	add    %edx,%eax
801044c7:	01 c0                	add    %eax,%eax
801044c9:	89 c2                	mov    %eax,%edx
801044cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
801044ce:	83 e0 0f             	and    $0xf,%eax
801044d1:	01 d0                	add    %edx,%eax
801044d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
#undef CONV
    }

    *r = t1;
801044d6:	8b 45 08             	mov    0x8(%ebp),%eax
801044d9:	8b 55 d8             	mov    -0x28(%ebp),%edx
801044dc:	89 10                	mov    %edx,(%eax)
801044de:	8b 55 dc             	mov    -0x24(%ebp),%edx
801044e1:	89 50 04             	mov    %edx,0x4(%eax)
801044e4:	8b 55 e0             	mov    -0x20(%ebp),%edx
801044e7:	89 50 08             	mov    %edx,0x8(%eax)
801044ea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
801044ed:	89 50 0c             	mov    %edx,0xc(%eax)
801044f0:	8b 55 e8             	mov    -0x18(%ebp),%edx
801044f3:	89 50 10             	mov    %edx,0x10(%eax)
801044f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
801044f9:	89 50 14             	mov    %edx,0x14(%eax)
    r->year += 2000;
801044fc:	8b 45 08             	mov    0x8(%ebp),%eax
801044ff:	8b 40 14             	mov    0x14(%eax),%eax
80104502:	8d 90 d0 07 00 00    	lea    0x7d0(%eax),%edx
80104508:	8b 45 08             	mov    0x8(%ebp),%eax
8010450b:	89 50 14             	mov    %edx,0x14(%eax)
}
8010450e:	90                   	nop
8010450f:	c9                   	leave  
80104510:	c3                   	ret    

80104511 <initlog>:
struct log log;

static void recover_from_log(void);
static void commit();

void initlog(int dev) {
80104511:	55                   	push   %ebp
80104512:	89 e5                	mov    %esp,%ebp
80104514:	83 ec 28             	sub    $0x28,%esp
    if (sizeof(struct logheader) >= BSIZE) panic("initlog: too big logheader");

    struct superblock sb;
    initlock(&log.lock, "log");
80104517:	83 ec 08             	sub    $0x8,%esp
8010451a:	68 21 90 10 80       	push   $0x80109021
8010451f:	68 00 33 11 80       	push   $0x80113300
80104524:	e8 88 1c 00 00       	call   801061b1 <initlock>
80104529:	83 c4 10             	add    $0x10,%esp
    readsb(dev, &sb);
8010452c:	83 ec 08             	sub    $0x8,%esp
8010452f:	8d 45 dc             	lea    -0x24(%ebp),%eax
80104532:	50                   	push   %eax
80104533:	ff 75 08             	push   0x8(%ebp)
80104536:	e8 33 da ff ff       	call   80101f6e <readsb>
8010453b:	83 c4 10             	add    $0x10,%esp
    log.start = sb.logstart;
8010453e:	8b 45 ec             	mov    -0x14(%ebp),%eax
80104541:	a3 34 33 11 80       	mov    %eax,0x80113334
    log.size = sb.nlog;
80104546:	8b 45 e8             	mov    -0x18(%ebp),%eax
80104549:	a3 38 33 11 80       	mov    %eax,0x80113338
    log.dev = dev;
8010454e:	8b 45 08             	mov    0x8(%ebp),%eax
80104551:	a3 44 33 11 80       	mov    %eax,0x80113344
    recover_from_log();
80104556:	e8 b3 01 00 00       	call   8010470e <recover_from_log>
}
8010455b:	90                   	nop
8010455c:	c9                   	leave  
8010455d:	c3                   	ret    

8010455e <install_trans>:

// Copy committed blocks from log to their home location
static void install_trans(void) {
8010455e:	55                   	push   %ebp
8010455f:	89 e5                	mov    %esp,%ebp
80104561:	83 ec 18             	sub    $0x18,%esp
    int tail;

    for (tail = 0; tail < log.lh.n; tail++) {
80104564:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010456b:	e9 95 00 00 00       	jmp    80104605 <install_trans+0xa7>
        struct buf* lbuf =
            bread(log.dev, log.start + tail + 1);  // read log block
80104570:	8b 15 34 33 11 80    	mov    0x80113334,%edx
80104576:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104579:	01 d0                	add    %edx,%eax
8010457b:	83 c0 01             	add    $0x1,%eax
8010457e:	89 c2                	mov    %eax,%edx
80104580:	a1 44 33 11 80       	mov    0x80113344,%eax
80104585:	83 ec 08             	sub    $0x8,%esp
80104588:	52                   	push   %edx
80104589:	50                   	push   %eax
8010458a:	e8 ea c6 ff ff       	call   80100c79 <bread>
8010458f:	83 c4 10             	add    $0x10,%esp
80104592:	89 45 f0             	mov    %eax,-0x10(%ebp)
        struct buf* dbuf = bread(log.dev, log.lh.block[tail]);  // read dst
80104595:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104598:	83 c0 10             	add    $0x10,%eax
8010459b:	8b 04 85 0c 33 11 80 	mov    -0x7feeccf4(,%eax,4),%eax
801045a2:	89 c2                	mov    %eax,%edx
801045a4:	a1 44 33 11 80       	mov    0x80113344,%eax
801045a9:	83 ec 08             	sub    $0x8,%esp
801045ac:	52                   	push   %edx
801045ad:	50                   	push   %eax
801045ae:	e8 c6 c6 ff ff       	call   80100c79 <bread>
801045b3:	83 c4 10             	add    $0x10,%esp
801045b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
801045b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
801045bc:	8d 50 5c             	lea    0x5c(%eax),%edx
801045bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
801045c2:	83 c0 5c             	add    $0x5c,%eax
801045c5:	83 ec 04             	sub    $0x4,%esp
801045c8:	68 00 02 00 00       	push   $0x200
801045cd:	52                   	push   %edx
801045ce:	50                   	push   %eax
801045cf:	e8 62 1f 00 00       	call   80106536 <memmove>
801045d4:	83 c4 10             	add    $0x10,%esp
        bwrite(dbuf);                            // write dst to disk
801045d7:	83 ec 0c             	sub    $0xc,%esp
801045da:	ff 75 ec             	push   -0x14(%ebp)
801045dd:	e8 12 c7 ff ff       	call   80100cf4 <bwrite>
801045e2:	83 c4 10             	add    $0x10,%esp
        brelse(lbuf);
801045e5:	83 ec 0c             	sub    $0xc,%esp
801045e8:	ff 75 f0             	push   -0x10(%ebp)
801045eb:	e8 8f c7 ff ff       	call   80100d7f <brelse>
801045f0:	83 c4 10             	add    $0x10,%esp
        brelse(dbuf);
801045f3:	83 ec 0c             	sub    $0xc,%esp
801045f6:	ff 75 ec             	push   -0x14(%ebp)
801045f9:	e8 81 c7 ff ff       	call   80100d7f <brelse>
801045fe:	83 c4 10             	add    $0x10,%esp
    for (tail = 0; tail < log.lh.n; tail++) {
80104601:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80104605:	a1 48 33 11 80       	mov    0x80113348,%eax
8010460a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
8010460d:	0f 8c 5d ff ff ff    	jl     80104570 <install_trans+0x12>
    }
}
80104613:	90                   	nop
80104614:	90                   	nop
80104615:	c9                   	leave  
80104616:	c3                   	ret    

80104617 <read_head>:

// Read the log header from disk into the in-memory log header
static void read_head(void) {
80104617:	55                   	push   %ebp
80104618:	89 e5                	mov    %esp,%ebp
8010461a:	83 ec 18             	sub    $0x18,%esp
    struct buf* buf = bread(log.dev, log.start);
8010461d:	a1 34 33 11 80       	mov    0x80113334,%eax
80104622:	89 c2                	mov    %eax,%edx
80104624:	a1 44 33 11 80       	mov    0x80113344,%eax
80104629:	83 ec 08             	sub    $0x8,%esp
8010462c:	52                   	push   %edx
8010462d:	50                   	push   %eax
8010462e:	e8 46 c6 ff ff       	call   80100c79 <bread>
80104633:	83 c4 10             	add    $0x10,%esp
80104636:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct logheader* lh = (struct logheader*) (buf->data);
80104639:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010463c:	83 c0 5c             	add    $0x5c,%eax
8010463f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int i;
    log.lh.n = lh->n;
80104642:	8b 45 ec             	mov    -0x14(%ebp),%eax
80104645:	8b 00                	mov    (%eax),%eax
80104647:	a3 48 33 11 80       	mov    %eax,0x80113348
    for (i = 0; i < log.lh.n; i++) {
8010464c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80104653:	eb 1b                	jmp    80104670 <read_head+0x59>
        log.lh.block[i] = lh->block[i];
80104655:	8b 45 ec             	mov    -0x14(%ebp),%eax
80104658:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010465b:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
8010465f:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104662:	83 c2 10             	add    $0x10,%edx
80104665:	89 04 95 0c 33 11 80 	mov    %eax,-0x7feeccf4(,%edx,4)
    for (i = 0; i < log.lh.n; i++) {
8010466c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80104670:	a1 48 33 11 80       	mov    0x80113348,%eax
80104675:	39 45 f4             	cmp    %eax,-0xc(%ebp)
80104678:	7c db                	jl     80104655 <read_head+0x3e>
    }
    brelse(buf);
8010467a:	83 ec 0c             	sub    $0xc,%esp
8010467d:	ff 75 f0             	push   -0x10(%ebp)
80104680:	e8 fa c6 ff ff       	call   80100d7f <brelse>
80104685:	83 c4 10             	add    $0x10,%esp
}
80104688:	90                   	nop
80104689:	c9                   	leave  
8010468a:	c3                   	ret    

8010468b <write_head>:

// Write in-memory log header to disk.
// This is the true point at which the
// current transaction commits.
static void write_head(void) {
8010468b:	55                   	push   %ebp
8010468c:	89 e5                	mov    %esp,%ebp
8010468e:	83 ec 18             	sub    $0x18,%esp
    struct buf* buf = bread(log.dev, log.start);
80104691:	a1 34 33 11 80       	mov    0x80113334,%eax
80104696:	89 c2                	mov    %eax,%edx
80104698:	a1 44 33 11 80       	mov    0x80113344,%eax
8010469d:	83 ec 08             	sub    $0x8,%esp
801046a0:	52                   	push   %edx
801046a1:	50                   	push   %eax
801046a2:	e8 d2 c5 ff ff       	call   80100c79 <bread>
801046a7:	83 c4 10             	add    $0x10,%esp
801046aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct logheader* hb = (struct logheader*) (buf->data);
801046ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
801046b0:	83 c0 5c             	add    $0x5c,%eax
801046b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int i;
    hb->n = log.lh.n;
801046b6:	8b 15 48 33 11 80    	mov    0x80113348,%edx
801046bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
801046bf:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < log.lh.n; i++) {
801046c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801046c8:	eb 1b                	jmp    801046e5 <write_head+0x5a>
        hb->block[i] = log.lh.block[i];
801046ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
801046cd:	83 c0 10             	add    $0x10,%eax
801046d0:	8b 0c 85 0c 33 11 80 	mov    -0x7feeccf4(,%eax,4),%ecx
801046d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
801046da:	8b 55 f4             	mov    -0xc(%ebp),%edx
801046dd:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)
    for (i = 0; i < log.lh.n; i++) {
801046e1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
801046e5:	a1 48 33 11 80       	mov    0x80113348,%eax
801046ea:	39 45 f4             	cmp    %eax,-0xc(%ebp)
801046ed:	7c db                	jl     801046ca <write_head+0x3f>
    }
    bwrite(buf);
801046ef:	83 ec 0c             	sub    $0xc,%esp
801046f2:	ff 75 f0             	push   -0x10(%ebp)
801046f5:	e8 fa c5 ff ff       	call   80100cf4 <bwrite>
801046fa:	83 c4 10             	add    $0x10,%esp
    brelse(buf);
801046fd:	83 ec 0c             	sub    $0xc,%esp
80104700:	ff 75 f0             	push   -0x10(%ebp)
80104703:	e8 77 c6 ff ff       	call   80100d7f <brelse>
80104708:	83 c4 10             	add    $0x10,%esp
}
8010470b:	90                   	nop
8010470c:	c9                   	leave  
8010470d:	c3                   	ret    

8010470e <recover_from_log>:

static void recover_from_log(void) {
8010470e:	55                   	push   %ebp
8010470f:	89 e5                	mov    %esp,%ebp
80104711:	83 ec 08             	sub    $0x8,%esp
    read_head();
80104714:	e8 fe fe ff ff       	call   80104617 <read_head>
    install_trans();  // if committed, copy from log to disk
80104719:	e8 40 fe ff ff       	call   8010455e <install_trans>
    log.lh.n = 0;
8010471e:	c7 05 48 33 11 80 00 	movl   $0x0,0x80113348
80104725:	00 00 00 
    write_head();  // clear the log
80104728:	e8 5e ff ff ff       	call   8010468b <write_head>
}
8010472d:	90                   	nop
8010472e:	c9                   	leave  
8010472f:	c3                   	ret    

80104730 <begin_op>:

// called at the start of each FS system call.
void begin_op(void) {
80104730:	55                   	push   %ebp
80104731:	89 e5                	mov    %esp,%ebp
80104733:	83 ec 08             	sub    $0x8,%esp
    acquire(&log.lock);
80104736:	83 ec 0c             	sub    $0xc,%esp
80104739:	68 00 33 11 80       	push   $0x80113300
8010473e:	e8 9f 1a 00 00       	call   801061e2 <acquire>
80104743:	83 c4 10             	add    $0x10,%esp
    while (1) {
        if (log.committing) {
80104746:	a1 40 33 11 80       	mov    0x80113340,%eax
8010474b:	85 c0                	test   %eax,%eax
8010474d:	74 17                	je     80104766 <begin_op+0x36>
            sleep(&log, &log.lock);
8010474f:	83 ec 08             	sub    $0x8,%esp
80104752:	68 00 33 11 80       	push   $0x80113300
80104757:	68 00 33 11 80       	push   $0x80113300
8010475c:	e8 fd 15 00 00       	call   80105d5e <sleep>
80104761:	83 c4 10             	add    $0x10,%esp
80104764:	eb e0                	jmp    80104746 <begin_op+0x16>
        } else if (log.lh.n + (log.outstanding + 1) * MAXOPBLOCKS > LOGSIZE) {
80104766:	8b 0d 48 33 11 80    	mov    0x80113348,%ecx
8010476c:	a1 3c 33 11 80       	mov    0x8011333c,%eax
80104771:	8d 50 01             	lea    0x1(%eax),%edx
80104774:	89 d0                	mov    %edx,%eax
80104776:	c1 e0 02             	shl    $0x2,%eax
80104779:	01 d0                	add    %edx,%eax
8010477b:	01 c0                	add    %eax,%eax
8010477d:	01 c8                	add    %ecx,%eax
8010477f:	83 f8 1e             	cmp    $0x1e,%eax
80104782:	7e 17                	jle    8010479b <begin_op+0x6b>
            // this op might exhaust log space; wait for commit.
            sleep(&log, &log.lock);
80104784:	83 ec 08             	sub    $0x8,%esp
80104787:	68 00 33 11 80       	push   $0x80113300
8010478c:	68 00 33 11 80       	push   $0x80113300
80104791:	e8 c8 15 00 00       	call   80105d5e <sleep>
80104796:	83 c4 10             	add    $0x10,%esp
80104799:	eb ab                	jmp    80104746 <begin_op+0x16>
        } else {
            log.outstanding += 1;
8010479b:	a1 3c 33 11 80       	mov    0x8011333c,%eax
801047a0:	83 c0 01             	add    $0x1,%eax
801047a3:	a3 3c 33 11 80       	mov    %eax,0x8011333c
            release(&log.lock);
801047a8:	83 ec 0c             	sub    $0xc,%esp
801047ab:	68 00 33 11 80       	push   $0x80113300
801047b0:	e8 a0 1a 00 00       	call   80106255 <release>
801047b5:	83 c4 10             	add    $0x10,%esp
            break;
801047b8:	90                   	nop
        }
    }
}
801047b9:	90                   	nop
801047ba:	c9                   	leave  
801047bb:	c3                   	ret    

801047bc <end_op>:

// called at the end of each FS system call.
// commits if this was the last outstanding operation.
void end_op(void) {
801047bc:	55                   	push   %ebp
801047bd:	89 e5                	mov    %esp,%ebp
801047bf:	83 ec 18             	sub    $0x18,%esp
    int do_commit = 0;
801047c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    acquire(&log.lock);
801047c9:	83 ec 0c             	sub    $0xc,%esp
801047cc:	68 00 33 11 80       	push   $0x80113300
801047d1:	e8 0c 1a 00 00       	call   801061e2 <acquire>
801047d6:	83 c4 10             	add    $0x10,%esp
    log.outstanding -= 1;
801047d9:	a1 3c 33 11 80       	mov    0x8011333c,%eax
801047de:	83 e8 01             	sub    $0x1,%eax
801047e1:	a3 3c 33 11 80       	mov    %eax,0x8011333c
    if (log.committing) panic("log.committing");
801047e6:	a1 40 33 11 80       	mov    0x80113340,%eax
801047eb:	85 c0                	test   %eax,%eax
801047ed:	74 0d                	je     801047fc <end_op+0x40>
801047ef:	83 ec 0c             	sub    $0xc,%esp
801047f2:	68 25 90 10 80       	push   $0x80109025
801047f7:	e8 e7 c8 ff ff       	call   801010e3 <panic>
    if (log.outstanding == 0) {
801047fc:	a1 3c 33 11 80       	mov    0x8011333c,%eax
80104801:	85 c0                	test   %eax,%eax
80104803:	75 13                	jne    80104818 <end_op+0x5c>
        do_commit = 1;
80104805:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        log.committing = 1;
8010480c:	c7 05 40 33 11 80 01 	movl   $0x1,0x80113340
80104813:	00 00 00 
80104816:	eb 10                	jmp    80104828 <end_op+0x6c>
    } else {
        // begin_op() may be waiting for log space,
        // and decrementing log.outstanding has decreased
        // the amount of reserved space.
        wakeup(&log);
80104818:	83 ec 0c             	sub    $0xc,%esp
8010481b:	68 00 33 11 80       	push   $0x80113300
80104820:	e8 20 16 00 00       	call   80105e45 <wakeup>
80104825:	83 c4 10             	add    $0x10,%esp
    }
    release(&log.lock);
80104828:	83 ec 0c             	sub    $0xc,%esp
8010482b:	68 00 33 11 80       	push   $0x80113300
80104830:	e8 20 1a 00 00       	call   80106255 <release>
80104835:	83 c4 10             	add    $0x10,%esp

    if (do_commit) {
80104838:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8010483c:	74 3f                	je     8010487d <end_op+0xc1>
        // call commit w/o holding locks, since not allowed
        // to sleep with locks.
        commit();
8010483e:	e8 f6 00 00 00       	call   80104939 <commit>
        acquire(&log.lock);
80104843:	83 ec 0c             	sub    $0xc,%esp
80104846:	68 00 33 11 80       	push   $0x80113300
8010484b:	e8 92 19 00 00       	call   801061e2 <acquire>
80104850:	83 c4 10             	add    $0x10,%esp
        log.committing = 0;
80104853:	c7 05 40 33 11 80 00 	movl   $0x0,0x80113340
8010485a:	00 00 00 
        wakeup(&log);
8010485d:	83 ec 0c             	sub    $0xc,%esp
80104860:	68 00 33 11 80       	push   $0x80113300
80104865:	e8 db 15 00 00       	call   80105e45 <wakeup>
8010486a:	83 c4 10             	add    $0x10,%esp
        release(&log.lock);
8010486d:	83 ec 0c             	sub    $0xc,%esp
80104870:	68 00 33 11 80       	push   $0x80113300
80104875:	e8 db 19 00 00       	call   80106255 <release>
8010487a:	83 c4 10             	add    $0x10,%esp
    }
}
8010487d:	90                   	nop
8010487e:	c9                   	leave  
8010487f:	c3                   	ret    

80104880 <write_log>:

// Copy modified blocks from cache to log.
static void write_log(void) {
80104880:	55                   	push   %ebp
80104881:	89 e5                	mov    %esp,%ebp
80104883:	83 ec 18             	sub    $0x18,%esp
    int tail;

    for (tail = 0; tail < log.lh.n; tail++) {
80104886:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010488d:	e9 95 00 00 00       	jmp    80104927 <write_log+0xa7>
        struct buf* to = bread(log.dev, log.start + tail + 1);  // log block
80104892:	8b 15 34 33 11 80    	mov    0x80113334,%edx
80104898:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010489b:	01 d0                	add    %edx,%eax
8010489d:	83 c0 01             	add    $0x1,%eax
801048a0:	89 c2                	mov    %eax,%edx
801048a2:	a1 44 33 11 80       	mov    0x80113344,%eax
801048a7:	83 ec 08             	sub    $0x8,%esp
801048aa:	52                   	push   %edx
801048ab:	50                   	push   %eax
801048ac:	e8 c8 c3 ff ff       	call   80100c79 <bread>
801048b1:	83 c4 10             	add    $0x10,%esp
801048b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        struct buf* from = bread(log.dev, log.lh.block[tail]);  // cache block
801048b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
801048ba:	83 c0 10             	add    $0x10,%eax
801048bd:	8b 04 85 0c 33 11 80 	mov    -0x7feeccf4(,%eax,4),%eax
801048c4:	89 c2                	mov    %eax,%edx
801048c6:	a1 44 33 11 80       	mov    0x80113344,%eax
801048cb:	83 ec 08             	sub    $0x8,%esp
801048ce:	52                   	push   %edx
801048cf:	50                   	push   %eax
801048d0:	e8 a4 c3 ff ff       	call   80100c79 <bread>
801048d5:	83 c4 10             	add    $0x10,%esp
801048d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memmove(to->data, from->data, BSIZE);
801048db:	8b 45 ec             	mov    -0x14(%ebp),%eax
801048de:	8d 50 5c             	lea    0x5c(%eax),%edx
801048e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
801048e4:	83 c0 5c             	add    $0x5c,%eax
801048e7:	83 ec 04             	sub    $0x4,%esp
801048ea:	68 00 02 00 00       	push   $0x200
801048ef:	52                   	push   %edx
801048f0:	50                   	push   %eax
801048f1:	e8 40 1c 00 00       	call   80106536 <memmove>
801048f6:	83 c4 10             	add    $0x10,%esp
        bwrite(to);  // write the log
801048f9:	83 ec 0c             	sub    $0xc,%esp
801048fc:	ff 75 f0             	push   -0x10(%ebp)
801048ff:	e8 f0 c3 ff ff       	call   80100cf4 <bwrite>
80104904:	83 c4 10             	add    $0x10,%esp
        brelse(from);
80104907:	83 ec 0c             	sub    $0xc,%esp
8010490a:	ff 75 ec             	push   -0x14(%ebp)
8010490d:	e8 6d c4 ff ff       	call   80100d7f <brelse>
80104912:	83 c4 10             	add    $0x10,%esp
        brelse(to);
80104915:	83 ec 0c             	sub    $0xc,%esp
80104918:	ff 75 f0             	push   -0x10(%ebp)
8010491b:	e8 5f c4 ff ff       	call   80100d7f <brelse>
80104920:	83 c4 10             	add    $0x10,%esp
    for (tail = 0; tail < log.lh.n; tail++) {
80104923:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80104927:	a1 48 33 11 80       	mov    0x80113348,%eax
8010492c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
8010492f:	0f 8c 5d ff ff ff    	jl     80104892 <write_log+0x12>
    }
}
80104935:	90                   	nop
80104936:	90                   	nop
80104937:	c9                   	leave  
80104938:	c3                   	ret    

80104939 <commit>:

static void commit() {
80104939:	55                   	push   %ebp
8010493a:	89 e5                	mov    %esp,%ebp
8010493c:	83 ec 08             	sub    $0x8,%esp
    if (log.lh.n > 0) {
8010493f:	a1 48 33 11 80       	mov    0x80113348,%eax
80104944:	85 c0                	test   %eax,%eax
80104946:	7e 1e                	jle    80104966 <commit+0x2d>
        write_log();      // Write modified blocks from cache to log
80104948:	e8 33 ff ff ff       	call   80104880 <write_log>
        write_head();     // Write header to disk -- the real commit
8010494d:	e8 39 fd ff ff       	call   8010468b <write_head>
        install_trans();  // Now install writes to home locations
80104952:	e8 07 fc ff ff       	call   8010455e <install_trans>
        log.lh.n = 0;
80104957:	c7 05 48 33 11 80 00 	movl   $0x0,0x80113348
8010495e:	00 00 00 
        write_head();  // Erase the transaction from the log
80104961:	e8 25 fd ff ff       	call   8010468b <write_head>
    }
}
80104966:	90                   	nop
80104967:	c9                   	leave  
80104968:	c3                   	ret    

80104969 <log_write>:
// log_write() replaces bwrite(); a typical use is:
//   bp = bread(...)
//   modify bp->data[]
//   log_write(bp)
//   brelse(bp)
void log_write(struct buf* b) {
80104969:	55                   	push   %ebp
8010496a:	89 e5                	mov    %esp,%ebp
8010496c:	83 ec 18             	sub    $0x18,%esp
    int i;

    if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
8010496f:	a1 48 33 11 80       	mov    0x80113348,%eax
80104974:	83 f8 1d             	cmp    $0x1d,%eax
80104977:	7f 12                	jg     8010498b <log_write+0x22>
80104979:	a1 48 33 11 80       	mov    0x80113348,%eax
8010497e:	8b 15 38 33 11 80    	mov    0x80113338,%edx
80104984:	83 ea 01             	sub    $0x1,%edx
80104987:	39 d0                	cmp    %edx,%eax
80104989:	7c 0d                	jl     80104998 <log_write+0x2f>
        panic("too big a transaction");
8010498b:	83 ec 0c             	sub    $0xc,%esp
8010498e:	68 34 90 10 80       	push   $0x80109034
80104993:	e8 4b c7 ff ff       	call   801010e3 <panic>
    if (log.outstanding < 1) panic("log_write outside of trans");
80104998:	a1 3c 33 11 80       	mov    0x8011333c,%eax
8010499d:	85 c0                	test   %eax,%eax
8010499f:	7f 0d                	jg     801049ae <log_write+0x45>
801049a1:	83 ec 0c             	sub    $0xc,%esp
801049a4:	68 4a 90 10 80       	push   $0x8010904a
801049a9:	e8 35 c7 ff ff       	call   801010e3 <panic>

    acquire(&log.lock);
801049ae:	83 ec 0c             	sub    $0xc,%esp
801049b1:	68 00 33 11 80       	push   $0x80113300
801049b6:	e8 27 18 00 00       	call   801061e2 <acquire>
801049bb:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < log.lh.n; i++) {
801049be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801049c5:	eb 1d                	jmp    801049e4 <log_write+0x7b>
        if (log.lh.block[i] == b->blockno)  // log absorbtion
801049c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
801049ca:	83 c0 10             	add    $0x10,%eax
801049cd:	8b 04 85 0c 33 11 80 	mov    -0x7feeccf4(,%eax,4),%eax
801049d4:	89 c2                	mov    %eax,%edx
801049d6:	8b 45 08             	mov    0x8(%ebp),%eax
801049d9:	8b 40 08             	mov    0x8(%eax),%eax
801049dc:	39 c2                	cmp    %eax,%edx
801049de:	74 10                	je     801049f0 <log_write+0x87>
    for (i = 0; i < log.lh.n; i++) {
801049e0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
801049e4:	a1 48 33 11 80       	mov    0x80113348,%eax
801049e9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
801049ec:	7c d9                	jl     801049c7 <log_write+0x5e>
801049ee:	eb 01                	jmp    801049f1 <log_write+0x88>
            break;
801049f0:	90                   	nop
    }
    log.lh.block[i] = b->blockno;
801049f1:	8b 45 08             	mov    0x8(%ebp),%eax
801049f4:	8b 40 08             	mov    0x8(%eax),%eax
801049f7:	89 c2                	mov    %eax,%edx
801049f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
801049fc:	83 c0 10             	add    $0x10,%eax
801049ff:	89 14 85 0c 33 11 80 	mov    %edx,-0x7feeccf4(,%eax,4)
    if (i == log.lh.n) log.lh.n++;
80104a06:	a1 48 33 11 80       	mov    0x80113348,%eax
80104a0b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
80104a0e:	75 0d                	jne    80104a1d <log_write+0xb4>
80104a10:	a1 48 33 11 80       	mov    0x80113348,%eax
80104a15:	83 c0 01             	add    $0x1,%eax
80104a18:	a3 48 33 11 80       	mov    %eax,0x80113348
    b->flags |= B_DIRTY;  // prevent eviction
80104a1d:	8b 45 08             	mov    0x8(%ebp),%eax
80104a20:	8b 00                	mov    (%eax),%eax
80104a22:	83 c8 04             	or     $0x4,%eax
80104a25:	89 c2                	mov    %eax,%edx
80104a27:	8b 45 08             	mov    0x8(%ebp),%eax
80104a2a:	89 10                	mov    %edx,(%eax)
    release(&log.lock);
80104a2c:	83 ec 0c             	sub    $0xc,%esp
80104a2f:	68 00 33 11 80       	push   $0x80113300
80104a34:	e8 1c 18 00 00       	call   80106255 <release>
80104a39:	83 c4 10             	add    $0x10,%esp
}
80104a3c:	90                   	nop
80104a3d:	c9                   	leave  
80104a3e:	c3                   	ret    

80104a3f <main>:
extern char end[];  // first address after kernel loaded from ELF file

// Bootstrap processor starts running C code here.
// Allocate a real stack and switch to it, first
// doing some setup required for memory allocator to work.
int main(void) {
80104a3f:	8d 4c 24 04          	lea    0x4(%esp),%ecx
80104a43:	83 e4 f0             	and    $0xfffffff0,%esp
80104a46:	ff 71 fc             	push   -0x4(%ecx)
80104a49:	55                   	push   %ebp
80104a4a:	89 e5                	mov    %esp,%ebp
80104a4c:	51                   	push   %ecx
80104a4d:	83 ec 04             	sub    $0x4,%esp
    kinit1(end, P2V(4 * 1024 * 1024));  // phys page allocator
80104a50:	83 ec 08             	sub    $0x8,%esp
80104a53:	68 00 00 40 80       	push   $0x80400000
80104a58:	68 00 72 11 80       	push   $0x80117200
80104a5d:	e8 5d f2 ff ff       	call   80103cbf <kinit1>
80104a62:	83 c4 10             	add    $0x10,%esp
    kvmalloc();                         // kernel page table
80104a65:	e8 86 3b 00 00       	call   801085f0 <kvmalloc>
    mpinit();                           // detect other processors
80104a6a:	e8 d1 03 00 00       	call   80104e40 <mpinit>
    lapicinit();                        // interrupt controller
80104a6f:	e8 5b f6 ff ff       	call   801040cf <lapicinit>
    seginit();                          // segment descriptors
80104a74:	e8 62 36 00 00       	call   801080db <seginit>
    picinit();                          // disable pic
80104a79:	e8 29 05 00 00       	call   80104fa7 <picinit>
    ioapicinit();                       // another interrupt controller
80104a7e:	e8 57 f1 ff ff       	call   80103bda <ioapicinit>
    consoleinit();                      // console hardware
80104a83:	e8 1c cc ff ff       	call   801016a4 <consoleinit>
    uartinit();                         // serial port
80104a88:	e8 59 34 00 00       	call   80107ee6 <uartinit>
    pinit();                            // process table
80104a8d:	e8 4e 09 00 00       	call   801053e0 <pinit>
    tvinit();                           // trap vectors
80104a92:	e8 2f 30 00 00       	call   80107ac6 <tvinit>
    binit();                            // buffer cache
80104a97:	e8 42 c0 ff ff       	call   80100ade <binit>
    fileinit();                         // file table
80104a9c:	e8 be d0 ff ff       	call   80101b5f <fileinit>
    ideinit();                          // disk
80104aa1:	e8 0b ed ff ff       	call   801037b1 <ideinit>
    startothers();                      // start other processors
80104aa6:	e8 84 00 00 00       	call   80104b2f <startothers>
    kinit2(P2V(4 * 1024 * 1024),
80104aab:	83 ec 08             	sub    $0x8,%esp
80104aae:	68 00 00 00 8e       	push   $0x8e000000
80104ab3:	68 00 00 40 80       	push   $0x80400000
80104ab8:	e8 3b f2 ff ff       	call   80103cf8 <kinit2>
80104abd:	83 c4 10             	add    $0x10,%esp
           P2V(PHYSTOP));  // must come after startothers()
    userinit();            // first user process
80104ac0:	e8 f9 0a 00 00       	call   801055be <userinit>
    mpmain();              // finish this processor's setup
80104ac5:	e8 1a 00 00 00       	call   80104ae4 <mpmain>

80104aca <mpenter>:
}

// Other CPUs jump here from entryother.S.
static void mpenter(void) {
80104aca:	55                   	push   %ebp
80104acb:	89 e5                	mov    %esp,%ebp
80104acd:	83 ec 08             	sub    $0x8,%esp
    switchkvm();
80104ad0:	e8 33 3b 00 00       	call   80108608 <switchkvm>
    seginit();
80104ad5:	e8 01 36 00 00       	call   801080db <seginit>
    lapicinit();
80104ada:	e8 f0 f5 ff ff       	call   801040cf <lapicinit>
    mpmain();
80104adf:	e8 00 00 00 00       	call   80104ae4 <mpmain>

80104ae4 <mpmain>:
}

// Common CPU setup code.
static void mpmain(void) {
80104ae4:	55                   	push   %ebp
80104ae5:	89 e5                	mov    %esp,%ebp
80104ae7:	53                   	push   %ebx
80104ae8:	83 ec 14             	sub    $0x14,%esp
    cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
80104aeb:	e8 0e 09 00 00       	call   801053fe <cpuid>
80104af0:	89 c3                	mov    %eax,%ebx
80104af2:	e8 07 09 00 00       	call   801053fe <cpuid>
80104af7:	83 ec 04             	sub    $0x4,%esp
80104afa:	53                   	push   %ebx
80104afb:	50                   	push   %eax
80104afc:	68 65 90 10 80       	push   $0x80109065
80104b01:	e8 28 c4 ff ff       	call   80100f2e <cprintf>
80104b06:	83 c4 10             	add    $0x10,%esp
    idtinit();  // load idt register
80104b09:	e8 2e 31 00 00       	call   80107c3c <idtinit>
    atomic_store(&mycpu()->started,
80104b0e:	e8 06 09 00 00       	call   80105419 <mycpu>
80104b13:	05 a0 00 00 00       	add    $0xa0,%eax
80104b18:	89 45 f4             	mov    %eax,-0xc(%ebp)
80104b1b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
80104b22:	8b 55 f0             	mov    -0x10(%ebp),%edx
80104b25:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104b28:	87 10                	xchg   %edx,(%eax)
                 1);  // tell startothers() we're up -- atomically
    scheduler();      // start running processes
80104b2a:	e8 3e 10 00 00       	call   80105b6d <scheduler>

80104b2f <startothers>:
}

pde_t entrypgdir[];  // For entry.S

// Start the non-boot (AP) processors.
static void startothers(void) {
80104b2f:	55                   	push   %ebp
80104b30:	89 e5                	mov    %esp,%ebp
80104b32:	83 ec 28             	sub    $0x28,%esp
    char* stack;

    // Write entry code to unused memory at 0x7000.
    // The linker has placed the image of entryother.S in
    // _binary_entryother_start.
    code = P2V(0x7000);
80104b35:	c7 45 f0 00 70 00 80 	movl   $0x80007000,-0x10(%ebp)
    memmove(code, _binary_entryother_start, (uint) _binary_entryother_size);
80104b3c:	b8 8a 00 00 00       	mov    $0x8a,%eax
80104b41:	83 ec 04             	sub    $0x4,%esp
80104b44:	50                   	push   %eax
80104b45:	68 0c c1 10 80       	push   $0x8010c10c
80104b4a:	ff 75 f0             	push   -0x10(%ebp)
80104b4d:	e8 e4 19 00 00       	call   80106536 <memmove>
80104b52:	83 c4 10             	add    $0x10,%esp

    for (c = cpus; c < cpus + ncpu; c++) {
80104b55:	c7 45 f4 e0 33 11 80 	movl   $0x801133e0,-0xc(%ebp)
80104b5c:	e9 86 00 00 00       	jmp    80104be7 <startothers+0xb8>
        if (c == mycpu())  // We've started already.
80104b61:	e8 b3 08 00 00       	call   80105419 <mycpu>
80104b66:	39 45 f4             	cmp    %eax,-0xc(%ebp)
80104b69:	74 74                	je     80104bdf <startothers+0xb0>
            continue;

        // Tell entryother.S what stack to use, where to enter, and what
        // pgdir to use. We cannot use kpgdir yet, because the AP processor
        // is running in low  memory, so we use entrypgdir for the APs too.
        stack = kalloc();
80104b6b:	e8 84 f2 ff ff       	call   80103df4 <kalloc>
80104b70:	89 45 ec             	mov    %eax,-0x14(%ebp)
        *(void**) (code - 4) = stack + KSTACKSIZE;
80104b73:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104b76:	83 e8 04             	sub    $0x4,%eax
80104b79:	8b 55 ec             	mov    -0x14(%ebp),%edx
80104b7c:	81 c2 00 10 00 00    	add    $0x1000,%edx
80104b82:	89 10                	mov    %edx,(%eax)
        *(void (**)(void))(code - 8) = mpenter;
80104b84:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104b87:	83 e8 08             	sub    $0x8,%eax
80104b8a:	c7 00 ca 4a 10 80    	movl   $0x80104aca,(%eax)
        *(int**) (code - 12) = (void*) V2P(entrypgdir);
80104b90:	b8 00 b0 10 80       	mov    $0x8010b000,%eax
80104b95:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
80104b9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104b9e:	83 e8 0c             	sub    $0xc,%eax
80104ba1:	89 10                	mov    %edx,(%eax)

        lapicstartap(c->apicid, V2P(code));
80104ba3:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104ba6:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
80104bac:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104baf:	0f b6 00             	movzbl (%eax),%eax
80104bb2:	0f b6 c0             	movzbl %al,%eax
80104bb5:	83 ec 08             	sub    $0x8,%esp
80104bb8:	52                   	push   %edx
80104bb9:	50                   	push   %eax
80104bba:	e8 72 f6 ff ff       	call   80104231 <lapicstartap>
80104bbf:	83 c4 10             	add    $0x10,%esp

        // wait for cpu to finish mpmain()
        while (atomic_load(&c->started) == 0)
80104bc2:	90                   	nop
80104bc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104bc6:	05 a0 00 00 00       	add    $0xa0,%eax
80104bcb:	89 45 e8             	mov    %eax,-0x18(%ebp)
80104bce:	8b 45 e8             	mov    -0x18(%ebp),%eax
80104bd1:	8b 00                	mov    (%eax),%eax
80104bd3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80104bd6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80104bd9:	85 c0                	test   %eax,%eax
80104bdb:	74 e6                	je     80104bc3 <startothers+0x94>
80104bdd:	eb 01                	jmp    80104be0 <startothers+0xb1>
            continue;
80104bdf:	90                   	nop
    for (c = cpus; c < cpus + ncpu; c++) {
80104be0:	81 45 f4 b0 00 00 00 	addl   $0xb0,-0xc(%ebp)
80104be7:	a1 60 39 11 80       	mov    0x80113960,%eax
80104bec:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
80104bf2:	05 e0 33 11 80       	add    $0x801133e0,%eax
80104bf7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
80104bfa:	0f 82 61 ff ff ff    	jb     80104b61 <startothers+0x32>
            ;
    }
}
80104c00:	90                   	nop
80104c01:	90                   	nop
80104c02:	c9                   	leave  
80104c03:	c3                   	ret    

80104c04 <inb>:
{
80104c04:	55                   	push   %ebp
80104c05:	89 e5                	mov    %esp,%ebp
80104c07:	83 ec 14             	sub    $0x14,%esp
80104c0a:	8b 45 08             	mov    0x8(%ebp),%eax
80104c0d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ volatile("in %1,%0" : "=a" (data) : "d" (port));
80104c11:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
80104c15:	89 c2                	mov    %eax,%edx
80104c17:	ec                   	in     (%dx),%al
80104c18:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
80104c1b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
80104c1f:	c9                   	leave  
80104c20:	c3                   	ret    

80104c21 <outb>:
{
80104c21:	55                   	push   %ebp
80104c22:	89 e5                	mov    %esp,%ebp
80104c24:	83 ec 08             	sub    $0x8,%esp
80104c27:	8b 45 08             	mov    0x8(%ebp),%eax
80104c2a:	8b 55 0c             	mov    0xc(%ebp),%edx
80104c2d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
80104c31:	89 d0                	mov    %edx,%eax
80104c33:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ volatile("out %0,%1" : : "a" (data), "d" (port));
80104c36:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
80104c3a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
80104c3e:	ee                   	out    %al,(%dx)
}
80104c3f:	90                   	nop
80104c40:	c9                   	leave  
80104c41:	c3                   	ret    

80104c42 <sum>:

struct cpu cpus[NCPU];
int ncpu;
uchar ioapicid;

static uchar sum(uchar* addr, int len) {
80104c42:	55                   	push   %ebp
80104c43:	89 e5                	mov    %esp,%ebp
80104c45:	83 ec 10             	sub    $0x10,%esp
    int i, sum;

    sum = 0;
80104c48:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    for (i = 0; i < len; i++) sum += addr[i];
80104c4f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
80104c56:	eb 15                	jmp    80104c6d <sum+0x2b>
80104c58:	8b 55 fc             	mov    -0x4(%ebp),%edx
80104c5b:	8b 45 08             	mov    0x8(%ebp),%eax
80104c5e:	01 d0                	add    %edx,%eax
80104c60:	0f b6 00             	movzbl (%eax),%eax
80104c63:	0f b6 c0             	movzbl %al,%eax
80104c66:	01 45 f8             	add    %eax,-0x8(%ebp)
80104c69:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
80104c6d:	8b 45 fc             	mov    -0x4(%ebp),%eax
80104c70:	3b 45 0c             	cmp    0xc(%ebp),%eax
80104c73:	7c e3                	jl     80104c58 <sum+0x16>
    return sum;
80104c75:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
80104c78:	c9                   	leave  
80104c79:	c3                   	ret    

80104c7a <mpsearch1>:

// Look for an MP structure in the len bytes at addr.
static struct mp* mpsearch1(uint a, int len) {
80104c7a:	55                   	push   %ebp
80104c7b:	89 e5                	mov    %esp,%ebp
80104c7d:	83 ec 18             	sub    $0x18,%esp
    uchar *e, *p, *addr;

    addr = P2V(a);
80104c80:	8b 45 08             	mov    0x8(%ebp),%eax
80104c83:	05 00 00 00 80       	add    $0x80000000,%eax
80104c88:	89 45 f0             	mov    %eax,-0x10(%ebp)
    e = addr + len;
80104c8b:	8b 55 0c             	mov    0xc(%ebp),%edx
80104c8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104c91:	01 d0                	add    %edx,%eax
80104c93:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (p = addr; p < e; p += sizeof(struct mp))
80104c96:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104c99:	89 45 f4             	mov    %eax,-0xc(%ebp)
80104c9c:	eb 36                	jmp    80104cd4 <mpsearch1+0x5a>
        if (memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
80104c9e:	83 ec 04             	sub    $0x4,%esp
80104ca1:	6a 04                	push   $0x4
80104ca3:	68 7c 90 10 80       	push   $0x8010907c
80104ca8:	ff 75 f4             	push   -0xc(%ebp)
80104cab:	e8 2e 18 00 00       	call   801064de <memcmp>
80104cb0:	83 c4 10             	add    $0x10,%esp
80104cb3:	85 c0                	test   %eax,%eax
80104cb5:	75 19                	jne    80104cd0 <mpsearch1+0x56>
80104cb7:	83 ec 08             	sub    $0x8,%esp
80104cba:	6a 10                	push   $0x10
80104cbc:	ff 75 f4             	push   -0xc(%ebp)
80104cbf:	e8 7e ff ff ff       	call   80104c42 <sum>
80104cc4:	83 c4 10             	add    $0x10,%esp
80104cc7:	84 c0                	test   %al,%al
80104cc9:	75 05                	jne    80104cd0 <mpsearch1+0x56>
            return (struct mp*) p;
80104ccb:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104cce:	eb 11                	jmp    80104ce1 <mpsearch1+0x67>
    for (p = addr; p < e; p += sizeof(struct mp))
80104cd0:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
80104cd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104cd7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
80104cda:	72 c2                	jb     80104c9e <mpsearch1+0x24>
    return 0;
80104cdc:	b8 00 00 00 00       	mov    $0x0,%eax
}
80104ce1:	c9                   	leave  
80104ce2:	c3                   	ret    

80104ce3 <mpsearch>:
// Search for the MP Floating Pointer Structure, which according to the
// spec is in one of the following three locations:
// 1) in the first KB of the EBDA;
// 2) in the last KB of system base memory;
// 3) in the BIOS ROM between 0xE0000 and 0xFFFFF.
static struct mp* mpsearch(void) {
80104ce3:	55                   	push   %ebp
80104ce4:	89 e5                	mov    %esp,%ebp
80104ce6:	83 ec 18             	sub    $0x18,%esp
    uchar* bda;
    uint p;
    struct mp* mp;

    bda = (uchar*) P2V(0x400);
80104ce9:	c7 45 f4 00 04 00 80 	movl   $0x80000400,-0xc(%ebp)
    if ((p = ((bda[0x0F] << 8) | bda[0x0E]) << 4)) {
80104cf0:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104cf3:	83 c0 0f             	add    $0xf,%eax
80104cf6:	0f b6 00             	movzbl (%eax),%eax
80104cf9:	0f b6 c0             	movzbl %al,%eax
80104cfc:	c1 e0 08             	shl    $0x8,%eax
80104cff:	89 c2                	mov    %eax,%edx
80104d01:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104d04:	83 c0 0e             	add    $0xe,%eax
80104d07:	0f b6 00             	movzbl (%eax),%eax
80104d0a:	0f b6 c0             	movzbl %al,%eax
80104d0d:	09 d0                	or     %edx,%eax
80104d0f:	c1 e0 04             	shl    $0x4,%eax
80104d12:	89 45 f0             	mov    %eax,-0x10(%ebp)
80104d15:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80104d19:	74 21                	je     80104d3c <mpsearch+0x59>
        if ((mp = mpsearch1(p, 1024))) return mp;
80104d1b:	83 ec 08             	sub    $0x8,%esp
80104d1e:	68 00 04 00 00       	push   $0x400
80104d23:	ff 75 f0             	push   -0x10(%ebp)
80104d26:	e8 4f ff ff ff       	call   80104c7a <mpsearch1>
80104d2b:	83 c4 10             	add    $0x10,%esp
80104d2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
80104d31:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80104d35:	74 51                	je     80104d88 <mpsearch+0xa5>
80104d37:	8b 45 ec             	mov    -0x14(%ebp),%eax
80104d3a:	eb 61                	jmp    80104d9d <mpsearch+0xba>
    } else {
        p = ((bda[0x14] << 8) | bda[0x13]) * 1024;
80104d3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104d3f:	83 c0 14             	add    $0x14,%eax
80104d42:	0f b6 00             	movzbl (%eax),%eax
80104d45:	0f b6 c0             	movzbl %al,%eax
80104d48:	c1 e0 08             	shl    $0x8,%eax
80104d4b:	89 c2                	mov    %eax,%edx
80104d4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104d50:	83 c0 13             	add    $0x13,%eax
80104d53:	0f b6 00             	movzbl (%eax),%eax
80104d56:	0f b6 c0             	movzbl %al,%eax
80104d59:	09 d0                	or     %edx,%eax
80104d5b:	c1 e0 0a             	shl    $0xa,%eax
80104d5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if ((mp = mpsearch1(p - 1024, 1024))) return mp;
80104d61:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104d64:	2d 00 04 00 00       	sub    $0x400,%eax
80104d69:	83 ec 08             	sub    $0x8,%esp
80104d6c:	68 00 04 00 00       	push   $0x400
80104d71:	50                   	push   %eax
80104d72:	e8 03 ff ff ff       	call   80104c7a <mpsearch1>
80104d77:	83 c4 10             	add    $0x10,%esp
80104d7a:	89 45 ec             	mov    %eax,-0x14(%ebp)
80104d7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80104d81:	74 05                	je     80104d88 <mpsearch+0xa5>
80104d83:	8b 45 ec             	mov    -0x14(%ebp),%eax
80104d86:	eb 15                	jmp    80104d9d <mpsearch+0xba>
    }
    return mpsearch1(0xF0000, 0x10000);
80104d88:	83 ec 08             	sub    $0x8,%esp
80104d8b:	68 00 00 01 00       	push   $0x10000
80104d90:	68 00 00 0f 00       	push   $0xf0000
80104d95:	e8 e0 fe ff ff       	call   80104c7a <mpsearch1>
80104d9a:	83 c4 10             	add    $0x10,%esp
}
80104d9d:	c9                   	leave  
80104d9e:	c3                   	ret    

80104d9f <mpconfig>:
// Search for an MP configuration table.  For now,
// don't accept the default configurations (physaddr == 0).
// Check for correct signature, calculate the checksum and,
// if correct, check the version.
// To do: check extended table checksum.
static struct mpconf* mpconfig(struct mp** pmp) {
80104d9f:	55                   	push   %ebp
80104da0:	89 e5                	mov    %esp,%ebp
80104da2:	83 ec 18             	sub    $0x18,%esp
    struct mpconf* conf;
    struct mp* mp;

    if ((mp = mpsearch()) == 0 || mp->physaddr == 0) return 0;
80104da5:	e8 39 ff ff ff       	call   80104ce3 <mpsearch>
80104daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
80104dad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80104db1:	74 0a                	je     80104dbd <mpconfig+0x1e>
80104db3:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104db6:	8b 40 04             	mov    0x4(%eax),%eax
80104db9:	85 c0                	test   %eax,%eax
80104dbb:	75 07                	jne    80104dc4 <mpconfig+0x25>
80104dbd:	b8 00 00 00 00       	mov    $0x0,%eax
80104dc2:	eb 7a                	jmp    80104e3e <mpconfig+0x9f>
    conf = (struct mpconf*) P2V((uint) mp->physaddr);
80104dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104dc7:	8b 40 04             	mov    0x4(%eax),%eax
80104dca:	05 00 00 00 80       	add    $0x80000000,%eax
80104dcf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (memcmp(conf, "PCMP", 4) != 0) return 0;
80104dd2:	83 ec 04             	sub    $0x4,%esp
80104dd5:	6a 04                	push   $0x4
80104dd7:	68 81 90 10 80       	push   $0x80109081
80104ddc:	ff 75 f0             	push   -0x10(%ebp)
80104ddf:	e8 fa 16 00 00       	call   801064de <memcmp>
80104de4:	83 c4 10             	add    $0x10,%esp
80104de7:	85 c0                	test   %eax,%eax
80104de9:	74 07                	je     80104df2 <mpconfig+0x53>
80104deb:	b8 00 00 00 00       	mov    $0x0,%eax
80104df0:	eb 4c                	jmp    80104e3e <mpconfig+0x9f>
    if (conf->version != 1 && conf->version != 4) return 0;
80104df2:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104df5:	0f b6 40 06          	movzbl 0x6(%eax),%eax
80104df9:	3c 01                	cmp    $0x1,%al
80104dfb:	74 12                	je     80104e0f <mpconfig+0x70>
80104dfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104e00:	0f b6 40 06          	movzbl 0x6(%eax),%eax
80104e04:	3c 04                	cmp    $0x4,%al
80104e06:	74 07                	je     80104e0f <mpconfig+0x70>
80104e08:	b8 00 00 00 00       	mov    $0x0,%eax
80104e0d:	eb 2f                	jmp    80104e3e <mpconfig+0x9f>
    if (sum((uchar*) conf, conf->length) != 0) return 0;
80104e0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
80104e12:	0f b7 40 04          	movzwl 0x4(%eax),%eax
80104e16:	0f b7 c0             	movzwl %ax,%eax
80104e19:	83 ec 08             	sub    $0x8,%esp
80104e1c:	50                   	push   %eax
80104e1d:	ff 75 f0             	push   -0x10(%ebp)
80104e20:	e8 1d fe ff ff       	call   80104c42 <sum>
80104e25:	83 c4 10             	add    $0x10,%esp
80104e28:	84 c0                	test   %al,%al
80104e2a:	74 07                	je     80104e33 <mpconfig+0x94>
80104e2c:	b8 00 00 00 00       	mov    $0x0,%eax
80104e31:	eb 0b                	jmp    80104e3e <mpconfig+0x9f>
    *pmp = mp;
80104e33:	8b 45 08             	mov    0x8(%ebp),%eax
80104e36:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104e39:	89 10                	mov    %edx,(%eax)
    return conf;
80104e3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80104e3e:	c9                   	leave  
80104e3f:	c3                   	ret    

80104e40 <mpinit>:

void mpinit(void) {
80104e40:	55                   	push   %ebp
80104e41:	89 e5                	mov    %esp,%ebp
80104e43:	83 ec 28             	sub    $0x28,%esp
    struct mp* mp;
    struct mpconf* conf;
    struct mpproc* proc;
    struct mpioapic* ioapic;

    if ((conf = mpconfig(&mp)) == 0) panic("Expect to run on an SMP");
80104e46:	83 ec 0c             	sub    $0xc,%esp
80104e49:	8d 45 dc             	lea    -0x24(%ebp),%eax
80104e4c:	50                   	push   %eax
80104e4d:	e8 4d ff ff ff       	call   80104d9f <mpconfig>
80104e52:	83 c4 10             	add    $0x10,%esp
80104e55:	89 45 ec             	mov    %eax,-0x14(%ebp)
80104e58:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80104e5c:	75 0d                	jne    80104e6b <mpinit+0x2b>
80104e5e:	83 ec 0c             	sub    $0xc,%esp
80104e61:	68 86 90 10 80       	push   $0x80109086
80104e66:	e8 78 c2 ff ff       	call   801010e3 <panic>
    ismp = 1;
80104e6b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
    lapic = (uint*) conf->lapicaddr;
80104e72:	8b 45 ec             	mov    -0x14(%ebp),%eax
80104e75:	8b 40 24             	mov    0x24(%eax),%eax
80104e78:	a3 f0 32 11 80       	mov    %eax,0x801132f0
    for (p = (uchar*) (conf + 1), e = (uchar*) conf + conf->length; p < e;) {
80104e7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
80104e80:	83 c0 2c             	add    $0x2c,%eax
80104e83:	89 45 f4             	mov    %eax,-0xc(%ebp)
80104e86:	8b 45 ec             	mov    -0x14(%ebp),%eax
80104e89:	0f b7 40 04          	movzwl 0x4(%eax),%eax
80104e8d:	0f b7 d0             	movzwl %ax,%edx
80104e90:	8b 45 ec             	mov    -0x14(%ebp),%eax
80104e93:	01 d0                	add    %edx,%eax
80104e95:	89 45 e8             	mov    %eax,-0x18(%ebp)
80104e98:	e9 8c 00 00 00       	jmp    80104f29 <mpinit+0xe9>
        switch (*p) {
80104e9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104ea0:	0f b6 00             	movzbl (%eax),%eax
80104ea3:	0f b6 c0             	movzbl %al,%eax
80104ea6:	83 f8 04             	cmp    $0x4,%eax
80104ea9:	7f 76                	jg     80104f21 <mpinit+0xe1>
80104eab:	83 f8 03             	cmp    $0x3,%eax
80104eae:	7d 6b                	jge    80104f1b <mpinit+0xdb>
80104eb0:	83 f8 02             	cmp    $0x2,%eax
80104eb3:	74 4e                	je     80104f03 <mpinit+0xc3>
80104eb5:	83 f8 02             	cmp    $0x2,%eax
80104eb8:	7f 67                	jg     80104f21 <mpinit+0xe1>
80104eba:	85 c0                	test   %eax,%eax
80104ebc:	74 07                	je     80104ec5 <mpinit+0x85>
80104ebe:	83 f8 01             	cmp    $0x1,%eax
80104ec1:	74 58                	je     80104f1b <mpinit+0xdb>
80104ec3:	eb 5c                	jmp    80104f21 <mpinit+0xe1>
            case MPPROC:
                proc = (struct mpproc*) p;
80104ec5:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104ec8:	89 45 e0             	mov    %eax,-0x20(%ebp)
                if (ncpu < NCPU) {
80104ecb:	a1 60 39 11 80       	mov    0x80113960,%eax
80104ed0:	83 f8 07             	cmp    $0x7,%eax
80104ed3:	7f 28                	jg     80104efd <mpinit+0xbd>
                    cpus[ncpu].apicid =
80104ed5:	8b 15 60 39 11 80    	mov    0x80113960,%edx
                        proc->apicid;  // apicid may differ from ncpu
80104edb:	8b 45 e0             	mov    -0x20(%ebp),%eax
80104ede:	0f b6 40 01          	movzbl 0x1(%eax),%eax
                    cpus[ncpu].apicid =
80104ee2:	69 d2 b0 00 00 00    	imul   $0xb0,%edx,%edx
80104ee8:	81 c2 e0 33 11 80    	add    $0x801133e0,%edx
80104eee:	88 02                	mov    %al,(%edx)
                    ncpu++;
80104ef0:	a1 60 39 11 80       	mov    0x80113960,%eax
80104ef5:	83 c0 01             	add    $0x1,%eax
80104ef8:	a3 60 39 11 80       	mov    %eax,0x80113960
                }
                p += sizeof(struct mpproc);
80104efd:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
                continue;
80104f01:	eb 26                	jmp    80104f29 <mpinit+0xe9>
            case MPIOAPIC:
                ioapic = (struct mpioapic*) p;
80104f03:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104f06:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ioapicid = ioapic->apicno;
80104f09:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80104f0c:	0f b6 40 01          	movzbl 0x1(%eax),%eax
80104f10:	a2 64 39 11 80       	mov    %al,0x80113964
                p += sizeof(struct mpioapic);
80104f15:	83 45 f4 08          	addl   $0x8,-0xc(%ebp)
                continue;
80104f19:	eb 0e                	jmp    80104f29 <mpinit+0xe9>
            case MPBUS:
            case MPIOINTR:
            case MPLINTR:
                p += 8;
80104f1b:	83 45 f4 08          	addl   $0x8,-0xc(%ebp)
                continue;
80104f1f:	eb 08                	jmp    80104f29 <mpinit+0xe9>
            default:
                ismp = 0;
80104f21:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
                break;
80104f28:	90                   	nop
    for (p = (uchar*) (conf + 1), e = (uchar*) conf + conf->length; p < e;) {
80104f29:	8b 45 f4             	mov    -0xc(%ebp),%eax
80104f2c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
80104f2f:	0f 82 68 ff ff ff    	jb     80104e9d <mpinit+0x5d>
        }
    }
    if (!ismp) panic("Didn't find a suitable machine");
80104f35:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80104f39:	75 0d                	jne    80104f48 <mpinit+0x108>
80104f3b:	83 ec 0c             	sub    $0xc,%esp
80104f3e:	68 a0 90 10 80       	push   $0x801090a0
80104f43:	e8 9b c1 ff ff       	call   801010e3 <panic>

    if (mp->imcrp) {
80104f48:	8b 45 dc             	mov    -0x24(%ebp),%eax
80104f4b:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
80104f4f:	84 c0                	test   %al,%al
80104f51:	74 30                	je     80104f83 <mpinit+0x143>
        // Bochs doesn't support IMCR, so this doesn't run on Bochs.
        // But it would on real hardware.
        outb(0x22, 0x70);           // Select IMCR
80104f53:	83 ec 08             	sub    $0x8,%esp
80104f56:	6a 70                	push   $0x70
80104f58:	6a 22                	push   $0x22
80104f5a:	e8 c2 fc ff ff       	call   80104c21 <outb>
80104f5f:	83 c4 10             	add    $0x10,%esp
        outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
80104f62:	83 ec 0c             	sub    $0xc,%esp
80104f65:	6a 23                	push   $0x23
80104f67:	e8 98 fc ff ff       	call   80104c04 <inb>
80104f6c:	83 c4 10             	add    $0x10,%esp
80104f6f:	83 c8 01             	or     $0x1,%eax
80104f72:	0f b6 c0             	movzbl %al,%eax
80104f75:	83 ec 08             	sub    $0x8,%esp
80104f78:	50                   	push   %eax
80104f79:	6a 23                	push   $0x23
80104f7b:	e8 a1 fc ff ff       	call   80104c21 <outb>
80104f80:	83 c4 10             	add    $0x10,%esp
    }
}
80104f83:	90                   	nop
80104f84:	c9                   	leave  
80104f85:	c3                   	ret    

80104f86 <outb>:
{
80104f86:	55                   	push   %ebp
80104f87:	89 e5                	mov    %esp,%ebp
80104f89:	83 ec 08             	sub    $0x8,%esp
80104f8c:	8b 45 08             	mov    0x8(%ebp),%eax
80104f8f:	8b 55 0c             	mov    0xc(%ebp),%edx
80104f92:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
80104f96:	89 d0                	mov    %edx,%eax
80104f98:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ volatile("out %0,%1" : : "a" (data), "d" (port));
80104f9b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
80104f9f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
80104fa3:	ee                   	out    %al,(%dx)
}
80104fa4:	90                   	nop
80104fa5:	c9                   	leave  
80104fa6:	c3                   	ret    

80104fa7 <picinit>:
// I/O Addresses of the two programmable interrupt controllers
#define IO_PIC1 0x20  // Master (IRQs 0-7)
#define IO_PIC2 0xA0  // Slave (IRQs 8-15)

// Don't use the 8259A interrupt controllers.  Xv6 assumes SMP hardware.
void picinit(void) {
80104fa7:	55                   	push   %ebp
80104fa8:	89 e5                	mov    %esp,%ebp
    // mask all interrupts
    outb(IO_PIC1 + 1, 0xFF);
80104faa:	68 ff 00 00 00       	push   $0xff
80104faf:	6a 21                	push   $0x21
80104fb1:	e8 d0 ff ff ff       	call   80104f86 <outb>
80104fb6:	83 c4 08             	add    $0x8,%esp
    outb(IO_PIC2 + 1, 0xFF);
80104fb9:	68 ff 00 00 00       	push   $0xff
80104fbe:	68 a1 00 00 00       	push   $0xa1
80104fc3:	e8 be ff ff ff       	call   80104f86 <outb>
80104fc8:	83 c4 08             	add    $0x8,%esp
}
80104fcb:	90                   	nop
80104fcc:	c9                   	leave  
80104fcd:	c3                   	ret    

80104fce <pipealloc>:
    uint nwrite;    // number of bytes written
    int readopen;   // read fd is still open
    int writeopen;  // write fd is still open
};

int pipealloc(struct file** f0, struct file** f1) {
80104fce:	55                   	push   %ebp
80104fcf:	89 e5                	mov    %esp,%ebp
80104fd1:	83 ec 18             	sub    $0x18,%esp
    struct pipe* p;

    p = 0;
80104fd4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    *f0 = *f1 = 0;
80104fdb:	8b 45 0c             	mov    0xc(%ebp),%eax
80104fde:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
80104fe4:	8b 45 0c             	mov    0xc(%ebp),%eax
80104fe7:	8b 10                	mov    (%eax),%edx
80104fe9:	8b 45 08             	mov    0x8(%ebp),%eax
80104fec:	89 10                	mov    %edx,(%eax)
    if ((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0) goto bad;
80104fee:	e8 8a cb ff ff       	call   80101b7d <filealloc>
80104ff3:	8b 55 08             	mov    0x8(%ebp),%edx
80104ff6:	89 02                	mov    %eax,(%edx)
80104ff8:	8b 45 08             	mov    0x8(%ebp),%eax
80104ffb:	8b 00                	mov    (%eax),%eax
80104ffd:	85 c0                	test   %eax,%eax
80104fff:	0f 84 c8 00 00 00    	je     801050cd <pipealloc+0xff>
80105005:	e8 73 cb ff ff       	call   80101b7d <filealloc>
8010500a:	8b 55 0c             	mov    0xc(%ebp),%edx
8010500d:	89 02                	mov    %eax,(%edx)
8010500f:	8b 45 0c             	mov    0xc(%ebp),%eax
80105012:	8b 00                	mov    (%eax),%eax
80105014:	85 c0                	test   %eax,%eax
80105016:	0f 84 b1 00 00 00    	je     801050cd <pipealloc+0xff>
    if ((p = (struct pipe*) kalloc()) == 0) goto bad;
8010501c:	e8 d3 ed ff ff       	call   80103df4 <kalloc>
80105021:	89 45 f4             	mov    %eax,-0xc(%ebp)
80105024:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80105028:	0f 84 a2 00 00 00    	je     801050d0 <pipealloc+0x102>
    p->readopen = 1;
8010502e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105031:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
80105038:	00 00 00 
    p->writeopen = 1;
8010503b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010503e:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
80105045:	00 00 00 
    p->nwrite = 0;
80105048:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010504b:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
80105052:	00 00 00 
    p->nread = 0;
80105055:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105058:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
8010505f:	00 00 00 
    initlock(&p->lock, "pipe");
80105062:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105065:	83 ec 08             	sub    $0x8,%esp
80105068:	68 bf 90 10 80       	push   $0x801090bf
8010506d:	50                   	push   %eax
8010506e:	e8 3e 11 00 00       	call   801061b1 <initlock>
80105073:	83 c4 10             	add    $0x10,%esp
    (*f0)->type = FD_PIPE;
80105076:	8b 45 08             	mov    0x8(%ebp),%eax
80105079:	8b 00                	mov    (%eax),%eax
8010507b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    (*f0)->readable = 1;
80105081:	8b 45 08             	mov    0x8(%ebp),%eax
80105084:	8b 00                	mov    (%eax),%eax
80105086:	c6 40 08 01          	movb   $0x1,0x8(%eax)
    (*f0)->writable = 0;
8010508a:	8b 45 08             	mov    0x8(%ebp),%eax
8010508d:	8b 00                	mov    (%eax),%eax
8010508f:	c6 40 09 00          	movb   $0x0,0x9(%eax)
    (*f0)->pipe = p;
80105093:	8b 45 08             	mov    0x8(%ebp),%eax
80105096:	8b 00                	mov    (%eax),%eax
80105098:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010509b:	89 50 0c             	mov    %edx,0xc(%eax)
    (*f1)->type = FD_PIPE;
8010509e:	8b 45 0c             	mov    0xc(%ebp),%eax
801050a1:	8b 00                	mov    (%eax),%eax
801050a3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    (*f1)->readable = 0;
801050a9:	8b 45 0c             	mov    0xc(%ebp),%eax
801050ac:	8b 00                	mov    (%eax),%eax
801050ae:	c6 40 08 00          	movb   $0x0,0x8(%eax)
    (*f1)->writable = 1;
801050b2:	8b 45 0c             	mov    0xc(%ebp),%eax
801050b5:	8b 00                	mov    (%eax),%eax
801050b7:	c6 40 09 01          	movb   $0x1,0x9(%eax)
    (*f1)->pipe = p;
801050bb:	8b 45 0c             	mov    0xc(%ebp),%eax
801050be:	8b 00                	mov    (%eax),%eax
801050c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
801050c3:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
801050c6:	b8 00 00 00 00       	mov    $0x0,%eax
801050cb:	eb 51                	jmp    8010511e <pipealloc+0x150>
    if ((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0) goto bad;
801050cd:	90                   	nop
801050ce:	eb 01                	jmp    801050d1 <pipealloc+0x103>
    if ((p = (struct pipe*) kalloc()) == 0) goto bad;
801050d0:	90                   	nop

    //PAGEBREAK: 20
bad:
    if (p) kfree((char*) p);
801050d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801050d5:	74 0e                	je     801050e5 <pipealloc+0x117>
801050d7:	83 ec 0c             	sub    $0xc,%esp
801050da:	ff 75 f4             	push   -0xc(%ebp)
801050dd:	e8 78 ec ff ff       	call   80103d5a <kfree>
801050e2:	83 c4 10             	add    $0x10,%esp
    if (*f0) fileclose(*f0);
801050e5:	8b 45 08             	mov    0x8(%ebp),%eax
801050e8:	8b 00                	mov    (%eax),%eax
801050ea:	85 c0                	test   %eax,%eax
801050ec:	74 11                	je     801050ff <pipealloc+0x131>
801050ee:	8b 45 08             	mov    0x8(%ebp),%eax
801050f1:	8b 00                	mov    (%eax),%eax
801050f3:	83 ec 0c             	sub    $0xc,%esp
801050f6:	50                   	push   %eax
801050f7:	e8 3f cb ff ff       	call   80101c3b <fileclose>
801050fc:	83 c4 10             	add    $0x10,%esp
    if (*f1) fileclose(*f1);
801050ff:	8b 45 0c             	mov    0xc(%ebp),%eax
80105102:	8b 00                	mov    (%eax),%eax
80105104:	85 c0                	test   %eax,%eax
80105106:	74 11                	je     80105119 <pipealloc+0x14b>
80105108:	8b 45 0c             	mov    0xc(%ebp),%eax
8010510b:	8b 00                	mov    (%eax),%eax
8010510d:	83 ec 0c             	sub    $0xc,%esp
80105110:	50                   	push   %eax
80105111:	e8 25 cb ff ff       	call   80101c3b <fileclose>
80105116:	83 c4 10             	add    $0x10,%esp
    return -1;
80105119:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010511e:	c9                   	leave  
8010511f:	c3                   	ret    

80105120 <pipeclose>:

void pipeclose(struct pipe* p, int writable) {
80105120:	55                   	push   %ebp
80105121:	89 e5                	mov    %esp,%ebp
80105123:	83 ec 08             	sub    $0x8,%esp
    acquire(&p->lock);
80105126:	8b 45 08             	mov    0x8(%ebp),%eax
80105129:	83 ec 0c             	sub    $0xc,%esp
8010512c:	50                   	push   %eax
8010512d:	e8 b0 10 00 00       	call   801061e2 <acquire>
80105132:	83 c4 10             	add    $0x10,%esp
    if (writable) {
80105135:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
80105139:	74 23                	je     8010515e <pipeclose+0x3e>
        p->writeopen = 0;
8010513b:	8b 45 08             	mov    0x8(%ebp),%eax
8010513e:	c7 80 40 02 00 00 00 	movl   $0x0,0x240(%eax)
80105145:	00 00 00 
        wakeup(&p->nread);
80105148:	8b 45 08             	mov    0x8(%ebp),%eax
8010514b:	05 34 02 00 00       	add    $0x234,%eax
80105150:	83 ec 0c             	sub    $0xc,%esp
80105153:	50                   	push   %eax
80105154:	e8 ec 0c 00 00       	call   80105e45 <wakeup>
80105159:	83 c4 10             	add    $0x10,%esp
8010515c:	eb 21                	jmp    8010517f <pipeclose+0x5f>
    } else {
        p->readopen = 0;
8010515e:	8b 45 08             	mov    0x8(%ebp),%eax
80105161:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%eax)
80105168:	00 00 00 
        wakeup(&p->nwrite);
8010516b:	8b 45 08             	mov    0x8(%ebp),%eax
8010516e:	05 38 02 00 00       	add    $0x238,%eax
80105173:	83 ec 0c             	sub    $0xc,%esp
80105176:	50                   	push   %eax
80105177:	e8 c9 0c 00 00       	call   80105e45 <wakeup>
8010517c:	83 c4 10             	add    $0x10,%esp
    }
    if (p->readopen == 0 && p->writeopen == 0) {
8010517f:	8b 45 08             	mov    0x8(%ebp),%eax
80105182:	8b 80 3c 02 00 00    	mov    0x23c(%eax),%eax
80105188:	85 c0                	test   %eax,%eax
8010518a:	75 2c                	jne    801051b8 <pipeclose+0x98>
8010518c:	8b 45 08             	mov    0x8(%ebp),%eax
8010518f:	8b 80 40 02 00 00    	mov    0x240(%eax),%eax
80105195:	85 c0                	test   %eax,%eax
80105197:	75 1f                	jne    801051b8 <pipeclose+0x98>
        release(&p->lock);
80105199:	8b 45 08             	mov    0x8(%ebp),%eax
8010519c:	83 ec 0c             	sub    $0xc,%esp
8010519f:	50                   	push   %eax
801051a0:	e8 b0 10 00 00       	call   80106255 <release>
801051a5:	83 c4 10             	add    $0x10,%esp
        kfree((char*) p);
801051a8:	83 ec 0c             	sub    $0xc,%esp
801051ab:	ff 75 08             	push   0x8(%ebp)
801051ae:	e8 a7 eb ff ff       	call   80103d5a <kfree>
801051b3:	83 c4 10             	add    $0x10,%esp
801051b6:	eb 10                	jmp    801051c8 <pipeclose+0xa8>
    } else
        release(&p->lock);
801051b8:	8b 45 08             	mov    0x8(%ebp),%eax
801051bb:	83 ec 0c             	sub    $0xc,%esp
801051be:	50                   	push   %eax
801051bf:	e8 91 10 00 00       	call   80106255 <release>
801051c4:	83 c4 10             	add    $0x10,%esp
}
801051c7:	90                   	nop
801051c8:	90                   	nop
801051c9:	c9                   	leave  
801051ca:	c3                   	ret    

801051cb <pipewrite>:

//PAGEBREAK: 40
int pipewrite(struct pipe* p, char* addr, int n) {
801051cb:	55                   	push   %ebp
801051cc:	89 e5                	mov    %esp,%ebp
801051ce:	53                   	push   %ebx
801051cf:	83 ec 14             	sub    $0x14,%esp
    int i;

    acquire(&p->lock);
801051d2:	8b 45 08             	mov    0x8(%ebp),%eax
801051d5:	83 ec 0c             	sub    $0xc,%esp
801051d8:	50                   	push   %eax
801051d9:	e8 04 10 00 00       	call   801061e2 <acquire>
801051de:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < n; i++) {
801051e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
801051e8:	e9 ad 00 00 00       	jmp    8010529a <pipewrite+0xcf>
        while (p->nwrite == p->nread + PIPESIZE) {  //DOC: pipewrite-full
            if (p->readopen == 0 || myproc()->killed) {
801051ed:	8b 45 08             	mov    0x8(%ebp),%eax
801051f0:	8b 80 3c 02 00 00    	mov    0x23c(%eax),%eax
801051f6:	85 c0                	test   %eax,%eax
801051f8:	74 0c                	je     80105206 <pipewrite+0x3b>
801051fa:	e8 92 02 00 00       	call   80105491 <myproc>
801051ff:	8b 40 24             	mov    0x24(%eax),%eax
80105202:	85 c0                	test   %eax,%eax
80105204:	74 19                	je     8010521f <pipewrite+0x54>
                release(&p->lock);
80105206:	8b 45 08             	mov    0x8(%ebp),%eax
80105209:	83 ec 0c             	sub    $0xc,%esp
8010520c:	50                   	push   %eax
8010520d:	e8 43 10 00 00       	call   80106255 <release>
80105212:	83 c4 10             	add    $0x10,%esp
                return -1;
80105215:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010521a:	e9 a9 00 00 00       	jmp    801052c8 <pipewrite+0xfd>
            }
            wakeup(&p->nread);
8010521f:	8b 45 08             	mov    0x8(%ebp),%eax
80105222:	05 34 02 00 00       	add    $0x234,%eax
80105227:	83 ec 0c             	sub    $0xc,%esp
8010522a:	50                   	push   %eax
8010522b:	e8 15 0c 00 00       	call   80105e45 <wakeup>
80105230:	83 c4 10             	add    $0x10,%esp
            sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
80105233:	8b 45 08             	mov    0x8(%ebp),%eax
80105236:	8b 55 08             	mov    0x8(%ebp),%edx
80105239:	81 c2 38 02 00 00    	add    $0x238,%edx
8010523f:	83 ec 08             	sub    $0x8,%esp
80105242:	50                   	push   %eax
80105243:	52                   	push   %edx
80105244:	e8 15 0b 00 00       	call   80105d5e <sleep>
80105249:	83 c4 10             	add    $0x10,%esp
        while (p->nwrite == p->nread + PIPESIZE) {  //DOC: pipewrite-full
8010524c:	8b 45 08             	mov    0x8(%ebp),%eax
8010524f:	8b 90 38 02 00 00    	mov    0x238(%eax),%edx
80105255:	8b 45 08             	mov    0x8(%ebp),%eax
80105258:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
8010525e:	05 00 02 00 00       	add    $0x200,%eax
80105263:	39 c2                	cmp    %eax,%edx
80105265:	74 86                	je     801051ed <pipewrite+0x22>
        }
        p->data[p->nwrite++ % PIPESIZE] = addr[i];
80105267:	8b 55 f4             	mov    -0xc(%ebp),%edx
8010526a:	8b 45 0c             	mov    0xc(%ebp),%eax
8010526d:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
80105270:	8b 45 08             	mov    0x8(%ebp),%eax
80105273:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
80105279:	8d 48 01             	lea    0x1(%eax),%ecx
8010527c:	8b 55 08             	mov    0x8(%ebp),%edx
8010527f:	89 8a 38 02 00 00    	mov    %ecx,0x238(%edx)
80105285:	25 ff 01 00 00       	and    $0x1ff,%eax
8010528a:	89 c1                	mov    %eax,%ecx
8010528c:	0f b6 13             	movzbl (%ebx),%edx
8010528f:	8b 45 08             	mov    0x8(%ebp),%eax
80105292:	88 54 08 34          	mov    %dl,0x34(%eax,%ecx,1)
    for (i = 0; i < n; i++) {
80105296:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8010529a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010529d:	3b 45 10             	cmp    0x10(%ebp),%eax
801052a0:	7c aa                	jl     8010524c <pipewrite+0x81>
    }
    wakeup(&p->nread);  //DOC: pipewrite-wakeup1
801052a2:	8b 45 08             	mov    0x8(%ebp),%eax
801052a5:	05 34 02 00 00       	add    $0x234,%eax
801052aa:	83 ec 0c             	sub    $0xc,%esp
801052ad:	50                   	push   %eax
801052ae:	e8 92 0b 00 00       	call   80105e45 <wakeup>
801052b3:	83 c4 10             	add    $0x10,%esp
    release(&p->lock);
801052b6:	8b 45 08             	mov    0x8(%ebp),%eax
801052b9:	83 ec 0c             	sub    $0xc,%esp
801052bc:	50                   	push   %eax
801052bd:	e8 93 0f 00 00       	call   80106255 <release>
801052c2:	83 c4 10             	add    $0x10,%esp
    return n;
801052c5:	8b 45 10             	mov    0x10(%ebp),%eax
}
801052c8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801052cb:	c9                   	leave  
801052cc:	c3                   	ret    

801052cd <piperead>:

int piperead(struct pipe* p, char* addr, int n) {
801052cd:	55                   	push   %ebp
801052ce:	89 e5                	mov    %esp,%ebp
801052d0:	83 ec 18             	sub    $0x18,%esp
    int i;

    acquire(&p->lock);
801052d3:	8b 45 08             	mov    0x8(%ebp),%eax
801052d6:	83 ec 0c             	sub    $0xc,%esp
801052d9:	50                   	push   %eax
801052da:	e8 03 0f 00 00       	call   801061e2 <acquire>
801052df:	83 c4 10             	add    $0x10,%esp
    while (p->nread == p->nwrite && p->writeopen) {  //DOC: pipe-empty
801052e2:	eb 3e                	jmp    80105322 <piperead+0x55>
        if (myproc()->killed) {
801052e4:	e8 a8 01 00 00       	call   80105491 <myproc>
801052e9:	8b 40 24             	mov    0x24(%eax),%eax
801052ec:	85 c0                	test   %eax,%eax
801052ee:	74 19                	je     80105309 <piperead+0x3c>
            release(&p->lock);
801052f0:	8b 45 08             	mov    0x8(%ebp),%eax
801052f3:	83 ec 0c             	sub    $0xc,%esp
801052f6:	50                   	push   %eax
801052f7:	e8 59 0f 00 00       	call   80106255 <release>
801052fc:	83 c4 10             	add    $0x10,%esp
            return -1;
801052ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105304:	e9 be 00 00 00       	jmp    801053c7 <piperead+0xfa>
        }
        sleep(&p->nread, &p->lock);  //DOC: piperead-sleep
80105309:	8b 45 08             	mov    0x8(%ebp),%eax
8010530c:	8b 55 08             	mov    0x8(%ebp),%edx
8010530f:	81 c2 34 02 00 00    	add    $0x234,%edx
80105315:	83 ec 08             	sub    $0x8,%esp
80105318:	50                   	push   %eax
80105319:	52                   	push   %edx
8010531a:	e8 3f 0a 00 00       	call   80105d5e <sleep>
8010531f:	83 c4 10             	add    $0x10,%esp
    while (p->nread == p->nwrite && p->writeopen) {  //DOC: pipe-empty
80105322:	8b 45 08             	mov    0x8(%ebp),%eax
80105325:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
8010532b:	8b 45 08             	mov    0x8(%ebp),%eax
8010532e:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
80105334:	39 c2                	cmp    %eax,%edx
80105336:	75 0d                	jne    80105345 <piperead+0x78>
80105338:	8b 45 08             	mov    0x8(%ebp),%eax
8010533b:	8b 80 40 02 00 00    	mov    0x240(%eax),%eax
80105341:	85 c0                	test   %eax,%eax
80105343:	75 9f                	jne    801052e4 <piperead+0x17>
    }
    for (i = 0; i < n; i++) {  //DOC: piperead-copy
80105345:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8010534c:	eb 48                	jmp    80105396 <piperead+0xc9>
        if (p->nread == p->nwrite) break;
8010534e:	8b 45 08             	mov    0x8(%ebp),%eax
80105351:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
80105357:	8b 45 08             	mov    0x8(%ebp),%eax
8010535a:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
80105360:	39 c2                	cmp    %eax,%edx
80105362:	74 3c                	je     801053a0 <piperead+0xd3>
        addr[i] = p->data[p->nread++ % PIPESIZE];
80105364:	8b 45 08             	mov    0x8(%ebp),%eax
80105367:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
8010536d:	8d 48 01             	lea    0x1(%eax),%ecx
80105370:	8b 55 08             	mov    0x8(%ebp),%edx
80105373:	89 8a 34 02 00 00    	mov    %ecx,0x234(%edx)
80105379:	25 ff 01 00 00       	and    $0x1ff,%eax
8010537e:	89 c1                	mov    %eax,%ecx
80105380:	8b 55 f4             	mov    -0xc(%ebp),%edx
80105383:	8b 45 0c             	mov    0xc(%ebp),%eax
80105386:	01 c2                	add    %eax,%edx
80105388:	8b 45 08             	mov    0x8(%ebp),%eax
8010538b:	0f b6 44 08 34       	movzbl 0x34(%eax,%ecx,1),%eax
80105390:	88 02                	mov    %al,(%edx)
    for (i = 0; i < n; i++) {  //DOC: piperead-copy
80105392:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80105396:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105399:	3b 45 10             	cmp    0x10(%ebp),%eax
8010539c:	7c b0                	jl     8010534e <piperead+0x81>
8010539e:	eb 01                	jmp    801053a1 <piperead+0xd4>
        if (p->nread == p->nwrite) break;
801053a0:	90                   	nop
    }
    wakeup(&p->nwrite);  //DOC: piperead-wakeup
801053a1:	8b 45 08             	mov    0x8(%ebp),%eax
801053a4:	05 38 02 00 00       	add    $0x238,%eax
801053a9:	83 ec 0c             	sub    $0xc,%esp
801053ac:	50                   	push   %eax
801053ad:	e8 93 0a 00 00       	call   80105e45 <wakeup>
801053b2:	83 c4 10             	add    $0x10,%esp
    release(&p->lock);
801053b5:	8b 45 08             	mov    0x8(%ebp),%eax
801053b8:	83 ec 0c             	sub    $0xc,%esp
801053bb:	50                   	push   %eax
801053bc:	e8 94 0e 00 00       	call   80106255 <release>
801053c1:	83 c4 10             	add    $0x10,%esp
    return i;
801053c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
801053c7:	c9                   	leave  
801053c8:	c3                   	ret    

801053c9 <readeflags>:
{
801053c9:	55                   	push   %ebp
801053ca:	89 e5                	mov    %esp,%ebp
801053cc:	83 ec 10             	sub    $0x10,%esp
  __asm__ volatile("pushfl; popl %0" : "=r" (eflags));
801053cf:	9c                   	pushf  
801053d0:	58                   	pop    %eax
801053d1:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return eflags;
801053d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
801053d7:	c9                   	leave  
801053d8:	c3                   	ret    

801053d9 <sti>:

static inline void
sti(void)
{
801053d9:	55                   	push   %ebp
801053da:	89 e5                	mov    %esp,%ebp
  __asm__ volatile("sti");
801053dc:	fb                   	sti    
}
801053dd:	90                   	nop
801053de:	5d                   	pop    %ebp
801053df:	c3                   	ret    

801053e0 <pinit>:
extern void forkret(void);
extern void trapret(void);

static void wakeup1(void* chan);

void pinit(void) { initlock(&ptable.lock, "ptable"); }
801053e0:	55                   	push   %ebp
801053e1:	89 e5                	mov    %esp,%ebp
801053e3:	83 ec 08             	sub    $0x8,%esp
801053e6:	83 ec 08             	sub    $0x8,%esp
801053e9:	68 c4 90 10 80       	push   $0x801090c4
801053ee:	68 80 39 11 80       	push   $0x80113980
801053f3:	e8 b9 0d 00 00       	call   801061b1 <initlock>
801053f8:	83 c4 10             	add    $0x10,%esp
801053fb:	90                   	nop
801053fc:	c9                   	leave  
801053fd:	c3                   	ret    

801053fe <cpuid>:

// Must be called with interrupts disabled
int cpuid() { return mycpu() - cpus; }
801053fe:	55                   	push   %ebp
801053ff:	89 e5                	mov    %esp,%ebp
80105401:	83 ec 08             	sub    $0x8,%esp
80105404:	e8 10 00 00 00       	call   80105419 <mycpu>
80105409:	2d e0 33 11 80       	sub    $0x801133e0,%eax
8010540e:	c1 f8 04             	sar    $0x4,%eax
80105411:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
80105417:	c9                   	leave  
80105418:	c3                   	ret    

80105419 <mycpu>:

// Must be called with interrupts disabled to avoid the caller being
// rescheduled between reading lapicid and running through the loop.
struct cpu* mycpu(void) {
80105419:	55                   	push   %ebp
8010541a:	89 e5                	mov    %esp,%ebp
8010541c:	83 ec 18             	sub    $0x18,%esp
    int apicid, i;

    if (readeflags() & FL_IF) panic("mycpu called with interrupts enabled\n");
8010541f:	e8 a5 ff ff ff       	call   801053c9 <readeflags>
80105424:	25 00 02 00 00       	and    $0x200,%eax
80105429:	85 c0                	test   %eax,%eax
8010542b:	74 0d                	je     8010543a <mycpu+0x21>
8010542d:	83 ec 0c             	sub    $0xc,%esp
80105430:	68 cc 90 10 80       	push   $0x801090cc
80105435:	e8 a9 bc ff ff       	call   801010e3 <panic>

    apicid = lapicid();
8010543a:	e8 af ed ff ff       	call   801041ee <lapicid>
8010543f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // APIC IDs are not guaranteed to be contiguous. Maybe we should have
    // a reverse map, or reserve a register to store &cpus[i].
    for (i = 0; i < ncpu; ++i) {
80105442:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80105449:	eb 2d                	jmp    80105478 <mycpu+0x5f>
        if (cpus[i].apicid == apicid) return &cpus[i];
8010544b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010544e:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
80105454:	05 e0 33 11 80       	add    $0x801133e0,%eax
80105459:	0f b6 00             	movzbl (%eax),%eax
8010545c:	0f b6 c0             	movzbl %al,%eax
8010545f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
80105462:	75 10                	jne    80105474 <mycpu+0x5b>
80105464:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105467:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
8010546d:	05 e0 33 11 80       	add    $0x801133e0,%eax
80105472:	eb 1b                	jmp    8010548f <mycpu+0x76>
    for (i = 0; i < ncpu; ++i) {
80105474:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80105478:	a1 60 39 11 80       	mov    0x80113960,%eax
8010547d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
80105480:	7c c9                	jl     8010544b <mycpu+0x32>
    }
    panic("unknown apicid\n");
80105482:	83 ec 0c             	sub    $0xc,%esp
80105485:	68 f2 90 10 80       	push   $0x801090f2
8010548a:	e8 54 bc ff ff       	call   801010e3 <panic>
}
8010548f:	c9                   	leave  
80105490:	c3                   	ret    

80105491 <myproc>:

// Disable interrupts so that we are not rescheduled
// while reading proc from the cpu structure
struct proc* myproc(void) {
80105491:	55                   	push   %ebp
80105492:	89 e5                	mov    %esp,%ebp
80105494:	83 ec 18             	sub    $0x18,%esp
    struct cpu* c;
    struct proc* p;
    pushcli();
80105497:	e8 d0 0e 00 00       	call   8010636c <pushcli>

    c = mycpu();
8010549c:	e8 78 ff ff ff       	call   80105419 <mycpu>
801054a1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    p = c->proc;
801054a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
801054a7:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
801054ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
    popcli();
801054b0:	e8 04 0f 00 00       	call   801063b9 <popcli>

    return p;
801054b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
801054b8:	c9                   	leave  
801054b9:	c3                   	ret    

801054ba <allocproc>:
//PAGEBREAK: 32
// Look in the process table for an UNUSED proc.
// If found, change state to EMBRYO and initialize
// state required to run in the kernel.
// Otherwise return 0.
static struct proc* allocproc(void) {
801054ba:	55                   	push   %ebp
801054bb:	89 e5                	mov    %esp,%ebp
801054bd:	83 ec 18             	sub    $0x18,%esp
    struct proc* p;
    char* sp;

    acquire(&ptable.lock);
801054c0:	83 ec 0c             	sub    $0xc,%esp
801054c3:	68 80 39 11 80       	push   $0x80113980
801054c8:	e8 15 0d 00 00       	call   801061e2 <acquire>
801054cd:	83 c4 10             	add    $0x10,%esp

    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
801054d0:	c7 45 f4 b4 39 11 80 	movl   $0x801139b4,-0xc(%ebp)
801054d7:	eb 0e                	jmp    801054e7 <allocproc+0x2d>
        if (p->state == UNUSED) goto found;
801054d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
801054dc:	8b 40 0c             	mov    0xc(%eax),%eax
801054df:	85 c0                	test   %eax,%eax
801054e1:	74 27                	je     8010550a <allocproc+0x50>
    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
801054e3:	83 6d f4 80          	subl   $0xffffff80,-0xc(%ebp)
801054e7:	81 7d f4 b4 59 11 80 	cmpl   $0x801159b4,-0xc(%ebp)
801054ee:	72 e9                	jb     801054d9 <allocproc+0x1f>

    release(&ptable.lock);
801054f0:	83 ec 0c             	sub    $0xc,%esp
801054f3:	68 80 39 11 80       	push   $0x80113980
801054f8:	e8 58 0d 00 00       	call   80106255 <release>
801054fd:	83 c4 10             	add    $0x10,%esp
    return 0;
80105500:	b8 00 00 00 00       	mov    $0x0,%eax
80105505:	e9 b2 00 00 00       	jmp    801055bc <allocproc+0x102>
        if (p->state == UNUSED) goto found;
8010550a:	90                   	nop

found:
    p->state = EMBRYO;
8010550b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010550e:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
    p->pid = nextpid++;
80105515:	a1 00 c0 10 80       	mov    0x8010c000,%eax
8010551a:	8d 50 01             	lea    0x1(%eax),%edx
8010551d:	89 15 00 c0 10 80    	mov    %edx,0x8010c000
80105523:	8b 55 f4             	mov    -0xc(%ebp),%edx
80105526:	89 42 10             	mov    %eax,0x10(%edx)

    release(&ptable.lock);
80105529:	83 ec 0c             	sub    $0xc,%esp
8010552c:	68 80 39 11 80       	push   $0x80113980
80105531:	e8 1f 0d 00 00       	call   80106255 <release>
80105536:	83 c4 10             	add    $0x10,%esp

    // Allocate kernel stack.
    if ((p->kstack = kalloc()) == 0) {
80105539:	e8 b6 e8 ff ff       	call   80103df4 <kalloc>
8010553e:	8b 55 f4             	mov    -0xc(%ebp),%edx
80105541:	89 42 08             	mov    %eax,0x8(%edx)
80105544:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105547:	8b 40 08             	mov    0x8(%eax),%eax
8010554a:	85 c0                	test   %eax,%eax
8010554c:	75 11                	jne    8010555f <allocproc+0xa5>
        p->state = UNUSED;
8010554e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105551:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        return 0;
80105558:	b8 00 00 00 00       	mov    $0x0,%eax
8010555d:	eb 5d                	jmp    801055bc <allocproc+0x102>
    }
    sp = p->kstack + KSTACKSIZE;
8010555f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105562:	8b 40 08             	mov    0x8(%eax),%eax
80105565:	05 00 10 00 00       	add    $0x1000,%eax
8010556a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // Leave room for trap frame.
    sp -= sizeof *p->tf;
8010556d:	83 6d f0 4c          	subl   $0x4c,-0x10(%ebp)
    p->tf = (struct trapframe*) sp;
80105571:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105574:	8b 55 f0             	mov    -0x10(%ebp),%edx
80105577:	89 50 18             	mov    %edx,0x18(%eax)

    // Set up new context to start executing at forkret,
    // which returns to trapret.
    sp -= 4;
8010557a:	83 6d f0 04          	subl   $0x4,-0x10(%ebp)
    *(uint*) sp = (uint) trapret;
8010557e:	ba 61 00 10 80       	mov    $0x80100061,%edx
80105583:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105586:	89 10                	mov    %edx,(%eax)

    sp -= sizeof *p->context;
80105588:	83 6d f0 14          	subl   $0x14,-0x10(%ebp)
    p->context = (struct context*) sp;
8010558c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010558f:	8b 55 f0             	mov    -0x10(%ebp),%edx
80105592:	89 50 1c             	mov    %edx,0x1c(%eax)
    memset(p->context, 0, sizeof *p->context);
80105595:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105598:	8b 40 1c             	mov    0x1c(%eax),%eax
8010559b:	83 ec 04             	sub    $0x4,%esp
8010559e:	6a 14                	push   $0x14
801055a0:	6a 00                	push   $0x0
801055a2:	50                   	push   %eax
801055a3:	e8 cf 0e 00 00       	call   80106477 <memset>
801055a8:	83 c4 10             	add    $0x10,%esp
    p->context->eip = (uint) forkret;
801055ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
801055ae:	8b 40 1c             	mov    0x1c(%eax),%eax
801055b1:	ba 18 5d 10 80       	mov    $0x80105d18,%edx
801055b6:	89 50 10             	mov    %edx,0x10(%eax)

    return p;
801055b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
801055bc:	c9                   	leave  
801055bd:	c3                   	ret    

801055be <userinit>:

//PAGEBREAK: 32
// Set up first user process.
void userinit(void) {
801055be:	55                   	push   %ebp
801055bf:	89 e5                	mov    %esp,%ebp
801055c1:	83 ec 18             	sub    $0x18,%esp
    struct proc* p;
    extern char _binary_initcode_start[], _binary_initcode_size[];

    p = allocproc();
801055c4:	e8 f1 fe ff ff       	call   801054ba <allocproc>
801055c9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    initproc = p;
801055cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
801055cf:	a3 b4 59 11 80       	mov    %eax,0x801159b4
    if ((p->pgdir = setupkvm()) == 0) panic("userinit: out of memory?");
801055d4:	e8 7e 2f 00 00       	call   80108557 <setupkvm>
801055d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
801055dc:	89 42 04             	mov    %eax,0x4(%edx)
801055df:	8b 45 f4             	mov    -0xc(%ebp),%eax
801055e2:	8b 40 04             	mov    0x4(%eax),%eax
801055e5:	85 c0                	test   %eax,%eax
801055e7:	75 0d                	jne    801055f6 <userinit+0x38>
801055e9:	83 ec 0c             	sub    $0xc,%esp
801055ec:	68 02 91 10 80       	push   $0x80109102
801055f1:	e8 ed ba ff ff       	call   801010e3 <panic>
    inituvm(p->pgdir, _binary_initcode_start, (int) _binary_initcode_size);
801055f6:	ba 2c 00 00 00       	mov    $0x2c,%edx
801055fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
801055fe:	8b 40 04             	mov    0x4(%eax),%eax
80105601:	83 ec 04             	sub    $0x4,%esp
80105604:	52                   	push   %edx
80105605:	68 e0 c0 10 80       	push   $0x8010c0e0
8010560a:	50                   	push   %eax
8010560b:	e8 b0 31 00 00       	call   801087c0 <inituvm>
80105610:	83 c4 10             	add    $0x10,%esp
    p->sz = PGSIZE;
80105613:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105616:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
    memset(p->tf, 0, sizeof(*p->tf));
8010561c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010561f:	8b 40 18             	mov    0x18(%eax),%eax
80105622:	83 ec 04             	sub    $0x4,%esp
80105625:	6a 4c                	push   $0x4c
80105627:	6a 00                	push   $0x0
80105629:	50                   	push   %eax
8010562a:	e8 48 0e 00 00       	call   80106477 <memset>
8010562f:	83 c4 10             	add    $0x10,%esp
    p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
80105632:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105635:	8b 40 18             	mov    0x18(%eax),%eax
80105638:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
8010563e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105641:	8b 40 18             	mov    0x18(%eax),%eax
80105644:	66 c7 40 2c 23 00    	movw   $0x23,0x2c(%eax)
    p->tf->es = p->tf->ds;
8010564a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010564d:	8b 50 18             	mov    0x18(%eax),%edx
80105650:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105653:	8b 40 18             	mov    0x18(%eax),%eax
80105656:	0f b7 52 2c          	movzwl 0x2c(%edx),%edx
8010565a:	66 89 50 28          	mov    %dx,0x28(%eax)
    p->tf->ss = p->tf->ds;
8010565e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105661:	8b 50 18             	mov    0x18(%eax),%edx
80105664:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105667:	8b 40 18             	mov    0x18(%eax),%eax
8010566a:	0f b7 52 2c          	movzwl 0x2c(%edx),%edx
8010566e:	66 89 50 48          	mov    %dx,0x48(%eax)
    p->tf->eflags = FL_IF;
80105672:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105675:	8b 40 18             	mov    0x18(%eax),%eax
80105678:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    p->tf->esp = PGSIZE;
8010567f:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105682:	8b 40 18             	mov    0x18(%eax),%eax
80105685:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
    p->tf->eip = 0;  // beginning of initcode.S
8010568c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010568f:	8b 40 18             	mov    0x18(%eax),%eax
80105692:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)

    safestrcpy(p->name, "initcode", sizeof(p->name));
80105699:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010569c:	83 c0 6c             	add    $0x6c,%eax
8010569f:	83 ec 04             	sub    $0x4,%esp
801056a2:	6a 10                	push   $0x10
801056a4:	68 1b 91 10 80       	push   $0x8010911b
801056a9:	50                   	push   %eax
801056aa:	e8 cb 0f 00 00       	call   8010667a <safestrcpy>
801056af:	83 c4 10             	add    $0x10,%esp

    p->uid = 0;
801056b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801056b5:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
    p->cwd = namei("/");
801056bc:	83 ec 0c             	sub    $0xc,%esp
801056bf:	68 24 91 10 80       	push   $0x80109124
801056c4:	e8 c5 dd ff ff       	call   8010348e <namei>
801056c9:	83 c4 10             	add    $0x10,%esp
801056cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
801056cf:	89 42 68             	mov    %eax,0x68(%edx)

    // this assignment to p->state lets other cores
    // run this process. the acquire forces the above
    // writes to be visible, and the lock is also needed
    // because the assignment might not be atomic.
    acquire(&ptable.lock);
801056d2:	83 ec 0c             	sub    $0xc,%esp
801056d5:	68 80 39 11 80       	push   $0x80113980
801056da:	e8 03 0b 00 00       	call   801061e2 <acquire>
801056df:	83 c4 10             	add    $0x10,%esp

    p->state = RUNNABLE;
801056e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801056e5:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)

    release(&ptable.lock);
801056ec:	83 ec 0c             	sub    $0xc,%esp
801056ef:	68 80 39 11 80       	push   $0x80113980
801056f4:	e8 5c 0b 00 00       	call   80106255 <release>
801056f9:	83 c4 10             	add    $0x10,%esp
}
801056fc:	90                   	nop
801056fd:	c9                   	leave  
801056fe:	c3                   	ret    

801056ff <growproc>:

// Grow current process's memory by n bytes.
// Return 0 on success, -1 on failure.
int growproc(int n) {
801056ff:	55                   	push   %ebp
80105700:	89 e5                	mov    %esp,%ebp
80105702:	83 ec 18             	sub    $0x18,%esp
    uint sz;
    struct proc* curproc = myproc();
80105705:	e8 87 fd ff ff       	call   80105491 <myproc>
8010570a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    sz = curproc->sz;
8010570d:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105710:	8b 00                	mov    (%eax),%eax
80105712:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (n > 0) {
80105715:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80105719:	7e 2e                	jle    80105749 <growproc+0x4a>
        if ((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0) return -1;
8010571b:	8b 55 08             	mov    0x8(%ebp),%edx
8010571e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105721:	01 c2                	add    %eax,%edx
80105723:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105726:	8b 40 04             	mov    0x4(%eax),%eax
80105729:	83 ec 04             	sub    $0x4,%esp
8010572c:	52                   	push   %edx
8010572d:	ff 75 f4             	push   -0xc(%ebp)
80105730:	50                   	push   %eax
80105731:	e8 c7 31 00 00       	call   801088fd <allocuvm>
80105736:	83 c4 10             	add    $0x10,%esp
80105739:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010573c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80105740:	75 3b                	jne    8010577d <growproc+0x7e>
80105742:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105747:	eb 4f                	jmp    80105798 <growproc+0x99>
    } else if (n < 0) {
80105749:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
8010574d:	79 2e                	jns    8010577d <growproc+0x7e>
        if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0) return -1;
8010574f:	8b 55 08             	mov    0x8(%ebp),%edx
80105752:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105755:	01 c2                	add    %eax,%edx
80105757:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010575a:	8b 40 04             	mov    0x4(%eax),%eax
8010575d:	83 ec 04             	sub    $0x4,%esp
80105760:	52                   	push   %edx
80105761:	ff 75 f4             	push   -0xc(%ebp)
80105764:	50                   	push   %eax
80105765:	e8 98 32 00 00       	call   80108a02 <deallocuvm>
8010576a:	83 c4 10             	add    $0x10,%esp
8010576d:	89 45 f4             	mov    %eax,-0xc(%ebp)
80105770:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80105774:	75 07                	jne    8010577d <growproc+0x7e>
80105776:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010577b:	eb 1b                	jmp    80105798 <growproc+0x99>
    }
    curproc->sz = sz;
8010577d:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105780:	8b 55 f4             	mov    -0xc(%ebp),%edx
80105783:	89 10                	mov    %edx,(%eax)
    switchuvm(curproc);
80105785:	83 ec 0c             	sub    $0xc,%esp
80105788:	ff 75 f0             	push   -0x10(%ebp)
8010578b:	e8 91 2e 00 00       	call   80108621 <switchuvm>
80105790:	83 c4 10             	add    $0x10,%esp
    return 0;
80105793:	b8 00 00 00 00       	mov    $0x0,%eax
}
80105798:	c9                   	leave  
80105799:	c3                   	ret    

8010579a <fork>:

// Create a new process copying p as the parent.
// Sets up stack to return as if from system call.
// Caller must set state of returned proc to RUNNABLE.
int fork(void) {
8010579a:	55                   	push   %ebp
8010579b:	89 e5                	mov    %esp,%ebp
8010579d:	57                   	push   %edi
8010579e:	56                   	push   %esi
8010579f:	53                   	push   %ebx
801057a0:	83 ec 1c             	sub    $0x1c,%esp
    int i, pid;
    struct proc* np;
    struct proc* curproc = myproc();
801057a3:	e8 e9 fc ff ff       	call   80105491 <myproc>
801057a8:	89 45 e0             	mov    %eax,-0x20(%ebp)

    // Allocate process.
    if ((np = allocproc()) == 0) {
801057ab:	e8 0a fd ff ff       	call   801054ba <allocproc>
801057b0:	89 45 dc             	mov    %eax,-0x24(%ebp)
801057b3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
801057b7:	75 0a                	jne    801057c3 <fork+0x29>
        return -1;
801057b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801057be:	e9 54 01 00 00       	jmp    80105917 <fork+0x17d>
    }

    // Copy process state from proc.
    if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0) {
801057c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
801057c6:	8b 10                	mov    (%eax),%edx
801057c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
801057cb:	8b 40 04             	mov    0x4(%eax),%eax
801057ce:	83 ec 08             	sub    $0x8,%esp
801057d1:	52                   	push   %edx
801057d2:	50                   	push   %eax
801057d3:	e8 c8 33 00 00       	call   80108ba0 <copyuvm>
801057d8:	83 c4 10             	add    $0x10,%esp
801057db:	8b 55 dc             	mov    -0x24(%ebp),%edx
801057de:	89 42 04             	mov    %eax,0x4(%edx)
801057e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
801057e4:	8b 40 04             	mov    0x4(%eax),%eax
801057e7:	85 c0                	test   %eax,%eax
801057e9:	75 30                	jne    8010581b <fork+0x81>
        kfree(np->kstack);
801057eb:	8b 45 dc             	mov    -0x24(%ebp),%eax
801057ee:	8b 40 08             	mov    0x8(%eax),%eax
801057f1:	83 ec 0c             	sub    $0xc,%esp
801057f4:	50                   	push   %eax
801057f5:	e8 60 e5 ff ff       	call   80103d5a <kfree>
801057fa:	83 c4 10             	add    $0x10,%esp
        np->kstack = 0;
801057fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
80105800:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        np->state = UNUSED;
80105807:	8b 45 dc             	mov    -0x24(%ebp),%eax
8010580a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        return -1;
80105811:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105816:	e9 fc 00 00 00       	jmp    80105917 <fork+0x17d>
    }
    np->sz = curproc->sz;
8010581b:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010581e:	8b 10                	mov    (%eax),%edx
80105820:	8b 45 dc             	mov    -0x24(%ebp),%eax
80105823:	89 10                	mov    %edx,(%eax)
    np->parent = curproc;
80105825:	8b 45 dc             	mov    -0x24(%ebp),%eax
80105828:	8b 55 e0             	mov    -0x20(%ebp),%edx
8010582b:	89 50 14             	mov    %edx,0x14(%eax)
    *np->tf = *curproc->tf;
8010582e:	8b 45 e0             	mov    -0x20(%ebp),%eax
80105831:	8b 48 18             	mov    0x18(%eax),%ecx
80105834:	8b 45 dc             	mov    -0x24(%ebp),%eax
80105837:	8b 40 18             	mov    0x18(%eax),%eax
8010583a:	89 c2                	mov    %eax,%edx
8010583c:	89 cb                	mov    %ecx,%ebx
8010583e:	b8 13 00 00 00       	mov    $0x13,%eax
80105843:	89 d7                	mov    %edx,%edi
80105845:	89 de                	mov    %ebx,%esi
80105847:	89 c1                	mov    %eax,%ecx
80105849:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

    np->uid = curproc->uid;
8010584b:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010584e:	8b 50 7c             	mov    0x7c(%eax),%edx
80105851:	8b 45 dc             	mov    -0x24(%ebp),%eax
80105854:	89 50 7c             	mov    %edx,0x7c(%eax)

    // Clear %eax so that fork returns 0 in the child.
    np->tf->eax = 0;
80105857:	8b 45 dc             	mov    -0x24(%ebp),%eax
8010585a:	8b 40 18             	mov    0x18(%eax),%eax
8010585d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)

    for (i = 0; i < NOFILE; i++)
80105864:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
8010586b:	eb 3b                	jmp    801058a8 <fork+0x10e>
        if (curproc->ofile[i]) np->ofile[i] = filedup(curproc->ofile[i]);
8010586d:	8b 45 e0             	mov    -0x20(%ebp),%eax
80105870:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80105873:	83 c2 08             	add    $0x8,%edx
80105876:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
8010587a:	85 c0                	test   %eax,%eax
8010587c:	74 26                	je     801058a4 <fork+0x10a>
8010587e:	8b 45 e0             	mov    -0x20(%ebp),%eax
80105881:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80105884:	83 c2 08             	add    $0x8,%edx
80105887:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
8010588b:	83 ec 0c             	sub    $0xc,%esp
8010588e:	50                   	push   %eax
8010588f:	e8 56 c3 ff ff       	call   80101bea <filedup>
80105894:	83 c4 10             	add    $0x10,%esp
80105897:	8b 55 dc             	mov    -0x24(%ebp),%edx
8010589a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
8010589d:	83 c1 08             	add    $0x8,%ecx
801058a0:	89 44 8a 08          	mov    %eax,0x8(%edx,%ecx,4)
    for (i = 0; i < NOFILE; i++)
801058a4:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
801058a8:	83 7d e4 0f          	cmpl   $0xf,-0x1c(%ebp)
801058ac:	7e bf                	jle    8010586d <fork+0xd3>
    np->cwd = idup(curproc->cwd);
801058ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
801058b1:	8b 40 68             	mov    0x68(%eax),%eax
801058b4:	83 ec 0c             	sub    $0xc,%esp
801058b7:	50                   	push   %eax
801058b8:	e8 7e cd ff ff       	call   8010263b <idup>
801058bd:	83 c4 10             	add    $0x10,%esp
801058c0:	8b 55 dc             	mov    -0x24(%ebp),%edx
801058c3:	89 42 68             	mov    %eax,0x68(%edx)

    safestrcpy(np->name, curproc->name, sizeof(curproc->name));
801058c6:	8b 45 e0             	mov    -0x20(%ebp),%eax
801058c9:	8d 50 6c             	lea    0x6c(%eax),%edx
801058cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
801058cf:	83 c0 6c             	add    $0x6c,%eax
801058d2:	83 ec 04             	sub    $0x4,%esp
801058d5:	6a 10                	push   $0x10
801058d7:	52                   	push   %edx
801058d8:	50                   	push   %eax
801058d9:	e8 9c 0d 00 00       	call   8010667a <safestrcpy>
801058de:	83 c4 10             	add    $0x10,%esp

    pid = np->pid;
801058e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
801058e4:	8b 40 10             	mov    0x10(%eax),%eax
801058e7:	89 45 d8             	mov    %eax,-0x28(%ebp)

    acquire(&ptable.lock);
801058ea:	83 ec 0c             	sub    $0xc,%esp
801058ed:	68 80 39 11 80       	push   $0x80113980
801058f2:	e8 eb 08 00 00       	call   801061e2 <acquire>
801058f7:	83 c4 10             	add    $0x10,%esp

    np->state = RUNNABLE;
801058fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
801058fd:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)

    release(&ptable.lock);
80105904:	83 ec 0c             	sub    $0xc,%esp
80105907:	68 80 39 11 80       	push   $0x80113980
8010590c:	e8 44 09 00 00       	call   80106255 <release>
80105911:	83 c4 10             	add    $0x10,%esp

    return pid;
80105914:	8b 45 d8             	mov    -0x28(%ebp),%eax
}
80105917:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010591a:	5b                   	pop    %ebx
8010591b:	5e                   	pop    %esi
8010591c:	5f                   	pop    %edi
8010591d:	5d                   	pop    %ebp
8010591e:	c3                   	ret    

8010591f <exit>:

// Exit the current process.  Does not return.
// An exited process remains in the zombie state
// until its parent calls wait() to find out it exited.
void exit(void) {
8010591f:	55                   	push   %ebp
80105920:	89 e5                	mov    %esp,%ebp
80105922:	83 ec 18             	sub    $0x18,%esp
    struct proc* curproc = myproc();
80105925:	e8 67 fb ff ff       	call   80105491 <myproc>
8010592a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct proc* p;
    int fd;

    if (curproc == initproc) panic("init exiting");
8010592d:	a1 b4 59 11 80       	mov    0x801159b4,%eax
80105932:	39 45 ec             	cmp    %eax,-0x14(%ebp)
80105935:	75 0d                	jne    80105944 <exit+0x25>
80105937:	83 ec 0c             	sub    $0xc,%esp
8010593a:	68 26 91 10 80       	push   $0x80109126
8010593f:	e8 9f b7 ff ff       	call   801010e3 <panic>

    // Close all open files.
    for (fd = 0; fd < NOFILE; fd++) {
80105944:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
8010594b:	eb 3f                	jmp    8010598c <exit+0x6d>
        if (curproc->ofile[fd]) {
8010594d:	8b 45 ec             	mov    -0x14(%ebp),%eax
80105950:	8b 55 f0             	mov    -0x10(%ebp),%edx
80105953:	83 c2 08             	add    $0x8,%edx
80105956:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
8010595a:	85 c0                	test   %eax,%eax
8010595c:	74 2a                	je     80105988 <exit+0x69>
            fileclose(curproc->ofile[fd]);
8010595e:	8b 45 ec             	mov    -0x14(%ebp),%eax
80105961:	8b 55 f0             	mov    -0x10(%ebp),%edx
80105964:	83 c2 08             	add    $0x8,%edx
80105967:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
8010596b:	83 ec 0c             	sub    $0xc,%esp
8010596e:	50                   	push   %eax
8010596f:	e8 c7 c2 ff ff       	call   80101c3b <fileclose>
80105974:	83 c4 10             	add    $0x10,%esp
            curproc->ofile[fd] = 0;
80105977:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010597a:	8b 55 f0             	mov    -0x10(%ebp),%edx
8010597d:	83 c2 08             	add    $0x8,%edx
80105980:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
80105987:	00 
    for (fd = 0; fd < NOFILE; fd++) {
80105988:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
8010598c:	83 7d f0 0f          	cmpl   $0xf,-0x10(%ebp)
80105990:	7e bb                	jle    8010594d <exit+0x2e>
        }
    }

    begin_op();
80105992:	e8 99 ed ff ff       	call   80104730 <begin_op>
    iput(curproc->cwd);
80105997:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010599a:	8b 40 68             	mov    0x68(%eax),%eax
8010599d:	83 ec 0c             	sub    $0xc,%esp
801059a0:	50                   	push   %eax
801059a1:	e8 4c ce ff ff       	call   801027f2 <iput>
801059a6:	83 c4 10             	add    $0x10,%esp
    end_op();
801059a9:	e8 0e ee ff ff       	call   801047bc <end_op>
    curproc->cwd = 0;
801059ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
801059b1:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)

    acquire(&ptable.lock);
801059b8:	83 ec 0c             	sub    $0xc,%esp
801059bb:	68 80 39 11 80       	push   $0x80113980
801059c0:	e8 1d 08 00 00       	call   801061e2 <acquire>
801059c5:	83 c4 10             	add    $0x10,%esp

    // Parent might be sleeping in wait().
    wakeup1(curproc->parent);
801059c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
801059cb:	8b 40 14             	mov    0x14(%eax),%eax
801059ce:	83 ec 0c             	sub    $0xc,%esp
801059d1:	50                   	push   %eax
801059d2:	e8 2e 04 00 00       	call   80105e05 <wakeup1>
801059d7:	83 c4 10             	add    $0x10,%esp

    // Pass abandoned children to init.
    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
801059da:	c7 45 f4 b4 39 11 80 	movl   $0x801139b4,-0xc(%ebp)
801059e1:	eb 37                	jmp    80105a1a <exit+0xfb>
        if (p->parent == curproc) {
801059e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
801059e6:	8b 40 14             	mov    0x14(%eax),%eax
801059e9:	39 45 ec             	cmp    %eax,-0x14(%ebp)
801059ec:	75 28                	jne    80105a16 <exit+0xf7>
            p->parent = initproc;
801059ee:	8b 15 b4 59 11 80    	mov    0x801159b4,%edx
801059f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
801059f7:	89 50 14             	mov    %edx,0x14(%eax)
            if (p->state == ZOMBIE) wakeup1(initproc);
801059fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
801059fd:	8b 40 0c             	mov    0xc(%eax),%eax
80105a00:	83 f8 05             	cmp    $0x5,%eax
80105a03:	75 11                	jne    80105a16 <exit+0xf7>
80105a05:	a1 b4 59 11 80       	mov    0x801159b4,%eax
80105a0a:	83 ec 0c             	sub    $0xc,%esp
80105a0d:	50                   	push   %eax
80105a0e:	e8 f2 03 00 00       	call   80105e05 <wakeup1>
80105a13:	83 c4 10             	add    $0x10,%esp
    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80105a16:	83 6d f4 80          	subl   $0xffffff80,-0xc(%ebp)
80105a1a:	81 7d f4 b4 59 11 80 	cmpl   $0x801159b4,-0xc(%ebp)
80105a21:	72 c0                	jb     801059e3 <exit+0xc4>
        }
    }

    // Jump into the scheduler, never to return.
    curproc->state = ZOMBIE;
80105a23:	8b 45 ec             	mov    -0x14(%ebp),%eax
80105a26:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched();
80105a2d:	e8 f3 01 00 00       	call   80105c25 <sched>
    panic("zombie exit");
80105a32:	83 ec 0c             	sub    $0xc,%esp
80105a35:	68 33 91 10 80       	push   $0x80109133
80105a3a:	e8 a4 b6 ff ff       	call   801010e3 <panic>

80105a3f <wait>:
}

// Wait for a child process to exit and return its pid.
// Return -1 if this process has no children.
int wait(void) {
80105a3f:	55                   	push   %ebp
80105a40:	89 e5                	mov    %esp,%ebp
80105a42:	83 ec 18             	sub    $0x18,%esp
    struct proc* p;
    int havekids, pid;
    struct proc* curproc = myproc();
80105a45:	e8 47 fa ff ff       	call   80105491 <myproc>
80105a4a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    acquire(&ptable.lock);
80105a4d:	83 ec 0c             	sub    $0xc,%esp
80105a50:	68 80 39 11 80       	push   $0x80113980
80105a55:	e8 88 07 00 00       	call   801061e2 <acquire>
80105a5a:	83 c4 10             	add    $0x10,%esp
    for (;;) {
        // Scan through table looking for exited children.
        havekids = 0;
80105a5d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
        for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80105a64:	c7 45 f4 b4 39 11 80 	movl   $0x801139b4,-0xc(%ebp)
80105a6b:	e9 af 00 00 00       	jmp    80105b1f <wait+0xe0>
            if (p->parent != curproc) continue;
80105a70:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105a73:	8b 40 14             	mov    0x14(%eax),%eax
80105a76:	39 45 ec             	cmp    %eax,-0x14(%ebp)
80105a79:	0f 85 9b 00 00 00    	jne    80105b1a <wait+0xdb>
            havekids = 1;
80105a7f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (p->state == ZOMBIE) {
80105a86:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105a89:	8b 40 0c             	mov    0xc(%eax),%eax
80105a8c:	83 f8 05             	cmp    $0x5,%eax
80105a8f:	0f 85 86 00 00 00    	jne    80105b1b <wait+0xdc>
                // Found one.
                pid = p->pid;
80105a95:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105a98:	8b 40 10             	mov    0x10(%eax),%eax
80105a9b:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kfree(p->kstack);
80105a9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105aa1:	8b 40 08             	mov    0x8(%eax),%eax
80105aa4:	83 ec 0c             	sub    $0xc,%esp
80105aa7:	50                   	push   %eax
80105aa8:	e8 ad e2 ff ff       	call   80103d5a <kfree>
80105aad:	83 c4 10             	add    $0x10,%esp
                p->kstack = 0;
80105ab0:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105ab3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                freevm(p->pgdir);
80105aba:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105abd:	8b 40 04             	mov    0x4(%eax),%eax
80105ac0:	83 ec 0c             	sub    $0xc,%esp
80105ac3:	50                   	push   %eax
80105ac4:	e8 fd 2f 00 00       	call   80108ac6 <freevm>
80105ac9:	83 c4 10             	add    $0x10,%esp
                p->pid = 0;
80105acc:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105acf:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
                p->uid = 0;
80105ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105ad9:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
                p->parent = 0;
80105ae0:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105ae3:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
                p->name[0] = 0;
80105aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105aed:	c6 40 6c 00          	movb   $0x0,0x6c(%eax)
                p->killed = 0;
80105af1:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105af4:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
                p->state = UNUSED;
80105afb:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105afe:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
                release(&ptable.lock);
80105b05:	83 ec 0c             	sub    $0xc,%esp
80105b08:	68 80 39 11 80       	push   $0x80113980
80105b0d:	e8 43 07 00 00       	call   80106255 <release>
80105b12:	83 c4 10             	add    $0x10,%esp
                return pid;
80105b15:	8b 45 e8             	mov    -0x18(%ebp),%eax
80105b18:	eb 51                	jmp    80105b6b <wait+0x12c>
            if (p->parent != curproc) continue;
80105b1a:	90                   	nop
        for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80105b1b:	83 6d f4 80          	subl   $0xffffff80,-0xc(%ebp)
80105b1f:	81 7d f4 b4 59 11 80 	cmpl   $0x801159b4,-0xc(%ebp)
80105b26:	0f 82 44 ff ff ff    	jb     80105a70 <wait+0x31>
            }
        }

        // No point waiting if we don't have any children.
        if (!havekids || curproc->killed) {
80105b2c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80105b30:	74 0a                	je     80105b3c <wait+0xfd>
80105b32:	8b 45 ec             	mov    -0x14(%ebp),%eax
80105b35:	8b 40 24             	mov    0x24(%eax),%eax
80105b38:	85 c0                	test   %eax,%eax
80105b3a:	74 17                	je     80105b53 <wait+0x114>
            release(&ptable.lock);
80105b3c:	83 ec 0c             	sub    $0xc,%esp
80105b3f:	68 80 39 11 80       	push   $0x80113980
80105b44:	e8 0c 07 00 00       	call   80106255 <release>
80105b49:	83 c4 10             	add    $0x10,%esp
            return -1;
80105b4c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105b51:	eb 18                	jmp    80105b6b <wait+0x12c>
        }

        // Wait for children to exit.  (See wakeup1 call in proc_exit.)
        sleep(curproc, &ptable.lock);  //DOC: wait-sleep
80105b53:	83 ec 08             	sub    $0x8,%esp
80105b56:	68 80 39 11 80       	push   $0x80113980
80105b5b:	ff 75 ec             	push   -0x14(%ebp)
80105b5e:	e8 fb 01 00 00       	call   80105d5e <sleep>
80105b63:	83 c4 10             	add    $0x10,%esp
        havekids = 0;
80105b66:	e9 f2 fe ff ff       	jmp    80105a5d <wait+0x1e>
    }
}
80105b6b:	c9                   	leave  
80105b6c:	c3                   	ret    

80105b6d <scheduler>:
// Scheduler never returns.  It loops, doing:
//  - choose a process to run
//  - swtch to start running that process
//  - eventually that process transfers control
//      via swtch back to the scheduler.
void scheduler(void) {
80105b6d:	55                   	push   %ebp
80105b6e:	89 e5                	mov    %esp,%ebp
80105b70:	83 ec 18             	sub    $0x18,%esp
    struct proc* p;
    struct cpu* c = mycpu();
80105b73:	e8 a1 f8 ff ff       	call   80105419 <mycpu>
80105b78:	89 45 f0             	mov    %eax,-0x10(%ebp)
    c->proc = 0;
80105b7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105b7e:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
80105b85:	00 00 00 

    for (;;) {
        // Enable interrupts on this processor.
        sti();
80105b88:	e8 4c f8 ff ff       	call   801053d9 <sti>

        // Loop over process table looking for process to run.
        acquire(&ptable.lock);
80105b8d:	83 ec 0c             	sub    $0xc,%esp
80105b90:	68 80 39 11 80       	push   $0x80113980
80105b95:	e8 48 06 00 00       	call   801061e2 <acquire>
80105b9a:	83 c4 10             	add    $0x10,%esp
        for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80105b9d:	c7 45 f4 b4 39 11 80 	movl   $0x801139b4,-0xc(%ebp)
80105ba4:	eb 61                	jmp    80105c07 <scheduler+0x9a>
            if (p->state != RUNNABLE) continue;
80105ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105ba9:	8b 40 0c             	mov    0xc(%eax),%eax
80105bac:	83 f8 03             	cmp    $0x3,%eax
80105baf:	75 51                	jne    80105c02 <scheduler+0x95>

            // Switch to chosen process.  It is the process's job
            // to release ptable.lock and then reacquire it
            // before jumping back to us.
            c->proc = p;
80105bb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105bb4:	8b 55 f4             	mov    -0xc(%ebp),%edx
80105bb7:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
            switchuvm(p);
80105bbd:	83 ec 0c             	sub    $0xc,%esp
80105bc0:	ff 75 f4             	push   -0xc(%ebp)
80105bc3:	e8 59 2a 00 00       	call   80108621 <switchuvm>
80105bc8:	83 c4 10             	add    $0x10,%esp
            p->state = RUNNING;
80105bcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105bce:	c7 40 0c 04 00 00 00 	movl   $0x4,0xc(%eax)

            swtch(&(c->scheduler), p->context);
80105bd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105bd8:	8b 40 1c             	mov    0x1c(%eax),%eax
80105bdb:	8b 55 f0             	mov    -0x10(%ebp),%edx
80105bde:	83 c2 04             	add    $0x4,%edx
80105be1:	83 ec 08             	sub    $0x8,%esp
80105be4:	50                   	push   %eax
80105be5:	52                   	push   %edx
80105be6:	e8 49 a4 ff ff       	call   80100034 <swtch>
80105beb:	83 c4 10             	add    $0x10,%esp
            switchkvm();
80105bee:	e8 15 2a 00 00       	call   80108608 <switchkvm>

            // Process is done running for now.
            // It should have changed its p->state before coming back.
            c->proc = 0;
80105bf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105bf6:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
80105bfd:	00 00 00 
80105c00:	eb 01                	jmp    80105c03 <scheduler+0x96>
            if (p->state != RUNNABLE) continue;
80105c02:	90                   	nop
        for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80105c03:	83 6d f4 80          	subl   $0xffffff80,-0xc(%ebp)
80105c07:	81 7d f4 b4 59 11 80 	cmpl   $0x801159b4,-0xc(%ebp)
80105c0e:	72 96                	jb     80105ba6 <scheduler+0x39>
        }
        release(&ptable.lock);
80105c10:	83 ec 0c             	sub    $0xc,%esp
80105c13:	68 80 39 11 80       	push   $0x80113980
80105c18:	e8 38 06 00 00       	call   80106255 <release>
80105c1d:	83 c4 10             	add    $0x10,%esp
        sti();
80105c20:	e9 63 ff ff ff       	jmp    80105b88 <scheduler+0x1b>

80105c25 <sched>:
// intena because intena is a property of this
// kernel thread, not this CPU. It should
// be proc->intena and proc->ncli, but that would
// break in the few places where a lock is held but
// there's no process.
void sched(void) {
80105c25:	55                   	push   %ebp
80105c26:	89 e5                	mov    %esp,%ebp
80105c28:	83 ec 18             	sub    $0x18,%esp
    int intena;
    struct proc* p = myproc();
80105c2b:	e8 61 f8 ff ff       	call   80105491 <myproc>
80105c30:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (!holding(&ptable.lock)) panic("sched ptable.lock");
80105c33:	83 ec 0c             	sub    $0xc,%esp
80105c36:	68 80 39 11 80       	push   $0x80113980
80105c3b:	e8 e6 06 00 00       	call   80106326 <holding>
80105c40:	83 c4 10             	add    $0x10,%esp
80105c43:	85 c0                	test   %eax,%eax
80105c45:	75 0d                	jne    80105c54 <sched+0x2f>
80105c47:	83 ec 0c             	sub    $0xc,%esp
80105c4a:	68 3f 91 10 80       	push   $0x8010913f
80105c4f:	e8 8f b4 ff ff       	call   801010e3 <panic>
    if (mycpu()->ncli != 1) panic("sched locks");
80105c54:	e8 c0 f7 ff ff       	call   80105419 <mycpu>
80105c59:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
80105c5f:	83 f8 01             	cmp    $0x1,%eax
80105c62:	74 0d                	je     80105c71 <sched+0x4c>
80105c64:	83 ec 0c             	sub    $0xc,%esp
80105c67:	68 51 91 10 80       	push   $0x80109151
80105c6c:	e8 72 b4 ff ff       	call   801010e3 <panic>
    if (p->state == RUNNING) panic("sched running");
80105c71:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105c74:	8b 40 0c             	mov    0xc(%eax),%eax
80105c77:	83 f8 04             	cmp    $0x4,%eax
80105c7a:	75 0d                	jne    80105c89 <sched+0x64>
80105c7c:	83 ec 0c             	sub    $0xc,%esp
80105c7f:	68 5d 91 10 80       	push   $0x8010915d
80105c84:	e8 5a b4 ff ff       	call   801010e3 <panic>
    if (readeflags() & FL_IF) panic("sched interruptible");
80105c89:	e8 3b f7 ff ff       	call   801053c9 <readeflags>
80105c8e:	25 00 02 00 00       	and    $0x200,%eax
80105c93:	85 c0                	test   %eax,%eax
80105c95:	74 0d                	je     80105ca4 <sched+0x7f>
80105c97:	83 ec 0c             	sub    $0xc,%esp
80105c9a:	68 6b 91 10 80       	push   $0x8010916b
80105c9f:	e8 3f b4 ff ff       	call   801010e3 <panic>
    intena = mycpu()->intena;
80105ca4:	e8 70 f7 ff ff       	call   80105419 <mycpu>
80105ca9:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
80105caf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    swtch(&p->context, mycpu()->scheduler);
80105cb2:	e8 62 f7 ff ff       	call   80105419 <mycpu>
80105cb7:	8b 40 04             	mov    0x4(%eax),%eax
80105cba:	8b 55 f4             	mov    -0xc(%ebp),%edx
80105cbd:	83 c2 1c             	add    $0x1c,%edx
80105cc0:	83 ec 08             	sub    $0x8,%esp
80105cc3:	50                   	push   %eax
80105cc4:	52                   	push   %edx
80105cc5:	e8 6a a3 ff ff       	call   80100034 <swtch>
80105cca:	83 c4 10             	add    $0x10,%esp
    mycpu()->intena = intena;
80105ccd:	e8 47 f7 ff ff       	call   80105419 <mycpu>
80105cd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
80105cd5:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
}
80105cdb:	90                   	nop
80105cdc:	c9                   	leave  
80105cdd:	c3                   	ret    

80105cde <yield>:

// Give up the CPU for one scheduling round.
void yield(void) {
80105cde:	55                   	push   %ebp
80105cdf:	89 e5                	mov    %esp,%ebp
80105ce1:	83 ec 08             	sub    $0x8,%esp
    acquire(&ptable.lock);  //DOC: yieldlock
80105ce4:	83 ec 0c             	sub    $0xc,%esp
80105ce7:	68 80 39 11 80       	push   $0x80113980
80105cec:	e8 f1 04 00 00       	call   801061e2 <acquire>
80105cf1:	83 c4 10             	add    $0x10,%esp
    myproc()->state = RUNNABLE;
80105cf4:	e8 98 f7 ff ff       	call   80105491 <myproc>
80105cf9:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
    sched();
80105d00:	e8 20 ff ff ff       	call   80105c25 <sched>
    release(&ptable.lock);
80105d05:	83 ec 0c             	sub    $0xc,%esp
80105d08:	68 80 39 11 80       	push   $0x80113980
80105d0d:	e8 43 05 00 00       	call   80106255 <release>
80105d12:	83 c4 10             	add    $0x10,%esp
}
80105d15:	90                   	nop
80105d16:	c9                   	leave  
80105d17:	c3                   	ret    

80105d18 <forkret>:

// A fork child's very first scheduling by scheduler()
// will swtch here.  "Return" to user space.
void forkret(void) {
80105d18:	55                   	push   %ebp
80105d19:	89 e5                	mov    %esp,%ebp
80105d1b:	83 ec 08             	sub    $0x8,%esp
    static int first = 1;
    // Still holding ptable.lock from scheduler.
    release(&ptable.lock);
80105d1e:	83 ec 0c             	sub    $0xc,%esp
80105d21:	68 80 39 11 80       	push   $0x80113980
80105d26:	e8 2a 05 00 00       	call   80106255 <release>
80105d2b:	83 c4 10             	add    $0x10,%esp

    if (first) {
80105d2e:	a1 04 c0 10 80       	mov    0x8010c004,%eax
80105d33:	85 c0                	test   %eax,%eax
80105d35:	74 24                	je     80105d5b <forkret+0x43>
        // Some initialization functions must be run in the context
        // of a regular process (e.g., they call sleep), and thus cannot
        // be run from main().
        first = 0;
80105d37:	c7 05 04 c0 10 80 00 	movl   $0x0,0x8010c004
80105d3e:	00 00 00 
        iinit(ROOTDEV);
80105d41:	83 ec 0c             	sub    $0xc,%esp
80105d44:	6a 01                	push   $0x1
80105d46:	e8 9c c5 ff ff       	call   801022e7 <iinit>
80105d4b:	83 c4 10             	add    $0x10,%esp
        initlog(ROOTDEV);
80105d4e:	83 ec 0c             	sub    $0xc,%esp
80105d51:	6a 01                	push   $0x1
80105d53:	e8 b9 e7 ff ff       	call   80104511 <initlog>
80105d58:	83 c4 10             	add    $0x10,%esp
    }

    // Return to "caller", actually trapret (see allocproc).
}
80105d5b:	90                   	nop
80105d5c:	c9                   	leave  
80105d5d:	c3                   	ret    

80105d5e <sleep>:

// Atomically release lock and sleep on chan.
// Reacquires lock when awakened.
void sleep(void* chan, struct spinlock* lk) {
80105d5e:	55                   	push   %ebp
80105d5f:	89 e5                	mov    %esp,%ebp
80105d61:	83 ec 18             	sub    $0x18,%esp
    struct proc* p = myproc();
80105d64:	e8 28 f7 ff ff       	call   80105491 <myproc>
80105d69:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (p == 0) panic("sleep");
80105d6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80105d70:	75 0d                	jne    80105d7f <sleep+0x21>
80105d72:	83 ec 0c             	sub    $0xc,%esp
80105d75:	68 7f 91 10 80       	push   $0x8010917f
80105d7a:	e8 64 b3 ff ff       	call   801010e3 <panic>

    if (lk == 0) panic("sleep without lk");
80105d7f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
80105d83:	75 0d                	jne    80105d92 <sleep+0x34>
80105d85:	83 ec 0c             	sub    $0xc,%esp
80105d88:	68 85 91 10 80       	push   $0x80109185
80105d8d:	e8 51 b3 ff ff       	call   801010e3 <panic>
    // change p->state and then call sched.
    // Once we hold ptable.lock, we can be
    // guaranteed that we won't miss any wakeup
    // (wakeup runs with ptable.lock locked),
    // so it's okay to release lk.
    if (lk != &ptable.lock) {   //DOC: sleeplock0
80105d92:	81 7d 0c 80 39 11 80 	cmpl   $0x80113980,0xc(%ebp)
80105d99:	74 1e                	je     80105db9 <sleep+0x5b>
        acquire(&ptable.lock);  //DOC: sleeplock1
80105d9b:	83 ec 0c             	sub    $0xc,%esp
80105d9e:	68 80 39 11 80       	push   $0x80113980
80105da3:	e8 3a 04 00 00       	call   801061e2 <acquire>
80105da8:	83 c4 10             	add    $0x10,%esp
        release(lk);
80105dab:	83 ec 0c             	sub    $0xc,%esp
80105dae:	ff 75 0c             	push   0xc(%ebp)
80105db1:	e8 9f 04 00 00       	call   80106255 <release>
80105db6:	83 c4 10             	add    $0x10,%esp
    }
    // Go to sleep.
    p->chan = chan;
80105db9:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105dbc:	8b 55 08             	mov    0x8(%ebp),%edx
80105dbf:	89 50 20             	mov    %edx,0x20(%eax)
    p->state = SLEEPING;
80105dc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105dc5:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%eax)

    sched();
80105dcc:	e8 54 fe ff ff       	call   80105c25 <sched>

    // Tidy up.
    p->chan = 0;
80105dd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105dd4:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)

    // Reacquire original lock.
    if (lk != &ptable.lock) {  //DOC: sleeplock2
80105ddb:	81 7d 0c 80 39 11 80 	cmpl   $0x80113980,0xc(%ebp)
80105de2:	74 1e                	je     80105e02 <sleep+0xa4>
        release(&ptable.lock);
80105de4:	83 ec 0c             	sub    $0xc,%esp
80105de7:	68 80 39 11 80       	push   $0x80113980
80105dec:	e8 64 04 00 00       	call   80106255 <release>
80105df1:	83 c4 10             	add    $0x10,%esp
        acquire(lk);
80105df4:	83 ec 0c             	sub    $0xc,%esp
80105df7:	ff 75 0c             	push   0xc(%ebp)
80105dfa:	e8 e3 03 00 00       	call   801061e2 <acquire>
80105dff:	83 c4 10             	add    $0x10,%esp
    }
}
80105e02:	90                   	nop
80105e03:	c9                   	leave  
80105e04:	c3                   	ret    

80105e05 <wakeup1>:

//PAGEBREAK!
// Wake up all processes sleeping on chan.
// The ptable lock must be held.
static void wakeup1(void* chan) {
80105e05:	55                   	push   %ebp
80105e06:	89 e5                	mov    %esp,%ebp
80105e08:	83 ec 10             	sub    $0x10,%esp
    struct proc* p;

    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80105e0b:	c7 45 fc b4 39 11 80 	movl   $0x801139b4,-0x4(%ebp)
80105e12:	eb 24                	jmp    80105e38 <wakeup1+0x33>
        if (p->state == SLEEPING && p->chan == chan) p->state = RUNNABLE;
80105e14:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105e17:	8b 40 0c             	mov    0xc(%eax),%eax
80105e1a:	83 f8 02             	cmp    $0x2,%eax
80105e1d:	75 15                	jne    80105e34 <wakeup1+0x2f>
80105e1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105e22:	8b 40 20             	mov    0x20(%eax),%eax
80105e25:	39 45 08             	cmp    %eax,0x8(%ebp)
80105e28:	75 0a                	jne    80105e34 <wakeup1+0x2f>
80105e2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
80105e2d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80105e34:	83 6d fc 80          	subl   $0xffffff80,-0x4(%ebp)
80105e38:	81 7d fc b4 59 11 80 	cmpl   $0x801159b4,-0x4(%ebp)
80105e3f:	72 d3                	jb     80105e14 <wakeup1+0xf>
}
80105e41:	90                   	nop
80105e42:	90                   	nop
80105e43:	c9                   	leave  
80105e44:	c3                   	ret    

80105e45 <wakeup>:

// Wake up all processes sleeping on chan.
void wakeup(void* chan) {
80105e45:	55                   	push   %ebp
80105e46:	89 e5                	mov    %esp,%ebp
80105e48:	83 ec 08             	sub    $0x8,%esp
    acquire(&ptable.lock);
80105e4b:	83 ec 0c             	sub    $0xc,%esp
80105e4e:	68 80 39 11 80       	push   $0x80113980
80105e53:	e8 8a 03 00 00       	call   801061e2 <acquire>
80105e58:	83 c4 10             	add    $0x10,%esp
    wakeup1(chan);
80105e5b:	83 ec 0c             	sub    $0xc,%esp
80105e5e:	ff 75 08             	push   0x8(%ebp)
80105e61:	e8 9f ff ff ff       	call   80105e05 <wakeup1>
80105e66:	83 c4 10             	add    $0x10,%esp
    release(&ptable.lock);
80105e69:	83 ec 0c             	sub    $0xc,%esp
80105e6c:	68 80 39 11 80       	push   $0x80113980
80105e71:	e8 df 03 00 00       	call   80106255 <release>
80105e76:	83 c4 10             	add    $0x10,%esp
}
80105e79:	90                   	nop
80105e7a:	c9                   	leave  
80105e7b:	c3                   	ret    

80105e7c <kill>:

// Kill the process with the given pid.
// Process won't exit until it returns
// to user space (see trap in trap.c).
int kill(int pid) {
80105e7c:	55                   	push   %ebp
80105e7d:	89 e5                	mov    %esp,%ebp
80105e7f:	83 ec 18             	sub    $0x18,%esp
    struct proc* p;

    acquire(&ptable.lock);
80105e82:	83 ec 0c             	sub    $0xc,%esp
80105e85:	68 80 39 11 80       	push   $0x80113980
80105e8a:	e8 53 03 00 00       	call   801061e2 <acquire>
80105e8f:	83 c4 10             	add    $0x10,%esp
    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80105e92:	c7 45 f4 b4 39 11 80 	movl   $0x801139b4,-0xc(%ebp)
80105e99:	eb 45                	jmp    80105ee0 <kill+0x64>
        if (p->pid == pid) {
80105e9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105e9e:	8b 40 10             	mov    0x10(%eax),%eax
80105ea1:	39 45 08             	cmp    %eax,0x8(%ebp)
80105ea4:	75 36                	jne    80105edc <kill+0x60>
            p->killed = 1;
80105ea6:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105ea9:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
            // Wake process from sleep if necessary.
            if (p->state == SLEEPING) p->state = RUNNABLE;
80105eb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105eb3:	8b 40 0c             	mov    0xc(%eax),%eax
80105eb6:	83 f8 02             	cmp    $0x2,%eax
80105eb9:	75 0a                	jne    80105ec5 <kill+0x49>
80105ebb:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105ebe:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
            release(&ptable.lock);
80105ec5:	83 ec 0c             	sub    $0xc,%esp
80105ec8:	68 80 39 11 80       	push   $0x80113980
80105ecd:	e8 83 03 00 00       	call   80106255 <release>
80105ed2:	83 c4 10             	add    $0x10,%esp
            return 0;
80105ed5:	b8 00 00 00 00       	mov    $0x0,%eax
80105eda:	eb 22                	jmp    80105efe <kill+0x82>
    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80105edc:	83 6d f4 80          	subl   $0xffffff80,-0xc(%ebp)
80105ee0:	81 7d f4 b4 59 11 80 	cmpl   $0x801159b4,-0xc(%ebp)
80105ee7:	72 b2                	jb     80105e9b <kill+0x1f>
        }
    }
    release(&ptable.lock);
80105ee9:	83 ec 0c             	sub    $0xc,%esp
80105eec:	68 80 39 11 80       	push   $0x80113980
80105ef1:	e8 5f 03 00 00       	call   80106255 <release>
80105ef6:	83 c4 10             	add    $0x10,%esp
    return -1;
80105ef9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105efe:	c9                   	leave  
80105eff:	c3                   	ret    

80105f00 <procdump>:

//PAGEBREAK: 36
// Print a process listing to console.  For debugging.
// Runs when user types ^P on console.
// No lock to avoid wedging a stuck machine further.
void procdump(void) {
80105f00:	55                   	push   %ebp
80105f01:	89 e5                	mov    %esp,%ebp
80105f03:	83 ec 48             	sub    $0x48,%esp
    int i;
    struct proc* p;
    char* state;
    uint pc[10];

    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80105f06:	c7 45 f0 b4 39 11 80 	movl   $0x801139b4,-0x10(%ebp)
80105f0d:	e9 d7 00 00 00       	jmp    80105fe9 <procdump+0xe9>
        if (p->state == UNUSED) continue;
80105f12:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105f15:	8b 40 0c             	mov    0xc(%eax),%eax
80105f18:	85 c0                	test   %eax,%eax
80105f1a:	0f 84 c4 00 00 00    	je     80105fe4 <procdump+0xe4>
        if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
80105f20:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105f23:	8b 40 0c             	mov    0xc(%eax),%eax
80105f26:	83 f8 05             	cmp    $0x5,%eax
80105f29:	77 23                	ja     80105f4e <procdump+0x4e>
80105f2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105f2e:	8b 40 0c             	mov    0xc(%eax),%eax
80105f31:	8b 04 85 08 c0 10 80 	mov    -0x7fef3ff8(,%eax,4),%eax
80105f38:	85 c0                	test   %eax,%eax
80105f3a:	74 12                	je     80105f4e <procdump+0x4e>
            state = states[p->state];
80105f3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105f3f:	8b 40 0c             	mov    0xc(%eax),%eax
80105f42:	8b 04 85 08 c0 10 80 	mov    -0x7fef3ff8(,%eax,4),%eax
80105f49:	89 45 ec             	mov    %eax,-0x14(%ebp)
80105f4c:	eb 07                	jmp    80105f55 <procdump+0x55>
        else
            state = "???";
80105f4e:	c7 45 ec 96 91 10 80 	movl   $0x80109196,-0x14(%ebp)
        cprintf("%d %s %s", p->pid, state, p->name);
80105f55:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105f58:	8d 50 6c             	lea    0x6c(%eax),%edx
80105f5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105f5e:	8b 40 10             	mov    0x10(%eax),%eax
80105f61:	52                   	push   %edx
80105f62:	ff 75 ec             	push   -0x14(%ebp)
80105f65:	50                   	push   %eax
80105f66:	68 9a 91 10 80       	push   $0x8010919a
80105f6b:	e8 be af ff ff       	call   80100f2e <cprintf>
80105f70:	83 c4 10             	add    $0x10,%esp
        if (p->state == SLEEPING) {
80105f73:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105f76:	8b 40 0c             	mov    0xc(%eax),%eax
80105f79:	83 f8 02             	cmp    $0x2,%eax
80105f7c:	75 54                	jne    80105fd2 <procdump+0xd2>
            getcallerpcs((uint*) p->context->ebp + 2, pc);
80105f7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
80105f81:	8b 40 1c             	mov    0x1c(%eax),%eax
80105f84:	8b 40 0c             	mov    0xc(%eax),%eax
80105f87:	83 c0 08             	add    $0x8,%eax
80105f8a:	89 c2                	mov    %eax,%edx
80105f8c:	83 ec 08             	sub    $0x8,%esp
80105f8f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
80105f92:	50                   	push   %eax
80105f93:	52                   	push   %edx
80105f94:	e8 12 03 00 00       	call   801062ab <getcallerpcs>
80105f99:	83 c4 10             	add    $0x10,%esp
            for (i = 0; i < 10 && pc[i] != 0; i++) cprintf(" %p", pc[i]);
80105f9c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80105fa3:	eb 1c                	jmp    80105fc1 <procdump+0xc1>
80105fa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105fa8:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
80105fac:	83 ec 08             	sub    $0x8,%esp
80105faf:	50                   	push   %eax
80105fb0:	68 a3 91 10 80       	push   $0x801091a3
80105fb5:	e8 74 af ff ff       	call   80100f2e <cprintf>
80105fba:	83 c4 10             	add    $0x10,%esp
80105fbd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80105fc1:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
80105fc5:	7f 0b                	jg     80105fd2 <procdump+0xd2>
80105fc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105fca:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
80105fce:	85 c0                	test   %eax,%eax
80105fd0:	75 d3                	jne    80105fa5 <procdump+0xa5>
        }
        cprintf("\n");
80105fd2:	83 ec 0c             	sub    $0xc,%esp
80105fd5:	68 a7 91 10 80       	push   $0x801091a7
80105fda:	e8 4f af ff ff       	call   80100f2e <cprintf>
80105fdf:	83 c4 10             	add    $0x10,%esp
80105fe2:	eb 01                	jmp    80105fe5 <procdump+0xe5>
        if (p->state == UNUSED) continue;
80105fe4:	90                   	nop
    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80105fe5:	83 6d f0 80          	subl   $0xffffff80,-0x10(%ebp)
80105fe9:	81 7d f0 b4 59 11 80 	cmpl   $0x801159b4,-0x10(%ebp)
80105ff0:	0f 82 1c ff ff ff    	jb     80105f12 <procdump+0x12>
    }
}
80105ff6:	90                   	nop
80105ff7:	90                   	nop
80105ff8:	c9                   	leave  
80105ff9:	c3                   	ret    

80105ffa <setuid>:

int setuid(int id) {
80105ffa:	55                   	push   %ebp
80105ffb:	89 e5                	mov    %esp,%ebp
80105ffd:	83 ec 18             	sub    $0x18,%esp
    struct proc* p = myproc();
80106000:	e8 8c f4 ff ff       	call   80105491 <myproc>
80106005:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p->uid == 0 && id >= 0 && id <= 0xFFFF) {
80106008:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010600b:	8b 40 7c             	mov    0x7c(%eax),%eax
8010600e:	85 c0                	test   %eax,%eax
80106010:	75 1f                	jne    80106031 <setuid+0x37>
80106012:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80106016:	78 19                	js     80106031 <setuid+0x37>
80106018:	81 7d 08 ff ff 00 00 	cmpl   $0xffff,0x8(%ebp)
8010601f:	7f 10                	jg     80106031 <setuid+0x37>
        p->uid = id;
80106021:	8b 55 08             	mov    0x8(%ebp),%edx
80106024:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106027:	89 50 7c             	mov    %edx,0x7c(%eax)
        return 0;
8010602a:	b8 00 00 00 00       	mov    $0x0,%eax
8010602f:	eb 05                	jmp    80106036 <setuid+0x3c>
    }
    return -1;
80106031:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80106036:	c9                   	leave  
80106037:	c3                   	ret    

80106038 <getuid>:

int getuid(void) { return myproc()->uid; }
80106038:	55                   	push   %ebp
80106039:	89 e5                	mov    %esp,%ebp
8010603b:	83 ec 08             	sub    $0x8,%esp
8010603e:	e8 4e f4 ff ff       	call   80105491 <myproc>
80106043:	8b 40 7c             	mov    0x7c(%eax),%eax
80106046:	c9                   	leave  
80106047:	c3                   	ret    

80106048 <initsleeplock>:
#include "mmu.h"
#include "proc.h"
#include "spinlock.h"
#include "sleeplock.h"

void initsleeplock(struct sleeplock* lk, char* name) {
80106048:	55                   	push   %ebp
80106049:	89 e5                	mov    %esp,%ebp
8010604b:	83 ec 08             	sub    $0x8,%esp
    initlock(&lk->lk, "sleep lock");
8010604e:	8b 45 08             	mov    0x8(%ebp),%eax
80106051:	83 c0 04             	add    $0x4,%eax
80106054:	83 ec 08             	sub    $0x8,%esp
80106057:	68 d3 91 10 80       	push   $0x801091d3
8010605c:	50                   	push   %eax
8010605d:	e8 4f 01 00 00       	call   801061b1 <initlock>
80106062:	83 c4 10             	add    $0x10,%esp
    lk->name = name;
80106065:	8b 45 08             	mov    0x8(%ebp),%eax
80106068:	8b 55 0c             	mov    0xc(%ebp),%edx
8010606b:	89 50 38             	mov    %edx,0x38(%eax)
    lk->locked = 0;
8010606e:	8b 45 08             	mov    0x8(%ebp),%eax
80106071:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    lk->pid = 0;
80106077:	8b 45 08             	mov    0x8(%ebp),%eax
8010607a:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
}
80106081:	90                   	nop
80106082:	c9                   	leave  
80106083:	c3                   	ret    

80106084 <acquiresleep>:

void acquiresleep(struct sleeplock* lk) {
80106084:	55                   	push   %ebp
80106085:	89 e5                	mov    %esp,%ebp
80106087:	83 ec 08             	sub    $0x8,%esp
    acquire(&lk->lk);
8010608a:	8b 45 08             	mov    0x8(%ebp),%eax
8010608d:	83 c0 04             	add    $0x4,%eax
80106090:	83 ec 0c             	sub    $0xc,%esp
80106093:	50                   	push   %eax
80106094:	e8 49 01 00 00       	call   801061e2 <acquire>
80106099:	83 c4 10             	add    $0x10,%esp
    while (lk->locked) {
8010609c:	eb 15                	jmp    801060b3 <acquiresleep+0x2f>
        sleep(lk, &lk->lk);
8010609e:	8b 45 08             	mov    0x8(%ebp),%eax
801060a1:	83 c0 04             	add    $0x4,%eax
801060a4:	83 ec 08             	sub    $0x8,%esp
801060a7:	50                   	push   %eax
801060a8:	ff 75 08             	push   0x8(%ebp)
801060ab:	e8 ae fc ff ff       	call   80105d5e <sleep>
801060b0:	83 c4 10             	add    $0x10,%esp
    while (lk->locked) {
801060b3:	8b 45 08             	mov    0x8(%ebp),%eax
801060b6:	8b 00                	mov    (%eax),%eax
801060b8:	85 c0                	test   %eax,%eax
801060ba:	75 e2                	jne    8010609e <acquiresleep+0x1a>
    }
    lk->locked = 1;
801060bc:	8b 45 08             	mov    0x8(%ebp),%eax
801060bf:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    lk->pid = myproc()->pid;
801060c5:	e8 c7 f3 ff ff       	call   80105491 <myproc>
801060ca:	8b 50 10             	mov    0x10(%eax),%edx
801060cd:	8b 45 08             	mov    0x8(%ebp),%eax
801060d0:	89 50 3c             	mov    %edx,0x3c(%eax)
    release(&lk->lk);
801060d3:	8b 45 08             	mov    0x8(%ebp),%eax
801060d6:	83 c0 04             	add    $0x4,%eax
801060d9:	83 ec 0c             	sub    $0xc,%esp
801060dc:	50                   	push   %eax
801060dd:	e8 73 01 00 00       	call   80106255 <release>
801060e2:	83 c4 10             	add    $0x10,%esp
}
801060e5:	90                   	nop
801060e6:	c9                   	leave  
801060e7:	c3                   	ret    

801060e8 <releasesleep>:

void releasesleep(struct sleeplock* lk) {
801060e8:	55                   	push   %ebp
801060e9:	89 e5                	mov    %esp,%ebp
801060eb:	83 ec 08             	sub    $0x8,%esp
    acquire(&lk->lk);
801060ee:	8b 45 08             	mov    0x8(%ebp),%eax
801060f1:	83 c0 04             	add    $0x4,%eax
801060f4:	83 ec 0c             	sub    $0xc,%esp
801060f7:	50                   	push   %eax
801060f8:	e8 e5 00 00 00       	call   801061e2 <acquire>
801060fd:	83 c4 10             	add    $0x10,%esp
    lk->locked = 0;
80106100:	8b 45 08             	mov    0x8(%ebp),%eax
80106103:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    lk->pid = 0;
80106109:	8b 45 08             	mov    0x8(%ebp),%eax
8010610c:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
    wakeup(lk);
80106113:	83 ec 0c             	sub    $0xc,%esp
80106116:	ff 75 08             	push   0x8(%ebp)
80106119:	e8 27 fd ff ff       	call   80105e45 <wakeup>
8010611e:	83 c4 10             	add    $0x10,%esp
    release(&lk->lk);
80106121:	8b 45 08             	mov    0x8(%ebp),%eax
80106124:	83 c0 04             	add    $0x4,%eax
80106127:	83 ec 0c             	sub    $0xc,%esp
8010612a:	50                   	push   %eax
8010612b:	e8 25 01 00 00       	call   80106255 <release>
80106130:	83 c4 10             	add    $0x10,%esp
}
80106133:	90                   	nop
80106134:	c9                   	leave  
80106135:	c3                   	ret    

80106136 <holdingsleep>:

int holdingsleep(struct sleeplock* lk) {
80106136:	55                   	push   %ebp
80106137:	89 e5                	mov    %esp,%ebp
80106139:	53                   	push   %ebx
8010613a:	83 ec 14             	sub    $0x14,%esp
    int r;

    acquire(&lk->lk);
8010613d:	8b 45 08             	mov    0x8(%ebp),%eax
80106140:	83 c0 04             	add    $0x4,%eax
80106143:	83 ec 0c             	sub    $0xc,%esp
80106146:	50                   	push   %eax
80106147:	e8 96 00 00 00       	call   801061e2 <acquire>
8010614c:	83 c4 10             	add    $0x10,%esp
    r = lk->locked && (lk->pid == myproc()->pid);
8010614f:	8b 45 08             	mov    0x8(%ebp),%eax
80106152:	8b 00                	mov    (%eax),%eax
80106154:	85 c0                	test   %eax,%eax
80106156:	74 19                	je     80106171 <holdingsleep+0x3b>
80106158:	8b 45 08             	mov    0x8(%ebp),%eax
8010615b:	8b 58 3c             	mov    0x3c(%eax),%ebx
8010615e:	e8 2e f3 ff ff       	call   80105491 <myproc>
80106163:	8b 40 10             	mov    0x10(%eax),%eax
80106166:	39 c3                	cmp    %eax,%ebx
80106168:	75 07                	jne    80106171 <holdingsleep+0x3b>
8010616a:	b8 01 00 00 00       	mov    $0x1,%eax
8010616f:	eb 05                	jmp    80106176 <holdingsleep+0x40>
80106171:	b8 00 00 00 00       	mov    $0x0,%eax
80106176:	89 45 f4             	mov    %eax,-0xc(%ebp)
    release(&lk->lk);
80106179:	8b 45 08             	mov    0x8(%ebp),%eax
8010617c:	83 c0 04             	add    $0x4,%eax
8010617f:	83 ec 0c             	sub    $0xc,%esp
80106182:	50                   	push   %eax
80106183:	e8 cd 00 00 00       	call   80106255 <release>
80106188:	83 c4 10             	add    $0x10,%esp
    return r;
8010618b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
8010618e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80106191:	c9                   	leave  
80106192:	c3                   	ret    

80106193 <readeflags>:
{
80106193:	55                   	push   %ebp
80106194:	89 e5                	mov    %esp,%ebp
80106196:	83 ec 10             	sub    $0x10,%esp
  __asm__ volatile("pushfl; popl %0" : "=r" (eflags));
80106199:	9c                   	pushf  
8010619a:	58                   	pop    %eax
8010619b:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return eflags;
8010619e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
801061a1:	c9                   	leave  
801061a2:	c3                   	ret    

801061a3 <cli>:
{
801061a3:	55                   	push   %ebp
801061a4:	89 e5                	mov    %esp,%ebp
  __asm__ volatile("cli");
801061a6:	fa                   	cli    
}
801061a7:	90                   	nop
801061a8:	5d                   	pop    %ebp
801061a9:	c3                   	ret    

801061aa <sti>:
{
801061aa:	55                   	push   %ebp
801061ab:	89 e5                	mov    %esp,%ebp
  __asm__ volatile("sti");
801061ad:	fb                   	sti    
}
801061ae:	90                   	nop
801061af:	5d                   	pop    %ebp
801061b0:	c3                   	ret    

801061b1 <initlock>:
#include "memlayout.h"
#include "mmu.h"
#include "proc.h"
#include "spinlock.h"

void initlock(struct spinlock* lk, char* name) {
801061b1:	55                   	push   %ebp
801061b2:	89 e5                	mov    %esp,%ebp
801061b4:	83 ec 10             	sub    $0x10,%esp
    atomic_init(&lk->locked, 0);
801061b7:	8b 45 08             	mov    0x8(%ebp),%eax
801061ba:	89 45 fc             	mov    %eax,-0x4(%ebp)
801061bd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
801061c4:	8b 55 f8             	mov    -0x8(%ebp),%edx
801061c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
801061ca:	89 10                	mov    %edx,(%eax)

    lk->name = name;
801061cc:	8b 45 08             	mov    0x8(%ebp),%eax
801061cf:	8b 55 0c             	mov    0xc(%ebp),%edx
801061d2:	89 50 04             	mov    %edx,0x4(%eax)
    lk->cpu = 0;
801061d5:	8b 45 08             	mov    0x8(%ebp),%eax
801061d8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
801061df:	90                   	nop
801061e0:	c9                   	leave  
801061e1:	c3                   	ret    

801061e2 <acquire>:

// Acquire the lock.
// Loops (spins) until the lock is acquired.
// Holding a lock for a long time may cause
// other CPUs to waste time spinning to acquire it.
void acquire(struct spinlock* lk) {
801061e2:	55                   	push   %ebp
801061e3:	89 e5                	mov    %esp,%ebp
801061e5:	53                   	push   %ebx
801061e6:	83 ec 14             	sub    $0x14,%esp
    pushcli();  // disable interrupts to avoid deadlock.
801061e9:	e8 7e 01 00 00       	call   8010636c <pushcli>
    if (holding(lk)) panic("acquire");
801061ee:	8b 45 08             	mov    0x8(%ebp),%eax
801061f1:	83 ec 0c             	sub    $0xc,%esp
801061f4:	50                   	push   %eax
801061f5:	e8 2c 01 00 00       	call   80106326 <holding>
801061fa:	83 c4 10             	add    $0x10,%esp
801061fd:	85 c0                	test   %eax,%eax
801061ff:	74 0d                	je     8010620e <acquire+0x2c>
80106201:	83 ec 0c             	sub    $0xc,%esp
80106204:	68 de 91 10 80       	push   $0x801091de
80106209:	e8 d5 ae ff ff       	call   801010e3 <panic>
    //  Here we atomically exchange locked with 1.  If locked was 0, then we've
    //    just acquired the lock!
    //  We use the acquire release semantics (orderings).  We really only want
    //    acquire semantics, but we are doing a read and modify operation at once
    //    which requires acquire (write) and release (read) ordering semantics.
    while (atomic_exchange_explicit(&lk->locked, 1, memory_order_acq_rel) != 0)
8010620e:	90                   	nop
8010620f:	8b 45 08             	mov    0x8(%ebp),%eax
80106212:	89 45 f4             	mov    %eax,-0xc(%ebp)
80106215:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
8010621c:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010621f:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106222:	87 02                	xchg   %eax,(%edx)
80106224:	89 45 ec             	mov    %eax,-0x14(%ebp)
80106227:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010622a:	85 c0                	test   %eax,%eax
8010622c:	75 e1                	jne    8010620f <acquire+0x2d>
        ;

    // Record info about lock acquisition for debugging.
    lk->cpu = mycpu();
8010622e:	8b 5d 08             	mov    0x8(%ebp),%ebx
80106231:	e8 e3 f1 ff ff       	call   80105419 <mycpu>
80106236:	89 43 08             	mov    %eax,0x8(%ebx)
    getcallerpcs(&lk, lk->pcs);
80106239:	8b 45 08             	mov    0x8(%ebp),%eax
8010623c:	83 c0 0c             	add    $0xc,%eax
8010623f:	83 ec 08             	sub    $0x8,%esp
80106242:	50                   	push   %eax
80106243:	8d 45 08             	lea    0x8(%ebp),%eax
80106246:	50                   	push   %eax
80106247:	e8 5f 00 00 00       	call   801062ab <getcallerpcs>
8010624c:	83 c4 10             	add    $0x10,%esp
}
8010624f:	90                   	nop
80106250:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80106253:	c9                   	leave  
80106254:	c3                   	ret    

80106255 <release>:

// Release the lock.
void release(struct spinlock* lk) {
80106255:	55                   	push   %ebp
80106256:	89 e5                	mov    %esp,%ebp
80106258:	83 ec 18             	sub    $0x18,%esp
    if (!holding(lk)) panic("release");
8010625b:	83 ec 0c             	sub    $0xc,%esp
8010625e:	ff 75 08             	push   0x8(%ebp)
80106261:	e8 c0 00 00 00       	call   80106326 <holding>
80106266:	83 c4 10             	add    $0x10,%esp
80106269:	85 c0                	test   %eax,%eax
8010626b:	75 0d                	jne    8010627a <release+0x25>
8010626d:	83 ec 0c             	sub    $0xc,%esp
80106270:	68 e6 91 10 80       	push   $0x801091e6
80106275:	e8 69 ae ff ff       	call   801010e3 <panic>

    lk->pcs[0] = 0;
8010627a:	8b 45 08             	mov    0x8(%ebp),%eax
8010627d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    lk->cpu = 0;
80106284:	8b 45 08             	mov    0x8(%ebp),%eax
80106287:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

    // Use c11 atomics to release the lock.
    //  Here we set the locked value to 0 atomically
    //  We also give it "release" semantics, as we're doing an unlock
    //    (e.g. release) operation
    atomic_store_explicit(&lk->locked, 0, memory_order_release);
8010628e:	8b 45 08             	mov    0x8(%ebp),%eax
80106291:	89 45 f4             	mov    %eax,-0xc(%ebp)
80106294:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
8010629b:	8b 55 f0             	mov    -0x10(%ebp),%edx
8010629e:	8b 45 f4             	mov    -0xc(%ebp),%eax
801062a1:	89 10                	mov    %edx,(%eax)

    popcli();
801062a3:	e8 11 01 00 00       	call   801063b9 <popcli>
}
801062a8:	90                   	nop
801062a9:	c9                   	leave  
801062aa:	c3                   	ret    

801062ab <getcallerpcs>:

// Record the current call stack in pcs[] by following the %ebp chain.
void getcallerpcs(void* v, uint pcs[]) {
801062ab:	55                   	push   %ebp
801062ac:	89 e5                	mov    %esp,%ebp
801062ae:	83 ec 10             	sub    $0x10,%esp
    uint* ebp;
    int i;

    ebp = (uint*) v - 2;
801062b1:	8b 45 08             	mov    0x8(%ebp),%eax
801062b4:	83 e8 08             	sub    $0x8,%eax
801062b7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (i = 0; i < 10; i++) {
801062ba:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
801062c1:	eb 38                	jmp    801062fb <getcallerpcs+0x50>
        if (ebp == 0 || ebp < (uint*) KERNBASE || ebp == (uint*) 0xffffffff)
801062c3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
801062c7:	74 53                	je     8010631c <getcallerpcs+0x71>
801062c9:	81 7d fc ff ff ff 7f 	cmpl   $0x7fffffff,-0x4(%ebp)
801062d0:	76 4a                	jbe    8010631c <getcallerpcs+0x71>
801062d2:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
801062d6:	74 44                	je     8010631c <getcallerpcs+0x71>
            break;
        pcs[i] = ebp[1];       // saved %eip
801062d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
801062db:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
801062e2:	8b 45 0c             	mov    0xc(%ebp),%eax
801062e5:	01 c2                	add    %eax,%edx
801062e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
801062ea:	8b 40 04             	mov    0x4(%eax),%eax
801062ed:	89 02                	mov    %eax,(%edx)
        ebp = (uint*) ebp[0];  // saved %ebp
801062ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
801062f2:	8b 00                	mov    (%eax),%eax
801062f4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (i = 0; i < 10; i++) {
801062f7:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
801062fb:	83 7d f8 09          	cmpl   $0x9,-0x8(%ebp)
801062ff:	7e c2                	jle    801062c3 <getcallerpcs+0x18>
    }
    for (; i < 10; i++) pcs[i] = 0;
80106301:	eb 19                	jmp    8010631c <getcallerpcs+0x71>
80106303:	8b 45 f8             	mov    -0x8(%ebp),%eax
80106306:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
8010630d:	8b 45 0c             	mov    0xc(%ebp),%eax
80106310:	01 d0                	add    %edx,%eax
80106312:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
80106318:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
8010631c:	83 7d f8 09          	cmpl   $0x9,-0x8(%ebp)
80106320:	7e e1                	jle    80106303 <getcallerpcs+0x58>
}
80106322:	90                   	nop
80106323:	90                   	nop
80106324:	c9                   	leave  
80106325:	c3                   	ret    

80106326 <holding>:

// Check whether this cpu is holding the lock.
int holding(struct spinlock* lock) {
80106326:	55                   	push   %ebp
80106327:	89 e5                	mov    %esp,%ebp
80106329:	53                   	push   %ebx
8010632a:	83 ec 14             	sub    $0x14,%esp
    int r;
    pushcli();
8010632d:	e8 3a 00 00 00       	call   8010636c <pushcli>
    r = lock->locked && lock->cpu == mycpu();
80106332:	8b 45 08             	mov    0x8(%ebp),%eax
80106335:	8b 00                	mov    (%eax),%eax
80106337:	89 45 f0             	mov    %eax,-0x10(%ebp)
8010633a:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010633d:	85 c0                	test   %eax,%eax
8010633f:	74 16                	je     80106357 <holding+0x31>
80106341:	8b 45 08             	mov    0x8(%ebp),%eax
80106344:	8b 58 08             	mov    0x8(%eax),%ebx
80106347:	e8 cd f0 ff ff       	call   80105419 <mycpu>
8010634c:	39 c3                	cmp    %eax,%ebx
8010634e:	75 07                	jne    80106357 <holding+0x31>
80106350:	b8 01 00 00 00       	mov    $0x1,%eax
80106355:	eb 05                	jmp    8010635c <holding+0x36>
80106357:	b8 00 00 00 00       	mov    $0x0,%eax
8010635c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    popcli();
8010635f:	e8 55 00 00 00       	call   801063b9 <popcli>
    return r;
80106364:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
80106367:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010636a:	c9                   	leave  
8010636b:	c3                   	ret    

8010636c <pushcli>:

// Pushcli/popcli are like cli/sti except that they are matched:
// it takes two popcli to undo two pushcli.  Also, if interrupts
// are off, then pushcli, popcli leaves them off.

void pushcli(void) {
8010636c:	55                   	push   %ebp
8010636d:	89 e5                	mov    %esp,%ebp
8010636f:	83 ec 18             	sub    $0x18,%esp
    int eflags;

    eflags = readeflags();
80106372:	e8 1c fe ff ff       	call   80106193 <readeflags>
80106377:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cli();
8010637a:	e8 24 fe ff ff       	call   801061a3 <cli>
    if (mycpu()->ncli == 0) mycpu()->intena = eflags & FL_IF;
8010637f:	e8 95 f0 ff ff       	call   80105419 <mycpu>
80106384:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
8010638a:	85 c0                	test   %eax,%eax
8010638c:	75 14                	jne    801063a2 <pushcli+0x36>
8010638e:	e8 86 f0 ff ff       	call   80105419 <mycpu>
80106393:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106396:	81 e2 00 02 00 00    	and    $0x200,%edx
8010639c:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
    mycpu()->ncli += 1;
801063a2:	e8 72 f0 ff ff       	call   80105419 <mycpu>
801063a7:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
801063ad:	83 c2 01             	add    $0x1,%edx
801063b0:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
}
801063b6:	90                   	nop
801063b7:	c9                   	leave  
801063b8:	c3                   	ret    

801063b9 <popcli>:

void popcli(void) {
801063b9:	55                   	push   %ebp
801063ba:	89 e5                	mov    %esp,%ebp
801063bc:	83 ec 08             	sub    $0x8,%esp
    if (readeflags() & FL_IF) panic("popcli - interruptible");
801063bf:	e8 cf fd ff ff       	call   80106193 <readeflags>
801063c4:	25 00 02 00 00       	and    $0x200,%eax
801063c9:	85 c0                	test   %eax,%eax
801063cb:	74 0d                	je     801063da <popcli+0x21>
801063cd:	83 ec 0c             	sub    $0xc,%esp
801063d0:	68 ee 91 10 80       	push   $0x801091ee
801063d5:	e8 09 ad ff ff       	call   801010e3 <panic>
    if (--mycpu()->ncli < 0) panic("popcli");
801063da:	e8 3a f0 ff ff       	call   80105419 <mycpu>
801063df:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
801063e5:	83 ea 01             	sub    $0x1,%edx
801063e8:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
801063ee:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
801063f4:	85 c0                	test   %eax,%eax
801063f6:	79 0d                	jns    80106405 <popcli+0x4c>
801063f8:	83 ec 0c             	sub    $0xc,%esp
801063fb:	68 05 92 10 80       	push   $0x80109205
80106400:	e8 de ac ff ff       	call   801010e3 <panic>
    if (mycpu()->ncli == 0 && mycpu()->intena) sti();
80106405:	e8 0f f0 ff ff       	call   80105419 <mycpu>
8010640a:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
80106410:	85 c0                	test   %eax,%eax
80106412:	75 14                	jne    80106428 <popcli+0x6f>
80106414:	e8 00 f0 ff ff       	call   80105419 <mycpu>
80106419:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
8010641f:	85 c0                	test   %eax,%eax
80106421:	74 05                	je     80106428 <popcli+0x6f>
80106423:	e8 82 fd ff ff       	call   801061aa <sti>
}
80106428:	90                   	nop
80106429:	c9                   	leave  
8010642a:	c3                   	ret    

8010642b <stosb>:
{
8010642b:	55                   	push   %ebp
8010642c:	89 e5                	mov    %esp,%ebp
8010642e:	57                   	push   %edi
8010642f:	53                   	push   %ebx
  __asm__ volatile("cld; rep stosb" :
80106430:	8b 4d 08             	mov    0x8(%ebp),%ecx
80106433:	8b 55 10             	mov    0x10(%ebp),%edx
80106436:	8b 45 0c             	mov    0xc(%ebp),%eax
80106439:	89 cb                	mov    %ecx,%ebx
8010643b:	89 df                	mov    %ebx,%edi
8010643d:	89 d1                	mov    %edx,%ecx
8010643f:	fc                   	cld    
80106440:	f3 aa                	rep stos %al,%es:(%edi)
80106442:	89 ca                	mov    %ecx,%edx
80106444:	89 fb                	mov    %edi,%ebx
80106446:	89 5d 08             	mov    %ebx,0x8(%ebp)
80106449:	89 55 10             	mov    %edx,0x10(%ebp)
}
8010644c:	90                   	nop
8010644d:	5b                   	pop    %ebx
8010644e:	5f                   	pop    %edi
8010644f:	5d                   	pop    %ebp
80106450:	c3                   	ret    

80106451 <stosl>:
{
80106451:	55                   	push   %ebp
80106452:	89 e5                	mov    %esp,%ebp
80106454:	57                   	push   %edi
80106455:	53                   	push   %ebx
  __asm__ volatile("cld; rep stosl" :
80106456:	8b 4d 08             	mov    0x8(%ebp),%ecx
80106459:	8b 55 10             	mov    0x10(%ebp),%edx
8010645c:	8b 45 0c             	mov    0xc(%ebp),%eax
8010645f:	89 cb                	mov    %ecx,%ebx
80106461:	89 df                	mov    %ebx,%edi
80106463:	89 d1                	mov    %edx,%ecx
80106465:	fc                   	cld    
80106466:	f3 ab                	rep stos %eax,%es:(%edi)
80106468:	89 ca                	mov    %ecx,%edx
8010646a:	89 fb                	mov    %edi,%ebx
8010646c:	89 5d 08             	mov    %ebx,0x8(%ebp)
8010646f:	89 55 10             	mov    %edx,0x10(%ebp)
}
80106472:	90                   	nop
80106473:	5b                   	pop    %ebx
80106474:	5f                   	pop    %edi
80106475:	5d                   	pop    %ebp
80106476:	c3                   	ret    

80106477 <memset>:
#include "asm/x86.h"
#include "types.h"

void* memset(void* dst, int c, uint n) {
80106477:	55                   	push   %ebp
80106478:	89 e5                	mov    %esp,%ebp
    if ((int) dst % 4 == 0 && n % 4 == 0) {
8010647a:	8b 45 08             	mov    0x8(%ebp),%eax
8010647d:	83 e0 03             	and    $0x3,%eax
80106480:	85 c0                	test   %eax,%eax
80106482:	75 43                	jne    801064c7 <memset+0x50>
80106484:	8b 45 10             	mov    0x10(%ebp),%eax
80106487:	83 e0 03             	and    $0x3,%eax
8010648a:	85 c0                	test   %eax,%eax
8010648c:	75 39                	jne    801064c7 <memset+0x50>
        c &= 0xFF;
8010648e:	81 65 0c ff 00 00 00 	andl   $0xff,0xc(%ebp)
        stosl(dst, (c << 24) | (c << 16) | (c << 8) | c, n / 4);
80106495:	8b 45 10             	mov    0x10(%ebp),%eax
80106498:	c1 e8 02             	shr    $0x2,%eax
8010649b:	89 c2                	mov    %eax,%edx
8010649d:	8b 45 0c             	mov    0xc(%ebp),%eax
801064a0:	c1 e0 18             	shl    $0x18,%eax
801064a3:	89 c1                	mov    %eax,%ecx
801064a5:	8b 45 0c             	mov    0xc(%ebp),%eax
801064a8:	c1 e0 10             	shl    $0x10,%eax
801064ab:	09 c1                	or     %eax,%ecx
801064ad:	8b 45 0c             	mov    0xc(%ebp),%eax
801064b0:	c1 e0 08             	shl    $0x8,%eax
801064b3:	09 c8                	or     %ecx,%eax
801064b5:	0b 45 0c             	or     0xc(%ebp),%eax
801064b8:	52                   	push   %edx
801064b9:	50                   	push   %eax
801064ba:	ff 75 08             	push   0x8(%ebp)
801064bd:	e8 8f ff ff ff       	call   80106451 <stosl>
801064c2:	83 c4 0c             	add    $0xc,%esp
801064c5:	eb 12                	jmp    801064d9 <memset+0x62>
    } else
        stosb(dst, c, n);
801064c7:	8b 45 10             	mov    0x10(%ebp),%eax
801064ca:	50                   	push   %eax
801064cb:	ff 75 0c             	push   0xc(%ebp)
801064ce:	ff 75 08             	push   0x8(%ebp)
801064d1:	e8 55 ff ff ff       	call   8010642b <stosb>
801064d6:	83 c4 0c             	add    $0xc,%esp
    return dst;
801064d9:	8b 45 08             	mov    0x8(%ebp),%eax
}
801064dc:	c9                   	leave  
801064dd:	c3                   	ret    

801064de <memcmp>:

int memcmp(const void* v1, const void* v2, uint n) {
801064de:	55                   	push   %ebp
801064df:	89 e5                	mov    %esp,%ebp
801064e1:	83 ec 10             	sub    $0x10,%esp
    const uchar *s1, *s2;

    s1 = v1;
801064e4:	8b 45 08             	mov    0x8(%ebp),%eax
801064e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    s2 = v2;
801064ea:	8b 45 0c             	mov    0xc(%ebp),%eax
801064ed:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n-- > 0) {
801064f0:	eb 30                	jmp    80106522 <memcmp+0x44>
        if (*s1 != *s2) return *s1 - *s2;
801064f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
801064f5:	0f b6 10             	movzbl (%eax),%edx
801064f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
801064fb:	0f b6 00             	movzbl (%eax),%eax
801064fe:	38 c2                	cmp    %al,%dl
80106500:	74 18                	je     8010651a <memcmp+0x3c>
80106502:	8b 45 fc             	mov    -0x4(%ebp),%eax
80106505:	0f b6 00             	movzbl (%eax),%eax
80106508:	0f b6 d0             	movzbl %al,%edx
8010650b:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010650e:	0f b6 00             	movzbl (%eax),%eax
80106511:	0f b6 c8             	movzbl %al,%ecx
80106514:	89 d0                	mov    %edx,%eax
80106516:	29 c8                	sub    %ecx,%eax
80106518:	eb 1a                	jmp    80106534 <memcmp+0x56>
        s1++, s2++;
8010651a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
8010651e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (n-- > 0) {
80106522:	8b 45 10             	mov    0x10(%ebp),%eax
80106525:	8d 50 ff             	lea    -0x1(%eax),%edx
80106528:	89 55 10             	mov    %edx,0x10(%ebp)
8010652b:	85 c0                	test   %eax,%eax
8010652d:	75 c3                	jne    801064f2 <memcmp+0x14>
    }

    return 0;
8010652f:	b8 00 00 00 00       	mov    $0x0,%eax
}
80106534:	c9                   	leave  
80106535:	c3                   	ret    

80106536 <memmove>:

void* memmove(void* dst, const void* src, uint n) {
80106536:	55                   	push   %ebp
80106537:	89 e5                	mov    %esp,%ebp
80106539:	83 ec 10             	sub    $0x10,%esp
    const char* s;
    char* d;

    s = src;
8010653c:	8b 45 0c             	mov    0xc(%ebp),%eax
8010653f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    d = dst;
80106542:	8b 45 08             	mov    0x8(%ebp),%eax
80106545:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (s < d && s + n > d) {
80106548:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010654b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
8010654e:	73 54                	jae    801065a4 <memmove+0x6e>
80106550:	8b 55 fc             	mov    -0x4(%ebp),%edx
80106553:	8b 45 10             	mov    0x10(%ebp),%eax
80106556:	01 d0                	add    %edx,%eax
80106558:	39 45 f8             	cmp    %eax,-0x8(%ebp)
8010655b:	73 47                	jae    801065a4 <memmove+0x6e>
        s += n;
8010655d:	8b 45 10             	mov    0x10(%ebp),%eax
80106560:	01 45 fc             	add    %eax,-0x4(%ebp)
        d += n;
80106563:	8b 45 10             	mov    0x10(%ebp),%eax
80106566:	01 45 f8             	add    %eax,-0x8(%ebp)
        while (n-- > 0) *--d = *--s;
80106569:	eb 13                	jmp    8010657e <memmove+0x48>
8010656b:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
8010656f:	83 6d f8 01          	subl   $0x1,-0x8(%ebp)
80106573:	8b 45 fc             	mov    -0x4(%ebp),%eax
80106576:	0f b6 10             	movzbl (%eax),%edx
80106579:	8b 45 f8             	mov    -0x8(%ebp),%eax
8010657c:	88 10                	mov    %dl,(%eax)
8010657e:	8b 45 10             	mov    0x10(%ebp),%eax
80106581:	8d 50 ff             	lea    -0x1(%eax),%edx
80106584:	89 55 10             	mov    %edx,0x10(%ebp)
80106587:	85 c0                	test   %eax,%eax
80106589:	75 e0                	jne    8010656b <memmove+0x35>
    if (s < d && s + n > d) {
8010658b:	eb 24                	jmp    801065b1 <memmove+0x7b>
    } else
        while (n-- > 0) *d++ = *s++;
8010658d:	8b 55 fc             	mov    -0x4(%ebp),%edx
80106590:	8d 42 01             	lea    0x1(%edx),%eax
80106593:	89 45 fc             	mov    %eax,-0x4(%ebp)
80106596:	8b 45 f8             	mov    -0x8(%ebp),%eax
80106599:	8d 48 01             	lea    0x1(%eax),%ecx
8010659c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
8010659f:	0f b6 12             	movzbl (%edx),%edx
801065a2:	88 10                	mov    %dl,(%eax)
801065a4:	8b 45 10             	mov    0x10(%ebp),%eax
801065a7:	8d 50 ff             	lea    -0x1(%eax),%edx
801065aa:	89 55 10             	mov    %edx,0x10(%ebp)
801065ad:	85 c0                	test   %eax,%eax
801065af:	75 dc                	jne    8010658d <memmove+0x57>

    return dst;
801065b1:	8b 45 08             	mov    0x8(%ebp),%eax
}
801065b4:	c9                   	leave  
801065b5:	c3                   	ret    

801065b6 <memcpy>:

// memcpy exists to placate GCC.  Use memmove.
void* memcpy(void* dst, const void* src, uint n) {
801065b6:	55                   	push   %ebp
801065b7:	89 e5                	mov    %esp,%ebp
    return memmove(dst, src, n);
801065b9:	ff 75 10             	push   0x10(%ebp)
801065bc:	ff 75 0c             	push   0xc(%ebp)
801065bf:	ff 75 08             	push   0x8(%ebp)
801065c2:	e8 6f ff ff ff       	call   80106536 <memmove>
801065c7:	83 c4 0c             	add    $0xc,%esp
}
801065ca:	c9                   	leave  
801065cb:	c3                   	ret    

801065cc <strncmp>:

int strncmp(const char* p, const char* q, uint n) {
801065cc:	55                   	push   %ebp
801065cd:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *p && *p == *q) n--, p++, q++;
801065cf:	eb 0c                	jmp    801065dd <strncmp+0x11>
801065d1:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
801065d5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
801065d9:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
801065dd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
801065e1:	74 1a                	je     801065fd <strncmp+0x31>
801065e3:	8b 45 08             	mov    0x8(%ebp),%eax
801065e6:	0f b6 00             	movzbl (%eax),%eax
801065e9:	84 c0                	test   %al,%al
801065eb:	74 10                	je     801065fd <strncmp+0x31>
801065ed:	8b 45 08             	mov    0x8(%ebp),%eax
801065f0:	0f b6 10             	movzbl (%eax),%edx
801065f3:	8b 45 0c             	mov    0xc(%ebp),%eax
801065f6:	0f b6 00             	movzbl (%eax),%eax
801065f9:	38 c2                	cmp    %al,%dl
801065fb:	74 d4                	je     801065d1 <strncmp+0x5>
    if (n == 0) return 0;
801065fd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80106601:	75 07                	jne    8010660a <strncmp+0x3e>
80106603:	b8 00 00 00 00       	mov    $0x0,%eax
80106608:	eb 16                	jmp    80106620 <strncmp+0x54>
    return (uchar) *p - (uchar) *q;
8010660a:	8b 45 08             	mov    0x8(%ebp),%eax
8010660d:	0f b6 00             	movzbl (%eax),%eax
80106610:	0f b6 d0             	movzbl %al,%edx
80106613:	8b 45 0c             	mov    0xc(%ebp),%eax
80106616:	0f b6 00             	movzbl (%eax),%eax
80106619:	0f b6 c8             	movzbl %al,%ecx
8010661c:	89 d0                	mov    %edx,%eax
8010661e:	29 c8                	sub    %ecx,%eax
}
80106620:	5d                   	pop    %ebp
80106621:	c3                   	ret    

80106622 <strncpy>:

char* strncpy(char* s, const char* t, int n) {
80106622:	55                   	push   %ebp
80106623:	89 e5                	mov    %esp,%ebp
80106625:	83 ec 10             	sub    $0x10,%esp
    char* os;

    os = s;
80106628:	8b 45 08             	mov    0x8(%ebp),%eax
8010662b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (n-- > 0 && (*s++ = *t++) != 0)
8010662e:	90                   	nop
8010662f:	8b 45 10             	mov    0x10(%ebp),%eax
80106632:	8d 50 ff             	lea    -0x1(%eax),%edx
80106635:	89 55 10             	mov    %edx,0x10(%ebp)
80106638:	85 c0                	test   %eax,%eax
8010663a:	7e 2c                	jle    80106668 <strncpy+0x46>
8010663c:	8b 55 0c             	mov    0xc(%ebp),%edx
8010663f:	8d 42 01             	lea    0x1(%edx),%eax
80106642:	89 45 0c             	mov    %eax,0xc(%ebp)
80106645:	8b 45 08             	mov    0x8(%ebp),%eax
80106648:	8d 48 01             	lea    0x1(%eax),%ecx
8010664b:	89 4d 08             	mov    %ecx,0x8(%ebp)
8010664e:	0f b6 12             	movzbl (%edx),%edx
80106651:	88 10                	mov    %dl,(%eax)
80106653:	0f b6 00             	movzbl (%eax),%eax
80106656:	84 c0                	test   %al,%al
80106658:	75 d5                	jne    8010662f <strncpy+0xd>
        ;
    while (n-- > 0) *s++ = 0;
8010665a:	eb 0c                	jmp    80106668 <strncpy+0x46>
8010665c:	8b 45 08             	mov    0x8(%ebp),%eax
8010665f:	8d 50 01             	lea    0x1(%eax),%edx
80106662:	89 55 08             	mov    %edx,0x8(%ebp)
80106665:	c6 00 00             	movb   $0x0,(%eax)
80106668:	8b 45 10             	mov    0x10(%ebp),%eax
8010666b:	8d 50 ff             	lea    -0x1(%eax),%edx
8010666e:	89 55 10             	mov    %edx,0x10(%ebp)
80106671:	85 c0                	test   %eax,%eax
80106673:	7f e7                	jg     8010665c <strncpy+0x3a>
    return os;
80106675:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
80106678:	c9                   	leave  
80106679:	c3                   	ret    

8010667a <safestrcpy>:

// Like strncpy but guaranteed to NUL-terminate.
char* safestrcpy(char* s, const char* t, int n) {
8010667a:	55                   	push   %ebp
8010667b:	89 e5                	mov    %esp,%ebp
8010667d:	83 ec 10             	sub    $0x10,%esp
    char* os;

    os = s;
80106680:	8b 45 08             	mov    0x8(%ebp),%eax
80106683:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (n <= 0) return os;
80106686:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
8010668a:	7f 05                	jg     80106691 <safestrcpy+0x17>
8010668c:	8b 45 fc             	mov    -0x4(%ebp),%eax
8010668f:	eb 32                	jmp    801066c3 <safestrcpy+0x49>
    while (--n > 0 && (*s++ = *t++) != 0)
80106691:	90                   	nop
80106692:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
80106696:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
8010669a:	7e 1e                	jle    801066ba <safestrcpy+0x40>
8010669c:	8b 55 0c             	mov    0xc(%ebp),%edx
8010669f:	8d 42 01             	lea    0x1(%edx),%eax
801066a2:	89 45 0c             	mov    %eax,0xc(%ebp)
801066a5:	8b 45 08             	mov    0x8(%ebp),%eax
801066a8:	8d 48 01             	lea    0x1(%eax),%ecx
801066ab:	89 4d 08             	mov    %ecx,0x8(%ebp)
801066ae:	0f b6 12             	movzbl (%edx),%edx
801066b1:	88 10                	mov    %dl,(%eax)
801066b3:	0f b6 00             	movzbl (%eax),%eax
801066b6:	84 c0                	test   %al,%al
801066b8:	75 d8                	jne    80106692 <safestrcpy+0x18>
        ;
    *s = 0;
801066ba:	8b 45 08             	mov    0x8(%ebp),%eax
801066bd:	c6 00 00             	movb   $0x0,(%eax)
    return os;
801066c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
801066c3:	c9                   	leave  
801066c4:	c3                   	ret    

801066c5 <strlen>:

int strlen(const char* s) {
801066c5:	55                   	push   %ebp
801066c6:	89 e5                	mov    %esp,%ebp
801066c8:	83 ec 10             	sub    $0x10,%esp
    int n;

    for (n = 0; s[n]; n++)
801066cb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
801066d2:	eb 04                	jmp    801066d8 <strlen+0x13>
801066d4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
801066d8:	8b 55 fc             	mov    -0x4(%ebp),%edx
801066db:	8b 45 08             	mov    0x8(%ebp),%eax
801066de:	01 d0                	add    %edx,%eax
801066e0:	0f b6 00             	movzbl (%eax),%eax
801066e3:	84 c0                	test   %al,%al
801066e5:	75 ed                	jne    801066d4 <strlen+0xf>
        ;
    return n;
801066e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
801066ea:	c9                   	leave  
801066eb:	c3                   	ret    

801066ec <fetchint>:
// Arguments on the stack, from the user call to the C
// library system call function. The saved user %esp points
// to a saved program counter, and then the first argument.

// Fetch the int at addr from the current process.
int fetchint(uint addr, int* ip) {
801066ec:	55                   	push   %ebp
801066ed:	89 e5                	mov    %esp,%ebp
801066ef:	83 ec 18             	sub    $0x18,%esp
    struct proc* curproc = myproc();
801066f2:	e8 9a ed ff ff       	call   80105491 <myproc>
801066f7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (addr >= curproc->sz || addr + 4 > curproc->sz) return -1;
801066fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
801066fd:	8b 00                	mov    (%eax),%eax
801066ff:	39 45 08             	cmp    %eax,0x8(%ebp)
80106702:	73 0f                	jae    80106713 <fetchint+0x27>
80106704:	8b 45 08             	mov    0x8(%ebp),%eax
80106707:	8d 50 04             	lea    0x4(%eax),%edx
8010670a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010670d:	8b 00                	mov    (%eax),%eax
8010670f:	39 c2                	cmp    %eax,%edx
80106711:	76 07                	jbe    8010671a <fetchint+0x2e>
80106713:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106718:	eb 0f                	jmp    80106729 <fetchint+0x3d>
    *ip = *(int*) (addr);
8010671a:	8b 45 08             	mov    0x8(%ebp),%eax
8010671d:	8b 10                	mov    (%eax),%edx
8010671f:	8b 45 0c             	mov    0xc(%ebp),%eax
80106722:	89 10                	mov    %edx,(%eax)
    return 0;
80106724:	b8 00 00 00 00       	mov    $0x0,%eax
}
80106729:	c9                   	leave  
8010672a:	c3                   	ret    

8010672b <fetchstr>:

// Fetch the nul-terminated string at addr from the current process.
// Doesn't actually copy the string - just sets *pp to point at it.
// Returns length of string, not including nul.
int fetchstr(uint addr, char** pp) {
8010672b:	55                   	push   %ebp
8010672c:	89 e5                	mov    %esp,%ebp
8010672e:	83 ec 18             	sub    $0x18,%esp
    char *s, *ep;
    struct proc* curproc = myproc();
80106731:	e8 5b ed ff ff       	call   80105491 <myproc>
80106736:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (addr >= curproc->sz) return -1;
80106739:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010673c:	8b 00                	mov    (%eax),%eax
8010673e:	39 45 08             	cmp    %eax,0x8(%ebp)
80106741:	72 07                	jb     8010674a <fetchstr+0x1f>
80106743:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106748:	eb 41                	jmp    8010678b <fetchstr+0x60>
    *pp = (char*) addr;
8010674a:	8b 55 08             	mov    0x8(%ebp),%edx
8010674d:	8b 45 0c             	mov    0xc(%ebp),%eax
80106750:	89 10                	mov    %edx,(%eax)
    ep = (char*) curproc->sz;
80106752:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106755:	8b 00                	mov    (%eax),%eax
80106757:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (s = *pp; s < ep; s++) {
8010675a:	8b 45 0c             	mov    0xc(%ebp),%eax
8010675d:	8b 00                	mov    (%eax),%eax
8010675f:	89 45 f4             	mov    %eax,-0xc(%ebp)
80106762:	eb 1a                	jmp    8010677e <fetchstr+0x53>
        if (*s == 0) return s - *pp;
80106764:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106767:	0f b6 00             	movzbl (%eax),%eax
8010676a:	84 c0                	test   %al,%al
8010676c:	75 0c                	jne    8010677a <fetchstr+0x4f>
8010676e:	8b 45 0c             	mov    0xc(%ebp),%eax
80106771:	8b 10                	mov    (%eax),%edx
80106773:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106776:	29 d0                	sub    %edx,%eax
80106778:	eb 11                	jmp    8010678b <fetchstr+0x60>
    for (s = *pp; s < ep; s++) {
8010677a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8010677e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106781:	3b 45 ec             	cmp    -0x14(%ebp),%eax
80106784:	72 de                	jb     80106764 <fetchstr+0x39>
    }
    return -1;
80106786:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010678b:	c9                   	leave  
8010678c:	c3                   	ret    

8010678d <argint>:

// Fetch the nth 32-bit system call argument.
int argint(int n, int* ip) {
8010678d:	55                   	push   %ebp
8010678e:	89 e5                	mov    %esp,%ebp
80106790:	83 ec 08             	sub    $0x8,%esp
    return fetchint((myproc()->tf->esp) + 4 + 4 * n, ip);
80106793:	e8 f9 ec ff ff       	call   80105491 <myproc>
80106798:	8b 40 18             	mov    0x18(%eax),%eax
8010679b:	8b 50 44             	mov    0x44(%eax),%edx
8010679e:	8b 45 08             	mov    0x8(%ebp),%eax
801067a1:	c1 e0 02             	shl    $0x2,%eax
801067a4:	01 d0                	add    %edx,%eax
801067a6:	83 c0 04             	add    $0x4,%eax
801067a9:	83 ec 08             	sub    $0x8,%esp
801067ac:	ff 75 0c             	push   0xc(%ebp)
801067af:	50                   	push   %eax
801067b0:	e8 37 ff ff ff       	call   801066ec <fetchint>
801067b5:	83 c4 10             	add    $0x10,%esp
}
801067b8:	c9                   	leave  
801067b9:	c3                   	ret    

801067ba <argptr>:

// Fetch the nth word-sized system call argument as a pointer
// to a block of memory of size bytes.  Check that the pointer
// lies within the process address space.
int argptr(int n, char** pp, int size) {
801067ba:	55                   	push   %ebp
801067bb:	89 e5                	mov    %esp,%ebp
801067bd:	83 ec 18             	sub    $0x18,%esp
    int i;
    struct proc* curproc = myproc();
801067c0:	e8 cc ec ff ff       	call   80105491 <myproc>
801067c5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (argint(n, &i) < 0) return -1;
801067c8:	83 ec 08             	sub    $0x8,%esp
801067cb:	8d 45 f0             	lea    -0x10(%ebp),%eax
801067ce:	50                   	push   %eax
801067cf:	ff 75 08             	push   0x8(%ebp)
801067d2:	e8 b6 ff ff ff       	call   8010678d <argint>
801067d7:	83 c4 10             	add    $0x10,%esp
801067da:	85 c0                	test   %eax,%eax
801067dc:	79 07                	jns    801067e5 <argptr+0x2b>
801067de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801067e3:	eb 3b                	jmp    80106820 <argptr+0x66>
    if (size < 0 || (uint) i >= curproc->sz || (uint) i + size > curproc->sz)
801067e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
801067e9:	78 1f                	js     8010680a <argptr+0x50>
801067eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
801067ee:	8b 00                	mov    (%eax),%eax
801067f0:	8b 55 f0             	mov    -0x10(%ebp),%edx
801067f3:	39 d0                	cmp    %edx,%eax
801067f5:	76 13                	jbe    8010680a <argptr+0x50>
801067f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
801067fa:	89 c2                	mov    %eax,%edx
801067fc:	8b 45 10             	mov    0x10(%ebp),%eax
801067ff:	01 c2                	add    %eax,%edx
80106801:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106804:	8b 00                	mov    (%eax),%eax
80106806:	39 c2                	cmp    %eax,%edx
80106808:	76 07                	jbe    80106811 <argptr+0x57>
        return -1;
8010680a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010680f:	eb 0f                	jmp    80106820 <argptr+0x66>
    *pp = (char*) i;
80106811:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106814:	89 c2                	mov    %eax,%edx
80106816:	8b 45 0c             	mov    0xc(%ebp),%eax
80106819:	89 10                	mov    %edx,(%eax)
    return 0;
8010681b:	b8 00 00 00 00       	mov    $0x0,%eax
}
80106820:	c9                   	leave  
80106821:	c3                   	ret    

80106822 <argstr>:

// Fetch the nth word-sized system call argument as a string pointer.
// Check that the pointer is valid and the string is nul-terminated.
// (There is no shared writable memory, so the string can't change
// between this check and being used by the kernel.)
int argstr(int n, char** pp) {
80106822:	55                   	push   %ebp
80106823:	89 e5                	mov    %esp,%ebp
80106825:	83 ec 18             	sub    $0x18,%esp
    int addr;
    if (argint(n, &addr) < 0) return -1;
80106828:	83 ec 08             	sub    $0x8,%esp
8010682b:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010682e:	50                   	push   %eax
8010682f:	ff 75 08             	push   0x8(%ebp)
80106832:	e8 56 ff ff ff       	call   8010678d <argint>
80106837:	83 c4 10             	add    $0x10,%esp
8010683a:	85 c0                	test   %eax,%eax
8010683c:	79 07                	jns    80106845 <argstr+0x23>
8010683e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106843:	eb 12                	jmp    80106857 <argstr+0x35>
    return fetchstr(addr, pp);
80106845:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106848:	83 ec 08             	sub    $0x8,%esp
8010684b:	ff 75 0c             	push   0xc(%ebp)
8010684e:	50                   	push   %eax
8010684f:	e8 d7 fe ff ff       	call   8010672b <fetchstr>
80106854:	83 c4 10             	add    $0x10,%esp
}
80106857:	c9                   	leave  
80106858:	c3                   	ret    

80106859 <syscall>:
    [SYS_link] sys_link,     [SYS_mkdir] sys_mkdir,
    [SYS_close] sys_close,   [SYS_report_stats] sys_report_stats,
    [SYS_setuid] sys_setuid, [SYS_getuid] sys_getuid,
    [SYS_chown] sys_chown,   [SYS_chmod] sys_chmod};

void syscall(void) {
80106859:	55                   	push   %ebp
8010685a:	89 e5                	mov    %esp,%ebp
8010685c:	83 ec 18             	sub    $0x18,%esp
    int num;
    struct proc* curproc = myproc();
8010685f:	e8 2d ec ff ff       	call   80105491 <myproc>
80106864:	89 45 f4             	mov    %eax,-0xc(%ebp)

    num = curproc->tf->eax;
80106867:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010686a:	8b 40 18             	mov    0x18(%eax),%eax
8010686d:	8b 40 1c             	mov    0x1c(%eax),%eax
80106870:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num > 0 && num < NELEM(syscalls) && syscalls[num]) {
80106873:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80106877:	7e 2f                	jle    801068a8 <syscall+0x4f>
80106879:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010687c:	83 f8 1a             	cmp    $0x1a,%eax
8010687f:	77 27                	ja     801068a8 <syscall+0x4f>
80106881:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106884:	8b 04 85 20 c0 10 80 	mov    -0x7fef3fe0(,%eax,4),%eax
8010688b:	85 c0                	test   %eax,%eax
8010688d:	74 19                	je     801068a8 <syscall+0x4f>
        curproc->tf->eax = syscalls[num]();
8010688f:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106892:	8b 04 85 20 c0 10 80 	mov    -0x7fef3fe0(,%eax,4),%eax
80106899:	ff d0                	call   *%eax
8010689b:	89 c2                	mov    %eax,%edx
8010689d:	8b 45 f4             	mov    -0xc(%ebp),%eax
801068a0:	8b 40 18             	mov    0x18(%eax),%eax
801068a3:	89 50 1c             	mov    %edx,0x1c(%eax)
801068a6:	eb 2c                	jmp    801068d4 <syscall+0x7b>
    } else {
        cprintf("%d %s: unknown sys call %d\n", curproc->pid, curproc->name,
801068a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
801068ab:	8d 50 6c             	lea    0x6c(%eax),%edx
801068ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
801068b1:	8b 40 10             	mov    0x10(%eax),%eax
801068b4:	ff 75 f0             	push   -0x10(%ebp)
801068b7:	52                   	push   %edx
801068b8:	50                   	push   %eax
801068b9:	68 0c 92 10 80       	push   $0x8010920c
801068be:	e8 6b a6 ff ff       	call   80100f2e <cprintf>
801068c3:	83 c4 10             	add    $0x10,%esp
                num);
        curproc->tf->eax = -1;
801068c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
801068c9:	8b 40 18             	mov    0x18(%eax),%eax
801068cc:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
    }
}
801068d3:	90                   	nop
801068d4:	90                   	nop
801068d5:	c9                   	leave  
801068d6:	c3                   	ret    

801068d7 <argfd>:
#include "fcntl.h"
#include "lab4_ag.h"

// Fetch the nth word-sized system call argument as a file descriptor
// and return both the descriptor and the corresponding struct file.
static int argfd(int n, int* pfd, struct file** pf) {
801068d7:	55                   	push   %ebp
801068d8:	89 e5                	mov    %esp,%ebp
801068da:	83 ec 18             	sub    $0x18,%esp
    int fd;
    struct file* f;

    if (argint(n, &fd) < 0) return -1;
801068dd:	83 ec 08             	sub    $0x8,%esp
801068e0:	8d 45 f0             	lea    -0x10(%ebp),%eax
801068e3:	50                   	push   %eax
801068e4:	ff 75 08             	push   0x8(%ebp)
801068e7:	e8 a1 fe ff ff       	call   8010678d <argint>
801068ec:	83 c4 10             	add    $0x10,%esp
801068ef:	85 c0                	test   %eax,%eax
801068f1:	79 07                	jns    801068fa <argfd+0x23>
801068f3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801068f8:	eb 4f                	jmp    80106949 <argfd+0x72>
    if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == 0) return -1;
801068fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
801068fd:	85 c0                	test   %eax,%eax
801068ff:	78 20                	js     80106921 <argfd+0x4a>
80106901:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106904:	83 f8 0f             	cmp    $0xf,%eax
80106907:	7f 18                	jg     80106921 <argfd+0x4a>
80106909:	e8 83 eb ff ff       	call   80105491 <myproc>
8010690e:	8b 55 f0             	mov    -0x10(%ebp),%edx
80106911:	83 c2 08             	add    $0x8,%edx
80106914:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
80106918:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010691b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8010691f:	75 07                	jne    80106928 <argfd+0x51>
80106921:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106926:	eb 21                	jmp    80106949 <argfd+0x72>
    if (pfd) *pfd = fd;
80106928:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
8010692c:	74 08                	je     80106936 <argfd+0x5f>
8010692e:	8b 55 f0             	mov    -0x10(%ebp),%edx
80106931:	8b 45 0c             	mov    0xc(%ebp),%eax
80106934:	89 10                	mov    %edx,(%eax)
    if (pf) *pf = f;
80106936:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
8010693a:	74 08                	je     80106944 <argfd+0x6d>
8010693c:	8b 45 10             	mov    0x10(%ebp),%eax
8010693f:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106942:	89 10                	mov    %edx,(%eax)
    return 0;
80106944:	b8 00 00 00 00       	mov    $0x0,%eax
}
80106949:	c9                   	leave  
8010694a:	c3                   	ret    

8010694b <fdalloc>:

// Allocate a file descriptor for the given file.
// Takes over file reference from caller on success.
static int fdalloc(struct file* f) {
8010694b:	55                   	push   %ebp
8010694c:	89 e5                	mov    %esp,%ebp
8010694e:	83 ec 18             	sub    $0x18,%esp
    int fd;
    struct proc* curproc = myproc();
80106951:	e8 3b eb ff ff       	call   80105491 <myproc>
80106956:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (fd = 0; fd < NOFILE; fd++) {
80106959:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80106960:	eb 2a                	jmp    8010698c <fdalloc+0x41>
        if (curproc->ofile[fd] == 0) {
80106962:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106965:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106968:	83 c2 08             	add    $0x8,%edx
8010696b:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
8010696f:	85 c0                	test   %eax,%eax
80106971:	75 15                	jne    80106988 <fdalloc+0x3d>
            curproc->ofile[fd] = f;
80106973:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106976:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106979:	8d 4a 08             	lea    0x8(%edx),%ecx
8010697c:	8b 55 08             	mov    0x8(%ebp),%edx
8010697f:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
            return fd;
80106983:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106986:	eb 0f                	jmp    80106997 <fdalloc+0x4c>
    for (fd = 0; fd < NOFILE; fd++) {
80106988:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
8010698c:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
80106990:	7e d0                	jle    80106962 <fdalloc+0x17>
        }
    }
    return -1;
80106992:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80106997:	c9                   	leave  
80106998:	c3                   	ret    

80106999 <sys_dup>:

int sys_dup(void) {
80106999:	55                   	push   %ebp
8010699a:	89 e5                	mov    %esp,%ebp
8010699c:	83 ec 18             	sub    $0x18,%esp
    struct file* f;
    int fd;

    if (argfd(0, 0, &f) < 0) return -1;
8010699f:	83 ec 04             	sub    $0x4,%esp
801069a2:	8d 45 f0             	lea    -0x10(%ebp),%eax
801069a5:	50                   	push   %eax
801069a6:	6a 00                	push   $0x0
801069a8:	6a 00                	push   $0x0
801069aa:	e8 28 ff ff ff       	call   801068d7 <argfd>
801069af:	83 c4 10             	add    $0x10,%esp
801069b2:	85 c0                	test   %eax,%eax
801069b4:	79 07                	jns    801069bd <sys_dup+0x24>
801069b6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801069bb:	eb 31                	jmp    801069ee <sys_dup+0x55>
    if ((fd = fdalloc(f)) < 0) return -1;
801069bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
801069c0:	83 ec 0c             	sub    $0xc,%esp
801069c3:	50                   	push   %eax
801069c4:	e8 82 ff ff ff       	call   8010694b <fdalloc>
801069c9:	83 c4 10             	add    $0x10,%esp
801069cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
801069cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801069d3:	79 07                	jns    801069dc <sys_dup+0x43>
801069d5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801069da:	eb 12                	jmp    801069ee <sys_dup+0x55>
    filedup(f);
801069dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
801069df:	83 ec 0c             	sub    $0xc,%esp
801069e2:	50                   	push   %eax
801069e3:	e8 02 b2 ff ff       	call   80101bea <filedup>
801069e8:	83 c4 10             	add    $0x10,%esp
    return fd;
801069eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
801069ee:	c9                   	leave  
801069ef:	c3                   	ret    

801069f0 <sys_read>:

int sys_read(void) {
801069f0:	55                   	push   %ebp
801069f1:	89 e5                	mov    %esp,%ebp
801069f3:	83 ec 18             	sub    $0x18,%esp
    struct file* f;
    int n;
    char* p;

    if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
801069f6:	83 ec 04             	sub    $0x4,%esp
801069f9:	8d 45 f4             	lea    -0xc(%ebp),%eax
801069fc:	50                   	push   %eax
801069fd:	6a 00                	push   $0x0
801069ff:	6a 00                	push   $0x0
80106a01:	e8 d1 fe ff ff       	call   801068d7 <argfd>
80106a06:	83 c4 10             	add    $0x10,%esp
80106a09:	85 c0                	test   %eax,%eax
80106a0b:	78 2e                	js     80106a3b <sys_read+0x4b>
80106a0d:	83 ec 08             	sub    $0x8,%esp
80106a10:	8d 45 f0             	lea    -0x10(%ebp),%eax
80106a13:	50                   	push   %eax
80106a14:	6a 02                	push   $0x2
80106a16:	e8 72 fd ff ff       	call   8010678d <argint>
80106a1b:	83 c4 10             	add    $0x10,%esp
80106a1e:	85 c0                	test   %eax,%eax
80106a20:	78 19                	js     80106a3b <sys_read+0x4b>
80106a22:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106a25:	83 ec 04             	sub    $0x4,%esp
80106a28:	50                   	push   %eax
80106a29:	8d 45 ec             	lea    -0x14(%ebp),%eax
80106a2c:	50                   	push   %eax
80106a2d:	6a 01                	push   $0x1
80106a2f:	e8 86 fd ff ff       	call   801067ba <argptr>
80106a34:	83 c4 10             	add    $0x10,%esp
80106a37:	85 c0                	test   %eax,%eax
80106a39:	79 07                	jns    80106a42 <sys_read+0x52>
        return -1;
80106a3b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106a40:	eb 17                	jmp    80106a59 <sys_read+0x69>
    return fileread(f, p, n);
80106a42:	8b 4d f0             	mov    -0x10(%ebp),%ecx
80106a45:	8b 55 ec             	mov    -0x14(%ebp),%edx
80106a48:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106a4b:	83 ec 04             	sub    $0x4,%esp
80106a4e:	51                   	push   %ecx
80106a4f:	52                   	push   %edx
80106a50:	50                   	push   %eax
80106a51:	e8 24 b3 ff ff       	call   80101d7a <fileread>
80106a56:	83 c4 10             	add    $0x10,%esp
}
80106a59:	c9                   	leave  
80106a5a:	c3                   	ret    

80106a5b <sys_write>:

int sys_write(void) {
80106a5b:	55                   	push   %ebp
80106a5c:	89 e5                	mov    %esp,%ebp
80106a5e:	83 ec 18             	sub    $0x18,%esp
    struct file* f;
    int n;
    char* p;

    if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
80106a61:	83 ec 04             	sub    $0x4,%esp
80106a64:	8d 45 f4             	lea    -0xc(%ebp),%eax
80106a67:	50                   	push   %eax
80106a68:	6a 00                	push   $0x0
80106a6a:	6a 00                	push   $0x0
80106a6c:	e8 66 fe ff ff       	call   801068d7 <argfd>
80106a71:	83 c4 10             	add    $0x10,%esp
80106a74:	85 c0                	test   %eax,%eax
80106a76:	78 2e                	js     80106aa6 <sys_write+0x4b>
80106a78:	83 ec 08             	sub    $0x8,%esp
80106a7b:	8d 45 f0             	lea    -0x10(%ebp),%eax
80106a7e:	50                   	push   %eax
80106a7f:	6a 02                	push   $0x2
80106a81:	e8 07 fd ff ff       	call   8010678d <argint>
80106a86:	83 c4 10             	add    $0x10,%esp
80106a89:	85 c0                	test   %eax,%eax
80106a8b:	78 19                	js     80106aa6 <sys_write+0x4b>
80106a8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106a90:	83 ec 04             	sub    $0x4,%esp
80106a93:	50                   	push   %eax
80106a94:	8d 45 ec             	lea    -0x14(%ebp),%eax
80106a97:	50                   	push   %eax
80106a98:	6a 01                	push   $0x1
80106a9a:	e8 1b fd ff ff       	call   801067ba <argptr>
80106a9f:	83 c4 10             	add    $0x10,%esp
80106aa2:	85 c0                	test   %eax,%eax
80106aa4:	79 07                	jns    80106aad <sys_write+0x52>
        return -1;
80106aa6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106aab:	eb 17                	jmp    80106ac4 <sys_write+0x69>

    return filewrite(f, p, n);
80106aad:	8b 4d f0             	mov    -0x10(%ebp),%ecx
80106ab0:	8b 55 ec             	mov    -0x14(%ebp),%edx
80106ab3:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106ab6:	83 ec 04             	sub    $0x4,%esp
80106ab9:	51                   	push   %ecx
80106aba:	52                   	push   %edx
80106abb:	50                   	push   %eax
80106abc:	e8 71 b3 ff ff       	call   80101e32 <filewrite>
80106ac1:	83 c4 10             	add    $0x10,%esp
}
80106ac4:	c9                   	leave  
80106ac5:	c3                   	ret    

80106ac6 <sys_close>:

int sys_close(void) {
80106ac6:	55                   	push   %ebp
80106ac7:	89 e5                	mov    %esp,%ebp
80106ac9:	83 ec 18             	sub    $0x18,%esp
    int fd;
    struct file* f;

    if (argfd(0, &fd, &f) < 0) return -1;
80106acc:	83 ec 04             	sub    $0x4,%esp
80106acf:	8d 45 f0             	lea    -0x10(%ebp),%eax
80106ad2:	50                   	push   %eax
80106ad3:	8d 45 f4             	lea    -0xc(%ebp),%eax
80106ad6:	50                   	push   %eax
80106ad7:	6a 00                	push   $0x0
80106ad9:	e8 f9 fd ff ff       	call   801068d7 <argfd>
80106ade:	83 c4 10             	add    $0x10,%esp
80106ae1:	85 c0                	test   %eax,%eax
80106ae3:	79 07                	jns    80106aec <sys_close+0x26>
80106ae5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106aea:	eb 27                	jmp    80106b13 <sys_close+0x4d>
    myproc()->ofile[fd] = 0;
80106aec:	e8 a0 e9 ff ff       	call   80105491 <myproc>
80106af1:	8b 55 f4             	mov    -0xc(%ebp),%edx
80106af4:	83 c2 08             	add    $0x8,%edx
80106af7:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
80106afe:	00 
    fileclose(f);
80106aff:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106b02:	83 ec 0c             	sub    $0xc,%esp
80106b05:	50                   	push   %eax
80106b06:	e8 30 b1 ff ff       	call   80101c3b <fileclose>
80106b0b:	83 c4 10             	add    $0x10,%esp
    return 0;
80106b0e:	b8 00 00 00 00       	mov    $0x0,%eax
}
80106b13:	c9                   	leave  
80106b14:	c3                   	ret    

80106b15 <sys_fstat>:

int sys_fstat(void) {
80106b15:	55                   	push   %ebp
80106b16:	89 e5                	mov    %esp,%ebp
80106b18:	83 ec 18             	sub    $0x18,%esp
    struct file* f;
    struct stat* st;

    if (argfd(0, 0, &f) < 0 || argptr(1, (void*) &st, sizeof(*st)) < 0)
80106b1b:	83 ec 04             	sub    $0x4,%esp
80106b1e:	8d 45 f4             	lea    -0xc(%ebp),%eax
80106b21:	50                   	push   %eax
80106b22:	6a 00                	push   $0x0
80106b24:	6a 00                	push   $0x0
80106b26:	e8 ac fd ff ff       	call   801068d7 <argfd>
80106b2b:	83 c4 10             	add    $0x10,%esp
80106b2e:	85 c0                	test   %eax,%eax
80106b30:	78 17                	js     80106b49 <sys_fstat+0x34>
80106b32:	83 ec 04             	sub    $0x4,%esp
80106b35:	6a 14                	push   $0x14
80106b37:	8d 45 f0             	lea    -0x10(%ebp),%eax
80106b3a:	50                   	push   %eax
80106b3b:	6a 01                	push   $0x1
80106b3d:	e8 78 fc ff ff       	call   801067ba <argptr>
80106b42:	83 c4 10             	add    $0x10,%esp
80106b45:	85 c0                	test   %eax,%eax
80106b47:	79 07                	jns    80106b50 <sys_fstat+0x3b>
        return -1;
80106b49:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106b4e:	eb 13                	jmp    80106b63 <sys_fstat+0x4e>
    return filestat(f, st);
80106b50:	8b 55 f0             	mov    -0x10(%ebp),%edx
80106b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106b56:	83 ec 08             	sub    $0x8,%esp
80106b59:	52                   	push   %edx
80106b5a:	50                   	push   %eax
80106b5b:	e8 c3 b1 ff ff       	call   80101d23 <filestat>
80106b60:	83 c4 10             	add    $0x10,%esp
}
80106b63:	c9                   	leave  
80106b64:	c3                   	ret    

80106b65 <sys_link>:

// Create the path new as a link to the same inode as old.
int sys_link(void) {
80106b65:	55                   	push   %ebp
80106b66:	89 e5                	mov    %esp,%ebp
80106b68:	83 ec 28             	sub    $0x28,%esp
    char name[DIRSIZ], *new, *old;
    struct inode *dp, *ip;

    if (argstr(0, &old) < 0 || argstr(1, &new) < 0) return -1;
80106b6b:	83 ec 08             	sub    $0x8,%esp
80106b6e:	8d 45 d8             	lea    -0x28(%ebp),%eax
80106b71:	50                   	push   %eax
80106b72:	6a 00                	push   $0x0
80106b74:	e8 a9 fc ff ff       	call   80106822 <argstr>
80106b79:	83 c4 10             	add    $0x10,%esp
80106b7c:	85 c0                	test   %eax,%eax
80106b7e:	78 15                	js     80106b95 <sys_link+0x30>
80106b80:	83 ec 08             	sub    $0x8,%esp
80106b83:	8d 45 dc             	lea    -0x24(%ebp),%eax
80106b86:	50                   	push   %eax
80106b87:	6a 01                	push   $0x1
80106b89:	e8 94 fc ff ff       	call   80106822 <argstr>
80106b8e:	83 c4 10             	add    $0x10,%esp
80106b91:	85 c0                	test   %eax,%eax
80106b93:	79 0a                	jns    80106b9f <sys_link+0x3a>
80106b95:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106b9a:	e9 b7 01 00 00       	jmp    80106d56 <sys_link+0x1f1>

    begin_op();
80106b9f:	e8 8c db ff ff       	call   80104730 <begin_op>
    if ((ip = namei(old)) == 0) {
80106ba4:	8b 45 d8             	mov    -0x28(%ebp),%eax
80106ba7:	83 ec 0c             	sub    $0xc,%esp
80106baa:	50                   	push   %eax
80106bab:	e8 de c8 ff ff       	call   8010348e <namei>
80106bb0:	83 c4 10             	add    $0x10,%esp
80106bb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
80106bb6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80106bba:	75 0f                	jne    80106bcb <sys_link+0x66>
        end_op();
80106bbc:	e8 fb db ff ff       	call   801047bc <end_op>
        return -1;
80106bc1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106bc6:	e9 8b 01 00 00       	jmp    80106d56 <sys_link+0x1f1>
    }

    ilock(ip);
80106bcb:	83 ec 0c             	sub    $0xc,%esp
80106bce:	ff 75 f4             	push   -0xc(%ebp)
80106bd1:	e8 9f ba ff ff       	call   80102675 <ilock>
80106bd6:	83 c4 10             	add    $0x10,%esp

    if (!can_access(ip, PROT_R | PROT_W)) {
80106bd9:	83 ec 08             	sub    $0x8,%esp
80106bdc:	6a 03                	push   $0x3
80106bde:	ff 75 f4             	push   -0xc(%ebp)
80106be1:	e8 96 ca ff ff       	call   8010367c <can_access>
80106be6:	83 c4 10             	add    $0x10,%esp
80106be9:	85 c0                	test   %eax,%eax
80106beb:	75 13                	jne    80106c00 <sys_link+0x9b>
        iunlockput(ip);
80106bed:	83 ec 0c             	sub    $0xc,%esp
80106bf0:	ff 75 f4             	push   -0xc(%ebp)
80106bf3:	e8 ca bc ff ff       	call   801028c2 <iunlockput>
80106bf8:	83 c4 10             	add    $0x10,%esp
        goto bad;  // make sure current dir is writable
80106bfb:	e9 0f 01 00 00       	jmp    80106d0f <sys_link+0x1aa>
    }
        
    if (ip->type == T_DIR) {
80106c00:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106c03:	0f b7 40 50          	movzwl 0x50(%eax),%eax
80106c07:	66 83 f8 01          	cmp    $0x1,%ax
80106c0b:	75 1d                	jne    80106c2a <sys_link+0xc5>
        iunlockput(ip);
80106c0d:	83 ec 0c             	sub    $0xc,%esp
80106c10:	ff 75 f4             	push   -0xc(%ebp)
80106c13:	e8 aa bc ff ff       	call   801028c2 <iunlockput>
80106c18:	83 c4 10             	add    $0x10,%esp
        end_op();
80106c1b:	e8 9c db ff ff       	call   801047bc <end_op>
        return -1;
80106c20:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106c25:	e9 2c 01 00 00       	jmp    80106d56 <sys_link+0x1f1>
    }

    ip->nlink++;
80106c2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106c2d:	0f b7 40 56          	movzwl 0x56(%eax),%eax
80106c31:	83 c0 01             	add    $0x1,%eax
80106c34:	89 c2                	mov    %eax,%edx
80106c36:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106c39:	66 89 50 56          	mov    %dx,0x56(%eax)
    iupdate(ip);
80106c3d:	83 ec 0c             	sub    $0xc,%esp
80106c40:	ff 75 f4             	push   -0xc(%ebp)
80106c43:	e8 34 b8 ff ff       	call   8010247c <iupdate>
80106c48:	83 c4 10             	add    $0x10,%esp
    iunlock(ip);
80106c4b:	83 ec 0c             	sub    $0xc,%esp
80106c4e:	ff 75 f4             	push   -0xc(%ebp)
80106c51:	e8 4e bb ff ff       	call   801027a4 <iunlock>
80106c56:	83 c4 10             	add    $0x10,%esp

    if ((dp = nameiparent(new, name)) == 0) goto bad;
80106c59:	8b 45 dc             	mov    -0x24(%ebp),%eax
80106c5c:	83 ec 08             	sub    $0x8,%esp
80106c5f:	8d 55 e2             	lea    -0x1e(%ebp),%edx
80106c62:	52                   	push   %edx
80106c63:	50                   	push   %eax
80106c64:	e8 41 c8 ff ff       	call   801034aa <nameiparent>
80106c69:	83 c4 10             	add    $0x10,%esp
80106c6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
80106c6f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80106c73:	0f 84 95 00 00 00    	je     80106d0e <sys_link+0x1a9>

    ilock(dp);
80106c79:	83 ec 0c             	sub    $0xc,%esp
80106c7c:	ff 75 f0             	push   -0x10(%ebp)
80106c7f:	e8 f1 b9 ff ff       	call   80102675 <ilock>
80106c84:	83 c4 10             	add    $0x10,%esp

    if (!can_access(dp, PROT_R | PROT_W)) {
80106c87:	83 ec 08             	sub    $0x8,%esp
80106c8a:	6a 03                	push   $0x3
80106c8c:	ff 75 f0             	push   -0x10(%ebp)
80106c8f:	e8 e8 c9 ff ff       	call   8010367c <can_access>
80106c94:	83 c4 10             	add    $0x10,%esp
80106c97:	85 c0                	test   %eax,%eax
80106c99:	75 10                	jne    80106cab <sys_link+0x146>
        iunlockput(dp);
80106c9b:	83 ec 0c             	sub    $0xc,%esp
80106c9e:	ff 75 f0             	push   -0x10(%ebp)
80106ca1:	e8 1c bc ff ff       	call   801028c2 <iunlockput>
80106ca6:	83 c4 10             	add    $0x10,%esp
        goto bad;
80106ca9:	eb 64                	jmp    80106d0f <sys_link+0x1aa>
    }

    if (dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0) {
80106cab:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106cae:	8b 10                	mov    (%eax),%edx
80106cb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106cb3:	8b 00                	mov    (%eax),%eax
80106cb5:	39 c2                	cmp    %eax,%edx
80106cb7:	75 1d                	jne    80106cd6 <sys_link+0x171>
80106cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106cbc:	8b 40 04             	mov    0x4(%eax),%eax
80106cbf:	83 ec 04             	sub    $0x4,%esp
80106cc2:	50                   	push   %eax
80106cc3:	8d 45 e2             	lea    -0x1e(%ebp),%eax
80106cc6:	50                   	push   %eax
80106cc7:	ff 75 f0             	push   -0x10(%ebp)
80106cca:	e8 fc c4 ff ff       	call   801031cb <dirlink>
80106ccf:	83 c4 10             	add    $0x10,%esp
80106cd2:	85 c0                	test   %eax,%eax
80106cd4:	79 10                	jns    80106ce6 <sys_link+0x181>
        iunlockput(dp);
80106cd6:	83 ec 0c             	sub    $0xc,%esp
80106cd9:	ff 75 f0             	push   -0x10(%ebp)
80106cdc:	e8 e1 bb ff ff       	call   801028c2 <iunlockput>
80106ce1:	83 c4 10             	add    $0x10,%esp
        goto bad;
80106ce4:	eb 29                	jmp    80106d0f <sys_link+0x1aa>
    }
    iunlockput(dp);
80106ce6:	83 ec 0c             	sub    $0xc,%esp
80106ce9:	ff 75 f0             	push   -0x10(%ebp)
80106cec:	e8 d1 bb ff ff       	call   801028c2 <iunlockput>
80106cf1:	83 c4 10             	add    $0x10,%esp
    iput(ip);
80106cf4:	83 ec 0c             	sub    $0xc,%esp
80106cf7:	ff 75 f4             	push   -0xc(%ebp)
80106cfa:	e8 f3 ba ff ff       	call   801027f2 <iput>
80106cff:	83 c4 10             	add    $0x10,%esp

    end_op();
80106d02:	e8 b5 da ff ff       	call   801047bc <end_op>

    return 0;
80106d07:	b8 00 00 00 00       	mov    $0x0,%eax
80106d0c:	eb 48                	jmp    80106d56 <sys_link+0x1f1>
    if ((dp = nameiparent(new, name)) == 0) goto bad;
80106d0e:	90                   	nop

bad:
    ilock(ip);
80106d0f:	83 ec 0c             	sub    $0xc,%esp
80106d12:	ff 75 f4             	push   -0xc(%ebp)
80106d15:	e8 5b b9 ff ff       	call   80102675 <ilock>
80106d1a:	83 c4 10             	add    $0x10,%esp
    ip->nlink--;
80106d1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106d20:	0f b7 40 56          	movzwl 0x56(%eax),%eax
80106d24:	83 e8 01             	sub    $0x1,%eax
80106d27:	89 c2                	mov    %eax,%edx
80106d29:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106d2c:	66 89 50 56          	mov    %dx,0x56(%eax)
    iupdate(ip);
80106d30:	83 ec 0c             	sub    $0xc,%esp
80106d33:	ff 75 f4             	push   -0xc(%ebp)
80106d36:	e8 41 b7 ff ff       	call   8010247c <iupdate>
80106d3b:	83 c4 10             	add    $0x10,%esp
    iunlockput(ip);
80106d3e:	83 ec 0c             	sub    $0xc,%esp
80106d41:	ff 75 f4             	push   -0xc(%ebp)
80106d44:	e8 79 bb ff ff       	call   801028c2 <iunlockput>
80106d49:	83 c4 10             	add    $0x10,%esp
    end_op();
80106d4c:	e8 6b da ff ff       	call   801047bc <end_op>
    return -1;
80106d51:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80106d56:	c9                   	leave  
80106d57:	c3                   	ret    

80106d58 <isdirempty>:

// Is the directory dp empty except for "." and ".." ?
static int isdirempty(struct inode* dp) {
80106d58:	55                   	push   %ebp
80106d59:	89 e5                	mov    %esp,%ebp
80106d5b:	83 ec 28             	sub    $0x28,%esp
    int off;
    struct dirent de;

    for (off = 2 * sizeof(de); off < dp->size; off += sizeof(de)) {
80106d5e:	c7 45 f4 20 00 00 00 	movl   $0x20,-0xc(%ebp)
80106d65:	eb 40                	jmp    80106da7 <isdirempty+0x4f>
        if (readi(dp, (char*) &de, off, sizeof(de)) != sizeof(de))
80106d67:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106d6a:	6a 10                	push   $0x10
80106d6c:	50                   	push   %eax
80106d6d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
80106d70:	50                   	push   %eax
80106d71:	ff 75 08             	push   0x8(%ebp)
80106d74:	e8 a2 c0 ff ff       	call   80102e1b <readi>
80106d79:	83 c4 10             	add    $0x10,%esp
80106d7c:	83 f8 10             	cmp    $0x10,%eax
80106d7f:	74 0d                	je     80106d8e <isdirempty+0x36>
            panic("isdirempty: readi");
80106d81:	83 ec 0c             	sub    $0xc,%esp
80106d84:	68 28 92 10 80       	push   $0x80109228
80106d89:	e8 55 a3 ff ff       	call   801010e3 <panic>
        if (de.inum != 0) return 0;
80106d8e:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
80106d92:	66 85 c0             	test   %ax,%ax
80106d95:	74 07                	je     80106d9e <isdirempty+0x46>
80106d97:	b8 00 00 00 00       	mov    $0x0,%eax
80106d9c:	eb 1b                	jmp    80106db9 <isdirempty+0x61>
    for (off = 2 * sizeof(de); off < dp->size; off += sizeof(de)) {
80106d9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106da1:	83 c0 10             	add    $0x10,%eax
80106da4:	89 45 f4             	mov    %eax,-0xc(%ebp)
80106da7:	8b 45 08             	mov    0x8(%ebp),%eax
80106daa:	8b 50 58             	mov    0x58(%eax),%edx
80106dad:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106db0:	39 c2                	cmp    %eax,%edx
80106db2:	77 b3                	ja     80106d67 <isdirempty+0xf>
    }
    return 1;
80106db4:	b8 01 00 00 00       	mov    $0x1,%eax
}
80106db9:	c9                   	leave  
80106dba:	c3                   	ret    

80106dbb <sys_unlink>:

//PAGEBREAK!
int sys_unlink(void) {
80106dbb:	55                   	push   %ebp
80106dbc:	89 e5                	mov    %esp,%ebp
80106dbe:	83 ec 38             	sub    $0x38,%esp
    struct inode *ip, *dp;
    struct dirent de;
    char name[DIRSIZ], *path;
    uint off;

    if (argstr(0, &path) < 0) return -1;
80106dc1:	83 ec 08             	sub    $0x8,%esp
80106dc4:	8d 45 cc             	lea    -0x34(%ebp),%eax
80106dc7:	50                   	push   %eax
80106dc8:	6a 00                	push   $0x0
80106dca:	e8 53 fa ff ff       	call   80106822 <argstr>
80106dcf:	83 c4 10             	add    $0x10,%esp
80106dd2:	85 c0                	test   %eax,%eax
80106dd4:	79 0a                	jns    80106de0 <sys_unlink+0x25>
80106dd6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106ddb:	e9 01 02 00 00       	jmp    80106fe1 <sys_unlink+0x226>

    begin_op();
80106de0:	e8 4b d9 ff ff       	call   80104730 <begin_op>
    if ((dp = nameiparent(path, name)) == 0) {
80106de5:	8b 45 cc             	mov    -0x34(%ebp),%eax
80106de8:	83 ec 08             	sub    $0x8,%esp
80106deb:	8d 55 d2             	lea    -0x2e(%ebp),%edx
80106dee:	52                   	push   %edx
80106def:	50                   	push   %eax
80106df0:	e8 b5 c6 ff ff       	call   801034aa <nameiparent>
80106df5:	83 c4 10             	add    $0x10,%esp
80106df8:	89 45 f4             	mov    %eax,-0xc(%ebp)
80106dfb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80106dff:	75 0f                	jne    80106e10 <sys_unlink+0x55>
        end_op();
80106e01:	e8 b6 d9 ff ff       	call   801047bc <end_op>
        return -1;
80106e06:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80106e0b:	e9 d1 01 00 00       	jmp    80106fe1 <sys_unlink+0x226>
    }

    ilock(dp);
80106e10:	83 ec 0c             	sub    $0xc,%esp
80106e13:	ff 75 f4             	push   -0xc(%ebp)
80106e16:	e8 5a b8 ff ff       	call   80102675 <ilock>
80106e1b:	83 c4 10             	add    $0x10,%esp
    // make sure child dir is writable
    if (!can_access(dp, PROT_R | PROT_W))
80106e1e:	83 ec 08             	sub    $0x8,%esp
80106e21:	6a 03                	push   $0x3
80106e23:	ff 75 f4             	push   -0xc(%ebp)
80106e26:	e8 51 c8 ff ff       	call   8010367c <can_access>
80106e2b:	83 c4 10             	add    $0x10,%esp
80106e2e:	85 c0                	test   %eax,%eax
80106e30:	0f 84 8c 01 00 00    	je     80106fc2 <sys_unlink+0x207>
        goto bad;  

    // Cannot unlink "." or "..".
    if (namecmp(name, ".") == 0 || namecmp(name, "..") == 0) goto bad;
80106e36:	83 ec 08             	sub    $0x8,%esp
80106e39:	68 3a 92 10 80       	push   $0x8010923a
80106e3e:	8d 45 d2             	lea    -0x2e(%ebp),%eax
80106e41:	50                   	push   %eax
80106e42:	e8 af c2 ff ff       	call   801030f6 <namecmp>
80106e47:	83 c4 10             	add    $0x10,%esp
80106e4a:	85 c0                	test   %eax,%eax
80106e4c:	0f 84 73 01 00 00    	je     80106fc5 <sys_unlink+0x20a>
80106e52:	83 ec 08             	sub    $0x8,%esp
80106e55:	68 3c 92 10 80       	push   $0x8010923c
80106e5a:	8d 45 d2             	lea    -0x2e(%ebp),%eax
80106e5d:	50                   	push   %eax
80106e5e:	e8 93 c2 ff ff       	call   801030f6 <namecmp>
80106e63:	83 c4 10             	add    $0x10,%esp
80106e66:	85 c0                	test   %eax,%eax
80106e68:	0f 84 57 01 00 00    	je     80106fc5 <sys_unlink+0x20a>

    if ((ip = dirlookup(dp, name, &off)) == 0) goto bad;
80106e6e:	83 ec 04             	sub    $0x4,%esp
80106e71:	8d 45 c8             	lea    -0x38(%ebp),%eax
80106e74:	50                   	push   %eax
80106e75:	8d 45 d2             	lea    -0x2e(%ebp),%eax
80106e78:	50                   	push   %eax
80106e79:	ff 75 f4             	push   -0xc(%ebp)
80106e7c:	e8 90 c2 ff ff       	call   80103111 <dirlookup>
80106e81:	83 c4 10             	add    $0x10,%esp
80106e84:	89 45 f0             	mov    %eax,-0x10(%ebp)
80106e87:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80106e8b:	0f 84 37 01 00 00    	je     80106fc8 <sys_unlink+0x20d>

    ilock(ip);
80106e91:	83 ec 0c             	sub    $0xc,%esp
80106e94:	ff 75 f0             	push   -0x10(%ebp)
80106e97:	e8 d9 b7 ff ff       	call   80102675 <ilock>
80106e9c:	83 c4 10             	add    $0x10,%esp

    if (!can_access(ip, PROT_R | PROT_W)) {
80106e9f:	83 ec 08             	sub    $0x8,%esp
80106ea2:	6a 03                	push   $0x3
80106ea4:	ff 75 f0             	push   -0x10(%ebp)
80106ea7:	e8 d0 c7 ff ff       	call   8010367c <can_access>
80106eac:	83 c4 10             	add    $0x10,%esp
80106eaf:	85 c0                	test   %eax,%eax
80106eb1:	75 13                	jne    80106ec6 <sys_unlink+0x10b>
        iunlockput(ip);
80106eb3:	83 ec 0c             	sub    $0xc,%esp
80106eb6:	ff 75 f0             	push   -0x10(%ebp)
80106eb9:	e8 04 ba ff ff       	call   801028c2 <iunlockput>
80106ebe:	83 c4 10             	add    $0x10,%esp
        goto bad;  // make sure child dir is writable
80106ec1:	e9 03 01 00 00       	jmp    80106fc9 <sys_unlink+0x20e>
    }

        

    if (ip->nlink < 1) panic("unlink: nlink < 1");
80106ec6:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106ec9:	0f b7 40 56          	movzwl 0x56(%eax),%eax
80106ecd:	66 85 c0             	test   %ax,%ax
80106ed0:	7f 0d                	jg     80106edf <sys_unlink+0x124>
80106ed2:	83 ec 0c             	sub    $0xc,%esp
80106ed5:	68 3f 92 10 80       	push   $0x8010923f
80106eda:	e8 04 a2 ff ff       	call   801010e3 <panic>
    if (ip->type == T_DIR && !isdirempty(ip)) {
80106edf:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106ee2:	0f b7 40 50          	movzwl 0x50(%eax),%eax
80106ee6:	66 83 f8 01          	cmp    $0x1,%ax
80106eea:	75 25                	jne    80106f11 <sys_unlink+0x156>
80106eec:	83 ec 0c             	sub    $0xc,%esp
80106eef:	ff 75 f0             	push   -0x10(%ebp)
80106ef2:	e8 61 fe ff ff       	call   80106d58 <isdirempty>
80106ef7:	83 c4 10             	add    $0x10,%esp
80106efa:	85 c0                	test   %eax,%eax
80106efc:	75 13                	jne    80106f11 <sys_unlink+0x156>
        iunlockput(ip);
80106efe:	83 ec 0c             	sub    $0xc,%esp
80106f01:	ff 75 f0             	push   -0x10(%ebp)
80106f04:	e8 b9 b9 ff ff       	call   801028c2 <iunlockput>
80106f09:	83 c4 10             	add    $0x10,%esp
        goto bad;
80106f0c:	e9 b8 00 00 00       	jmp    80106fc9 <sys_unlink+0x20e>
    }

    memset(&de, 0, sizeof(de));
80106f11:	83 ec 04             	sub    $0x4,%esp
80106f14:	6a 10                	push   $0x10
80106f16:	6a 00                	push   $0x0
80106f18:	8d 45 e0             	lea    -0x20(%ebp),%eax
80106f1b:	50                   	push   %eax
80106f1c:	e8 56 f5 ff ff       	call   80106477 <memset>
80106f21:	83 c4 10             	add    $0x10,%esp
    if (writei(dp, (char*) &de, off, sizeof(de)) != sizeof(de))
80106f24:	8b 45 c8             	mov    -0x38(%ebp),%eax
80106f27:	6a 10                	push   $0x10
80106f29:	50                   	push   %eax
80106f2a:	8d 45 e0             	lea    -0x20(%ebp),%eax
80106f2d:	50                   	push   %eax
80106f2e:	ff 75 f4             	push   -0xc(%ebp)
80106f31:	e8 3a c0 ff ff       	call   80102f70 <writei>
80106f36:	83 c4 10             	add    $0x10,%esp
80106f39:	83 f8 10             	cmp    $0x10,%eax
80106f3c:	74 0d                	je     80106f4b <sys_unlink+0x190>
        panic("unlink: writei");
80106f3e:	83 ec 0c             	sub    $0xc,%esp
80106f41:	68 51 92 10 80       	push   $0x80109251
80106f46:	e8 98 a1 ff ff       	call   801010e3 <panic>
    if (ip->type == T_DIR) {
80106f4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106f4e:	0f b7 40 50          	movzwl 0x50(%eax),%eax
80106f52:	66 83 f8 01          	cmp    $0x1,%ax
80106f56:	75 21                	jne    80106f79 <sys_unlink+0x1be>
        dp->nlink--;
80106f58:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106f5b:	0f b7 40 56          	movzwl 0x56(%eax),%eax
80106f5f:	83 e8 01             	sub    $0x1,%eax
80106f62:	89 c2                	mov    %eax,%edx
80106f64:	8b 45 f4             	mov    -0xc(%ebp),%eax
80106f67:	66 89 50 56          	mov    %dx,0x56(%eax)
        iupdate(dp);
80106f6b:	83 ec 0c             	sub    $0xc,%esp
80106f6e:	ff 75 f4             	push   -0xc(%ebp)
80106f71:	e8 06 b5 ff ff       	call   8010247c <iupdate>
80106f76:	83 c4 10             	add    $0x10,%esp
    }
    iunlockput(dp);
80106f79:	83 ec 0c             	sub    $0xc,%esp
80106f7c:	ff 75 f4             	push   -0xc(%ebp)
80106f7f:	e8 3e b9 ff ff       	call   801028c2 <iunlockput>
80106f84:	83 c4 10             	add    $0x10,%esp

    ip->nlink--;
80106f87:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106f8a:	0f b7 40 56          	movzwl 0x56(%eax),%eax
80106f8e:	83 e8 01             	sub    $0x1,%eax
80106f91:	89 c2                	mov    %eax,%edx
80106f93:	8b 45 f0             	mov    -0x10(%ebp),%eax
80106f96:	66 89 50 56          	mov    %dx,0x56(%eax)
    iupdate(ip);
80106f9a:	83 ec 0c             	sub    $0xc,%esp
80106f9d:	ff 75 f0             	push   -0x10(%ebp)
80106fa0:	e8 d7 b4 ff ff       	call   8010247c <iupdate>
80106fa5:	83 c4 10             	add    $0x10,%esp
    iunlockput(ip);
80106fa8:	83 ec 0c             	sub    $0xc,%esp
80106fab:	ff 75 f0             	push   -0x10(%ebp)
80106fae:	e8 0f b9 ff ff       	call   801028c2 <iunlockput>
80106fb3:	83 c4 10             	add    $0x10,%esp

    end_op();
80106fb6:	e8 01 d8 ff ff       	call   801047bc <end_op>

    return 0;
80106fbb:	b8 00 00 00 00       	mov    $0x0,%eax
80106fc0:	eb 1f                	jmp    80106fe1 <sys_unlink+0x226>
        goto bad;  
80106fc2:	90                   	nop
80106fc3:	eb 04                	jmp    80106fc9 <sys_unlink+0x20e>
    if (namecmp(name, ".") == 0 || namecmp(name, "..") == 0) goto bad;
80106fc5:	90                   	nop
80106fc6:	eb 01                	jmp    80106fc9 <sys_unlink+0x20e>
    if ((ip = dirlookup(dp, name, &off)) == 0) goto bad;
80106fc8:	90                   	nop

bad:
    iunlockput(dp);
80106fc9:	83 ec 0c             	sub    $0xc,%esp
80106fcc:	ff 75 f4             	push   -0xc(%ebp)
80106fcf:	e8 ee b8 ff ff       	call   801028c2 <iunlockput>
80106fd4:	83 c4 10             	add    $0x10,%esp
    end_op();
80106fd7:	e8 e0 d7 ff ff       	call   801047bc <end_op>
    return -1;
80106fdc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80106fe1:	c9                   	leave  
80106fe2:	c3                   	ret    

80106fe3 <create>:

static struct inode* create(char* path, short type, short major, short minor) {
80106fe3:	55                   	push   %ebp
80106fe4:	89 e5                	mov    %esp,%ebp
80106fe6:	83 ec 38             	sub    $0x38,%esp
80106fe9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80106fec:	8b 55 10             	mov    0x10(%ebp),%edx
80106fef:	8b 45 14             	mov    0x14(%ebp),%eax
80106ff2:	66 89 4d d4          	mov    %cx,-0x2c(%ebp)
80106ff6:	66 89 55 d0          	mov    %dx,-0x30(%ebp)
80106ffa:	66 89 45 cc          	mov    %ax,-0x34(%ebp)
    struct inode *ip, *dp;
    char name[DIRSIZ];

    if ((dp = nameiparent(path, name)) == 0) return 0;
80106ffe:	83 ec 08             	sub    $0x8,%esp
80107001:	8d 45 e2             	lea    -0x1e(%ebp),%eax
80107004:	50                   	push   %eax
80107005:	ff 75 08             	push   0x8(%ebp)
80107008:	e8 9d c4 ff ff       	call   801034aa <nameiparent>
8010700d:	83 c4 10             	add    $0x10,%esp
80107010:	89 45 f4             	mov    %eax,-0xc(%ebp)
80107013:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80107017:	75 0a                	jne    80107023 <create+0x40>
80107019:	b8 00 00 00 00       	mov    $0x0,%eax
8010701e:	e9 d4 01 00 00       	jmp    801071f7 <create+0x214>

    ilock(dp);
80107023:	83 ec 0c             	sub    $0xc,%esp
80107026:	ff 75 f4             	push   -0xc(%ebp)
80107029:	e8 47 b6 ff ff       	call   80102675 <ilock>
8010702e:	83 c4 10             	add    $0x10,%esp

    // moved inside of lock
    // dont allow create if parent dir is not writable
    if (!can_access(dp, PROT_R | PROT_W)) {
80107031:	83 ec 08             	sub    $0x8,%esp
80107034:	6a 03                	push   $0x3
80107036:	ff 75 f4             	push   -0xc(%ebp)
80107039:	e8 3e c6 ff ff       	call   8010367c <can_access>
8010703e:	83 c4 10             	add    $0x10,%esp
80107041:	85 c0                	test   %eax,%eax
80107043:	75 18                	jne    8010705d <create+0x7a>
        iunlockput(dp);
80107045:	83 ec 0c             	sub    $0xc,%esp
80107048:	ff 75 f4             	push   -0xc(%ebp)
8010704b:	e8 72 b8 ff ff       	call   801028c2 <iunlockput>
80107050:	83 c4 10             	add    $0x10,%esp
        return 0;
80107053:	b8 00 00 00 00       	mov    $0x0,%eax
80107058:	e9 9a 01 00 00       	jmp    801071f7 <create+0x214>
    }
        

    if ((ip = dirlookup(dp, name, 0)) != 0) {
8010705d:	83 ec 04             	sub    $0x4,%esp
80107060:	6a 00                	push   $0x0
80107062:	8d 45 e2             	lea    -0x1e(%ebp),%eax
80107065:	50                   	push   %eax
80107066:	ff 75 f4             	push   -0xc(%ebp)
80107069:	e8 a3 c0 ff ff       	call   80103111 <dirlookup>
8010706e:	83 c4 10             	add    $0x10,%esp
80107071:	89 45 f0             	mov    %eax,-0x10(%ebp)
80107074:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80107078:	74 50                	je     801070ca <create+0xe7>
        iunlockput(dp);
8010707a:	83 ec 0c             	sub    $0xc,%esp
8010707d:	ff 75 f4             	push   -0xc(%ebp)
80107080:	e8 3d b8 ff ff       	call   801028c2 <iunlockput>
80107085:	83 c4 10             	add    $0x10,%esp

        ilock(ip);
80107088:	83 ec 0c             	sub    $0xc,%esp
8010708b:	ff 75 f0             	push   -0x10(%ebp)
8010708e:	e8 e2 b5 ff ff       	call   80102675 <ilock>
80107093:	83 c4 10             	add    $0x10,%esp
        if (type == T_FILE && ip->type == T_FILE) return ip;
80107096:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
8010709b:	75 15                	jne    801070b2 <create+0xcf>
8010709d:	8b 45 f0             	mov    -0x10(%ebp),%eax
801070a0:	0f b7 40 50          	movzwl 0x50(%eax),%eax
801070a4:	66 83 f8 02          	cmp    $0x2,%ax
801070a8:	75 08                	jne    801070b2 <create+0xcf>
801070aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
801070ad:	e9 45 01 00 00       	jmp    801071f7 <create+0x214>
        iunlockput(ip);
801070b2:	83 ec 0c             	sub    $0xc,%esp
801070b5:	ff 75 f0             	push   -0x10(%ebp)
801070b8:	e8 05 b8 ff ff       	call   801028c2 <iunlockput>
801070bd:	83 c4 10             	add    $0x10,%esp
        return 0;
801070c0:	b8 00 00 00 00       	mov    $0x0,%eax
801070c5:	e9 2d 01 00 00       	jmp    801071f7 <create+0x214>
    }

    if ((ip = ialloc(dp->dev, type)) == 0) panic("create: ialloc");
801070ca:	0f bf 55 d4          	movswl -0x2c(%ebp),%edx
801070ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
801070d1:	8b 00                	mov    (%eax),%eax
801070d3:	83 ec 08             	sub    $0x8,%esp
801070d6:	52                   	push   %edx
801070d7:	50                   	push   %eax
801070d8:	e8 c8 b2 ff ff       	call   801023a5 <ialloc>
801070dd:	83 c4 10             	add    $0x10,%esp
801070e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
801070e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
801070e7:	75 0d                	jne    801070f6 <create+0x113>
801070e9:	83 ec 0c             	sub    $0xc,%esp
801070ec:	68 60 92 10 80       	push   $0x80109260
801070f1:	e8 ed 9f ff ff       	call   801010e3 <panic>

    ilock(ip);
801070f6:	83 ec 0c             	sub    $0xc,%esp
801070f9:	ff 75 f0             	push   -0x10(%ebp)
801070fc:	e8 74 b5 ff ff       	call   80102675 <ilock>
80107101:	83 c4 10             	add    $0x10,%esp
    ip->major = major;
80107104:	8b 45 f0             	mov    -0x10(%ebp),%eax
80107107:	0f b7 55 d0          	movzwl -0x30(%ebp),%edx
8010710b:	66 89 50 52          	mov    %dx,0x52(%eax)
    ip->minor = minor;
8010710f:	8b 45 f0             	mov    -0x10(%ebp),%eax
80107112:	0f b7 55 cc          	movzwl -0x34(%ebp),%edx
80107116:	66 89 50 54          	mov    %dx,0x54(%eax)
    ip->nlink = 1;
8010711a:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010711d:	66 c7 40 56 01 00    	movw   $0x1,0x56(%eax)
    ip->owner = myproc()->uid;
80107123:	e8 69 e3 ff ff       	call   80105491 <myproc>
80107128:	8b 40 7c             	mov    0x7c(%eax),%eax
8010712b:	89 c2                	mov    %eax,%edx
8010712d:	8b 45 f0             	mov    -0x10(%ebp),%eax
80107130:	66 89 50 5c          	mov    %dx,0x5c(%eax)
    ip->perms = 0;
80107134:	8b 45 f0             	mov    -0x10(%ebp),%eax
80107137:	66 c7 40 5e 00 00    	movw   $0x0,0x5e(%eax)
    iupdate(ip);
8010713d:	83 ec 0c             	sub    $0xc,%esp
80107140:	ff 75 f0             	push   -0x10(%ebp)
80107143:	e8 34 b3 ff ff       	call   8010247c <iupdate>
80107148:	83 c4 10             	add    $0x10,%esp

    if (type == T_DIR) {  // Create . and .. entries.
8010714b:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
80107150:	75 6a                	jne    801071bc <create+0x1d9>
        dp->nlink++;      // for ".."
80107152:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107155:	0f b7 40 56          	movzwl 0x56(%eax),%eax
80107159:	83 c0 01             	add    $0x1,%eax
8010715c:	89 c2                	mov    %eax,%edx
8010715e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107161:	66 89 50 56          	mov    %dx,0x56(%eax)
        iupdate(dp);
80107165:	83 ec 0c             	sub    $0xc,%esp
80107168:	ff 75 f4             	push   -0xc(%ebp)
8010716b:	e8 0c b3 ff ff       	call   8010247c <iupdate>
80107170:	83 c4 10             	add    $0x10,%esp
        // No ip->nlink++ for ".": avoid cyclic ref count.
        if (dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
80107173:	8b 45 f0             	mov    -0x10(%ebp),%eax
80107176:	8b 40 04             	mov    0x4(%eax),%eax
80107179:	83 ec 04             	sub    $0x4,%esp
8010717c:	50                   	push   %eax
8010717d:	68 3a 92 10 80       	push   $0x8010923a
80107182:	ff 75 f0             	push   -0x10(%ebp)
80107185:	e8 41 c0 ff ff       	call   801031cb <dirlink>
8010718a:	83 c4 10             	add    $0x10,%esp
8010718d:	85 c0                	test   %eax,%eax
8010718f:	78 1e                	js     801071af <create+0x1cc>
80107191:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107194:	8b 40 04             	mov    0x4(%eax),%eax
80107197:	83 ec 04             	sub    $0x4,%esp
8010719a:	50                   	push   %eax
8010719b:	68 3c 92 10 80       	push   $0x8010923c
801071a0:	ff 75 f0             	push   -0x10(%ebp)
801071a3:	e8 23 c0 ff ff       	call   801031cb <dirlink>
801071a8:	83 c4 10             	add    $0x10,%esp
801071ab:	85 c0                	test   %eax,%eax
801071ad:	79 0d                	jns    801071bc <create+0x1d9>
            panic("create dots");
801071af:	83 ec 0c             	sub    $0xc,%esp
801071b2:	68 6f 92 10 80       	push   $0x8010926f
801071b7:	e8 27 9f ff ff       	call   801010e3 <panic>
    }

    if (dirlink(dp, name, ip->inum) < 0) panic("create: dirlink");
801071bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
801071bf:	8b 40 04             	mov    0x4(%eax),%eax
801071c2:	83 ec 04             	sub    $0x4,%esp
801071c5:	50                   	push   %eax
801071c6:	8d 45 e2             	lea    -0x1e(%ebp),%eax
801071c9:	50                   	push   %eax
801071ca:	ff 75 f4             	push   -0xc(%ebp)
801071cd:	e8 f9 bf ff ff       	call   801031cb <dirlink>
801071d2:	83 c4 10             	add    $0x10,%esp
801071d5:	85 c0                	test   %eax,%eax
801071d7:	79 0d                	jns    801071e6 <create+0x203>
801071d9:	83 ec 0c             	sub    $0xc,%esp
801071dc:	68 7b 92 10 80       	push   $0x8010927b
801071e1:	e8 fd 9e ff ff       	call   801010e3 <panic>

    iunlockput(dp);
801071e6:	83 ec 0c             	sub    $0xc,%esp
801071e9:	ff 75 f4             	push   -0xc(%ebp)
801071ec:	e8 d1 b6 ff ff       	call   801028c2 <iunlockput>
801071f1:	83 c4 10             	add    $0x10,%esp

    return ip;
801071f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
801071f7:	c9                   	leave  
801071f8:	c3                   	ret    

801071f9 <sys_open>:

int sys_open(void) {
801071f9:	55                   	push   %ebp
801071fa:	89 e5                	mov    %esp,%ebp
801071fc:	83 ec 28             	sub    $0x28,%esp
    char* path;
    int fd, omode;
    struct file* f;
    struct inode* ip;

    if (argstr(0, &path) < 0 || argint(1, &omode) < 0) return -1;
801071ff:	83 ec 08             	sub    $0x8,%esp
80107202:	8d 45 e8             	lea    -0x18(%ebp),%eax
80107205:	50                   	push   %eax
80107206:	6a 00                	push   $0x0
80107208:	e8 15 f6 ff ff       	call   80106822 <argstr>
8010720d:	83 c4 10             	add    $0x10,%esp
80107210:	85 c0                	test   %eax,%eax
80107212:	78 15                	js     80107229 <sys_open+0x30>
80107214:	83 ec 08             	sub    $0x8,%esp
80107217:	8d 45 e4             	lea    -0x1c(%ebp),%eax
8010721a:	50                   	push   %eax
8010721b:	6a 01                	push   $0x1
8010721d:	e8 6b f5 ff ff       	call   8010678d <argint>
80107222:	83 c4 10             	add    $0x10,%esp
80107225:	85 c0                	test   %eax,%eax
80107227:	79 0a                	jns    80107233 <sys_open+0x3a>
80107229:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010722e:	e9 06 02 00 00       	jmp    80107439 <sys_open+0x240>

    if (!(omode & (O_RDONLY | O_WRONLY | O_RDWR | O_CREATE))) return -1;
80107233:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80107236:	25 07 02 00 00       	and    $0x207,%eax
8010723b:	85 c0                	test   %eax,%eax
8010723d:	75 0a                	jne    80107249 <sys_open+0x50>
8010723f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107244:	e9 f0 01 00 00       	jmp    80107439 <sys_open+0x240>

    begin_op();
80107249:	e8 e2 d4 ff ff       	call   80104730 <begin_op>

    if (omode & O_CREATE) {
8010724e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80107251:	25 00 02 00 00       	and    $0x200,%eax
80107256:	85 c0                	test   %eax,%eax
80107258:	74 2e                	je     80107288 <sys_open+0x8f>
        ip = create(path, T_FILE, 0, 0);
8010725a:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010725d:	6a 00                	push   $0x0
8010725f:	6a 00                	push   $0x0
80107261:	6a 02                	push   $0x2
80107263:	50                   	push   %eax
80107264:	e8 7a fd ff ff       	call   80106fe3 <create>
80107269:	83 c4 10             	add    $0x10,%esp
8010726c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ip == 0) {
8010726f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80107273:	0f 85 00 01 00 00    	jne    80107379 <sys_open+0x180>
            end_op();
80107279:	e8 3e d5 ff ff       	call   801047bc <end_op>
            return -1;
8010727e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107283:	e9 b1 01 00 00       	jmp    80107439 <sys_open+0x240>
        }
    } else {
        if ((ip = namei(path)) == 0) {
80107288:	8b 45 e8             	mov    -0x18(%ebp),%eax
8010728b:	83 ec 0c             	sub    $0xc,%esp
8010728e:	50                   	push   %eax
8010728f:	e8 fa c1 ff ff       	call   8010348e <namei>
80107294:	83 c4 10             	add    $0x10,%esp
80107297:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010729a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8010729e:	75 0f                	jne    801072af <sys_open+0xb6>
            end_op();
801072a0:	e8 17 d5 ff ff       	call   801047bc <end_op>
            return -1;
801072a5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801072aa:	e9 8a 01 00 00       	jmp    80107439 <sys_open+0x240>
        }

        ilock(ip);
801072af:	83 ec 0c             	sub    $0xc,%esp
801072b2:	ff 75 f4             	push   -0xc(%ebp)
801072b5:	e8 bb b3 ff ff       	call   80102675 <ilock>
801072ba:	83 c4 10             	add    $0x10,%esp
        //moved inside lock
        // If open with write but no write permissions
        if ((omode & O_WRONLY || omode & O_RDWR) && !can_access(ip, PROT_W)) {
801072bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801072c0:	83 e0 02             	and    $0x2,%eax
801072c3:	85 c0                	test   %eax,%eax
801072c5:	75 0a                	jne    801072d1 <sys_open+0xd8>
801072c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801072ca:	83 e0 04             	and    $0x4,%eax
801072cd:	85 c0                	test   %eax,%eax
801072cf:	74 31                	je     80107302 <sys_open+0x109>
801072d1:	83 ec 08             	sub    $0x8,%esp
801072d4:	6a 02                	push   $0x2
801072d6:	ff 75 f4             	push   -0xc(%ebp)
801072d9:	e8 9e c3 ff ff       	call   8010367c <can_access>
801072de:	83 c4 10             	add    $0x10,%esp
801072e1:	85 c0                	test   %eax,%eax
801072e3:	75 1d                	jne    80107302 <sys_open+0x109>
            iunlockput(ip);
801072e5:	83 ec 0c             	sub    $0xc,%esp
801072e8:	ff 75 f4             	push   -0xc(%ebp)
801072eb:	e8 d2 b5 ff ff       	call   801028c2 <iunlockput>
801072f0:	83 c4 10             	add    $0x10,%esp
            end_op();
801072f3:	e8 c4 d4 ff ff       	call   801047bc <end_op>
            // cprintf("[open]")
            return -1;
801072f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801072fd:	e9 37 01 00 00       	jmp    80107439 <sys_open+0x240>
        }

        if ((omode & O_RDONLY || omode & O_RDWR) && !can_access(ip, PROT_R)) {
80107302:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80107305:	83 e0 01             	and    $0x1,%eax
80107308:	85 c0                	test   %eax,%eax
8010730a:	75 0a                	jne    80107316 <sys_open+0x11d>
8010730c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010730f:	83 e0 04             	and    $0x4,%eax
80107312:	85 c0                	test   %eax,%eax
80107314:	74 31                	je     80107347 <sys_open+0x14e>
80107316:	83 ec 08             	sub    $0x8,%esp
80107319:	6a 01                	push   $0x1
8010731b:	ff 75 f4             	push   -0xc(%ebp)
8010731e:	e8 59 c3 ff ff       	call   8010367c <can_access>
80107323:	83 c4 10             	add    $0x10,%esp
80107326:	85 c0                	test   %eax,%eax
80107328:	75 1d                	jne    80107347 <sys_open+0x14e>
            iunlockput(ip);
8010732a:	83 ec 0c             	sub    $0xc,%esp
8010732d:	ff 75 f4             	push   -0xc(%ebp)
80107330:	e8 8d b5 ff ff       	call   801028c2 <iunlockput>
80107335:	83 c4 10             	add    $0x10,%esp
            end_op();
80107338:	e8 7f d4 ff ff       	call   801047bc <end_op>
            // cprintf("[sys_open] No read access...\n");
            return -1;
8010733d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107342:	e9 f2 00 00 00       	jmp    80107439 <sys_open+0x240>
        }

        if (ip->type == T_DIR && omode != O_RDONLY) {
80107347:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010734a:	0f b7 40 50          	movzwl 0x50(%eax),%eax
8010734e:	66 83 f8 01          	cmp    $0x1,%ax
80107352:	75 25                	jne    80107379 <sys_open+0x180>
80107354:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80107357:	83 f8 01             	cmp    $0x1,%eax
8010735a:	74 1d                	je     80107379 <sys_open+0x180>
            iunlockput(ip);
8010735c:	83 ec 0c             	sub    $0xc,%esp
8010735f:	ff 75 f4             	push   -0xc(%ebp)
80107362:	e8 5b b5 ff ff       	call   801028c2 <iunlockput>
80107367:	83 c4 10             	add    $0x10,%esp
            end_op();
8010736a:	e8 4d d4 ff ff       	call   801047bc <end_op>
            return -1;
8010736f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107374:	e9 c0 00 00 00       	jmp    80107439 <sys_open+0x240>
        }
    }

    if ((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0) {
80107379:	e8 ff a7 ff ff       	call   80101b7d <filealloc>
8010737e:	89 45 f0             	mov    %eax,-0x10(%ebp)
80107381:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80107385:	74 17                	je     8010739e <sys_open+0x1a5>
80107387:	83 ec 0c             	sub    $0xc,%esp
8010738a:	ff 75 f0             	push   -0x10(%ebp)
8010738d:	e8 b9 f5 ff ff       	call   8010694b <fdalloc>
80107392:	83 c4 10             	add    $0x10,%esp
80107395:	89 45 ec             	mov    %eax,-0x14(%ebp)
80107398:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
8010739c:	79 2e                	jns    801073cc <sys_open+0x1d3>
        if (f) fileclose(f);
8010739e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
801073a2:	74 0e                	je     801073b2 <sys_open+0x1b9>
801073a4:	83 ec 0c             	sub    $0xc,%esp
801073a7:	ff 75 f0             	push   -0x10(%ebp)
801073aa:	e8 8c a8 ff ff       	call   80101c3b <fileclose>
801073af:	83 c4 10             	add    $0x10,%esp
        iunlockput(ip);
801073b2:	83 ec 0c             	sub    $0xc,%esp
801073b5:	ff 75 f4             	push   -0xc(%ebp)
801073b8:	e8 05 b5 ff ff       	call   801028c2 <iunlockput>
801073bd:	83 c4 10             	add    $0x10,%esp
        end_op();
801073c0:	e8 f7 d3 ff ff       	call   801047bc <end_op>
        return -1;
801073c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801073ca:	eb 6d                	jmp    80107439 <sys_open+0x240>
    }
    iunlock(ip);
801073cc:	83 ec 0c             	sub    $0xc,%esp
801073cf:	ff 75 f4             	push   -0xc(%ebp)
801073d2:	e8 cd b3 ff ff       	call   801027a4 <iunlock>
801073d7:	83 c4 10             	add    $0x10,%esp
    end_op();
801073da:	e8 dd d3 ff ff       	call   801047bc <end_op>

    f->type = FD_INODE;
801073df:	8b 45 f0             	mov    -0x10(%ebp),%eax
801073e2:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    f->ip = ip;
801073e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
801073eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
801073ee:	89 50 10             	mov    %edx,0x10(%eax)
    f->off = 0;
801073f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
801073f4:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    f->readable = !(omode & O_WRONLY);
801073fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801073fe:	83 e0 02             	and    $0x2,%eax
80107401:	85 c0                	test   %eax,%eax
80107403:	0f 94 c0             	sete   %al
80107406:	89 c2                	mov    %eax,%edx
80107408:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010740b:	88 50 08             	mov    %dl,0x8(%eax)
    f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
8010740e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80107411:	83 e0 02             	and    $0x2,%eax
80107414:	85 c0                	test   %eax,%eax
80107416:	75 0a                	jne    80107422 <sys_open+0x229>
80107418:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010741b:	83 e0 04             	and    $0x4,%eax
8010741e:	85 c0                	test   %eax,%eax
80107420:	74 07                	je     80107429 <sys_open+0x230>
80107422:	b8 01 00 00 00       	mov    $0x1,%eax
80107427:	eb 05                	jmp    8010742e <sys_open+0x235>
80107429:	b8 00 00 00 00       	mov    $0x0,%eax
8010742e:	89 c2                	mov    %eax,%edx
80107430:	8b 45 f0             	mov    -0x10(%ebp),%eax
80107433:	88 50 09             	mov    %dl,0x9(%eax)
    return fd;
80107436:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
80107439:	c9                   	leave  
8010743a:	c3                   	ret    

8010743b <sys_mkdir>:

int sys_mkdir(void) {
8010743b:	55                   	push   %ebp
8010743c:	89 e5                	mov    %esp,%ebp
8010743e:	83 ec 18             	sub    $0x18,%esp
    char* path;
    struct inode* ip;

    begin_op();
80107441:	e8 ea d2 ff ff       	call   80104730 <begin_op>
    if (argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0) {
80107446:	83 ec 08             	sub    $0x8,%esp
80107449:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010744c:	50                   	push   %eax
8010744d:	6a 00                	push   $0x0
8010744f:	e8 ce f3 ff ff       	call   80106822 <argstr>
80107454:	83 c4 10             	add    $0x10,%esp
80107457:	85 c0                	test   %eax,%eax
80107459:	78 1b                	js     80107476 <sys_mkdir+0x3b>
8010745b:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010745e:	6a 00                	push   $0x0
80107460:	6a 00                	push   $0x0
80107462:	6a 01                	push   $0x1
80107464:	50                   	push   %eax
80107465:	e8 79 fb ff ff       	call   80106fe3 <create>
8010746a:	83 c4 10             	add    $0x10,%esp
8010746d:	89 45 f4             	mov    %eax,-0xc(%ebp)
80107470:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80107474:	75 0c                	jne    80107482 <sys_mkdir+0x47>
        end_op();
80107476:	e8 41 d3 ff ff       	call   801047bc <end_op>
        return -1;
8010747b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107480:	eb 18                	jmp    8010749a <sys_mkdir+0x5f>
    }
    iunlockput(ip);
80107482:	83 ec 0c             	sub    $0xc,%esp
80107485:	ff 75 f4             	push   -0xc(%ebp)
80107488:	e8 35 b4 ff ff       	call   801028c2 <iunlockput>
8010748d:	83 c4 10             	add    $0x10,%esp
    end_op();
80107490:	e8 27 d3 ff ff       	call   801047bc <end_op>
    return 0;
80107495:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010749a:	c9                   	leave  
8010749b:	c3                   	ret    

8010749c <sys_mknod>:

int sys_mknod(void) {
8010749c:	55                   	push   %ebp
8010749d:	89 e5                	mov    %esp,%ebp
8010749f:	83 ec 18             	sub    $0x18,%esp
    struct inode* ip;
    char* path;
    int major, minor;

    begin_op();
801074a2:	e8 89 d2 ff ff       	call   80104730 <begin_op>
    if ((argstr(0, &path)) < 0 || argint(1, &major) < 0 ||
801074a7:	83 ec 08             	sub    $0x8,%esp
801074aa:	8d 45 f0             	lea    -0x10(%ebp),%eax
801074ad:	50                   	push   %eax
801074ae:	6a 00                	push   $0x0
801074b0:	e8 6d f3 ff ff       	call   80106822 <argstr>
801074b5:	83 c4 10             	add    $0x10,%esp
801074b8:	85 c0                	test   %eax,%eax
801074ba:	78 4f                	js     8010750b <sys_mknod+0x6f>
801074bc:	83 ec 08             	sub    $0x8,%esp
801074bf:	8d 45 ec             	lea    -0x14(%ebp),%eax
801074c2:	50                   	push   %eax
801074c3:	6a 01                	push   $0x1
801074c5:	e8 c3 f2 ff ff       	call   8010678d <argint>
801074ca:	83 c4 10             	add    $0x10,%esp
801074cd:	85 c0                	test   %eax,%eax
801074cf:	78 3a                	js     8010750b <sys_mknod+0x6f>
        argint(2, &minor) < 0 ||
801074d1:	83 ec 08             	sub    $0x8,%esp
801074d4:	8d 45 e8             	lea    -0x18(%ebp),%eax
801074d7:	50                   	push   %eax
801074d8:	6a 02                	push   $0x2
801074da:	e8 ae f2 ff ff       	call   8010678d <argint>
801074df:	83 c4 10             	add    $0x10,%esp
    if ((argstr(0, &path)) < 0 || argint(1, &major) < 0 ||
801074e2:	85 c0                	test   %eax,%eax
801074e4:	78 25                	js     8010750b <sys_mknod+0x6f>
        (ip = create(path, T_DEV, major, minor)) == 0) {
801074e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
801074e9:	0f bf c8             	movswl %ax,%ecx
801074ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
801074ef:	0f bf d0             	movswl %ax,%edx
801074f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
801074f5:	51                   	push   %ecx
801074f6:	52                   	push   %edx
801074f7:	6a 03                	push   $0x3
801074f9:	50                   	push   %eax
801074fa:	e8 e4 fa ff ff       	call   80106fe3 <create>
801074ff:	83 c4 10             	add    $0x10,%esp
80107502:	89 45 f4             	mov    %eax,-0xc(%ebp)
        argint(2, &minor) < 0 ||
80107505:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80107509:	75 0c                	jne    80107517 <sys_mknod+0x7b>
        end_op();
8010750b:	e8 ac d2 ff ff       	call   801047bc <end_op>
        return -1;
80107510:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107515:	eb 18                	jmp    8010752f <sys_mknod+0x93>
    }
    iunlockput(ip);
80107517:	83 ec 0c             	sub    $0xc,%esp
8010751a:	ff 75 f4             	push   -0xc(%ebp)
8010751d:	e8 a0 b3 ff ff       	call   801028c2 <iunlockput>
80107522:	83 c4 10             	add    $0x10,%esp
    end_op();
80107525:	e8 92 d2 ff ff       	call   801047bc <end_op>
    return 0;
8010752a:	b8 00 00 00 00       	mov    $0x0,%eax
}
8010752f:	c9                   	leave  
80107530:	c3                   	ret    

80107531 <sys_chdir>:

int sys_chdir(void) {
80107531:	55                   	push   %ebp
80107532:	89 e5                	mov    %esp,%ebp
80107534:	83 ec 18             	sub    $0x18,%esp
    char* path;
    struct inode* ip;
    struct proc* curproc = myproc();
80107537:	e8 55 df ff ff       	call   80105491 <myproc>
8010753c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    begin_op();
8010753f:	e8 ec d1 ff ff       	call   80104730 <begin_op>
    if (argstr(0, &path) < 0 || (ip = namei(path)) == 0) {
80107544:	83 ec 08             	sub    $0x8,%esp
80107547:	8d 45 ec             	lea    -0x14(%ebp),%eax
8010754a:	50                   	push   %eax
8010754b:	6a 00                	push   $0x0
8010754d:	e8 d0 f2 ff ff       	call   80106822 <argstr>
80107552:	83 c4 10             	add    $0x10,%esp
80107555:	85 c0                	test   %eax,%eax
80107557:	78 18                	js     80107571 <sys_chdir+0x40>
80107559:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010755c:	83 ec 0c             	sub    $0xc,%esp
8010755f:	50                   	push   %eax
80107560:	e8 29 bf ff ff       	call   8010348e <namei>
80107565:	83 c4 10             	add    $0x10,%esp
80107568:	89 45 f0             	mov    %eax,-0x10(%ebp)
8010756b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8010756f:	75 0f                	jne    80107580 <sys_chdir+0x4f>
        end_op();
80107571:	e8 46 d2 ff ff       	call   801047bc <end_op>
        return -1;
80107576:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010757b:	e9 96 00 00 00       	jmp    80107616 <sys_chdir+0xe5>
    }

    ilock(ip);
80107580:	83 ec 0c             	sub    $0xc,%esp
80107583:	ff 75 f0             	push   -0x10(%ebp)
80107586:	e8 ea b0 ff ff       	call   80102675 <ilock>
8010758b:	83 c4 10             	add    $0x10,%esp

    if (!can_access(ip, PROT_R)) {
8010758e:	83 ec 08             	sub    $0x8,%esp
80107591:	6a 01                	push   $0x1
80107593:	ff 75 f0             	push   -0x10(%ebp)
80107596:	e8 e1 c0 ff ff       	call   8010367c <can_access>
8010759b:	83 c4 10             	add    $0x10,%esp
8010759e:	85 c0                	test   %eax,%eax
801075a0:	75 1a                	jne    801075bc <sys_chdir+0x8b>
        iunlockput(ip);
801075a2:	83 ec 0c             	sub    $0xc,%esp
801075a5:	ff 75 f0             	push   -0x10(%ebp)
801075a8:	e8 15 b3 ff ff       	call   801028c2 <iunlockput>
801075ad:	83 c4 10             	add    $0x10,%esp
        end_op();
801075b0:	e8 07 d2 ff ff       	call   801047bc <end_op>
        return -1;
801075b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801075ba:	eb 5a                	jmp    80107616 <sys_chdir+0xe5>
    }

    if (ip->type != T_DIR) {
801075bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
801075bf:	0f b7 40 50          	movzwl 0x50(%eax),%eax
801075c3:	66 83 f8 01          	cmp    $0x1,%ax
801075c7:	74 1a                	je     801075e3 <sys_chdir+0xb2>
        iunlockput(ip);
801075c9:	83 ec 0c             	sub    $0xc,%esp
801075cc:	ff 75 f0             	push   -0x10(%ebp)
801075cf:	e8 ee b2 ff ff       	call   801028c2 <iunlockput>
801075d4:	83 c4 10             	add    $0x10,%esp
        end_op();
801075d7:	e8 e0 d1 ff ff       	call   801047bc <end_op>
        return -1;
801075dc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801075e1:	eb 33                	jmp    80107616 <sys_chdir+0xe5>
    }
    iunlock(ip);
801075e3:	83 ec 0c             	sub    $0xc,%esp
801075e6:	ff 75 f0             	push   -0x10(%ebp)
801075e9:	e8 b6 b1 ff ff       	call   801027a4 <iunlock>
801075ee:	83 c4 10             	add    $0x10,%esp
    iput(curproc->cwd);
801075f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
801075f4:	8b 40 68             	mov    0x68(%eax),%eax
801075f7:	83 ec 0c             	sub    $0xc,%esp
801075fa:	50                   	push   %eax
801075fb:	e8 f2 b1 ff ff       	call   801027f2 <iput>
80107600:	83 c4 10             	add    $0x10,%esp
    end_op();
80107603:	e8 b4 d1 ff ff       	call   801047bc <end_op>
    curproc->cwd = ip;
80107608:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010760b:	8b 55 f0             	mov    -0x10(%ebp),%edx
8010760e:	89 50 68             	mov    %edx,0x68(%eax)
    return 0;
80107611:	b8 00 00 00 00       	mov    $0x0,%eax
}
80107616:	c9                   	leave  
80107617:	c3                   	ret    

80107618 <sys_exec>:

int sys_exec(void) {
80107618:	55                   	push   %ebp
80107619:	89 e5                	mov    %esp,%ebp
8010761b:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char *path, *argv[MAXARG];
    int i;
    uint uargv, uarg;

    if (argstr(0, &path) < 0 || argint(1, (int*) &uargv) < 0) {
80107621:	83 ec 08             	sub    $0x8,%esp
80107624:	8d 45 f0             	lea    -0x10(%ebp),%eax
80107627:	50                   	push   %eax
80107628:	6a 00                	push   $0x0
8010762a:	e8 f3 f1 ff ff       	call   80106822 <argstr>
8010762f:	83 c4 10             	add    $0x10,%esp
80107632:	85 c0                	test   %eax,%eax
80107634:	78 18                	js     8010764e <sys_exec+0x36>
80107636:	83 ec 08             	sub    $0x8,%esp
80107639:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
8010763f:	50                   	push   %eax
80107640:	6a 01                	push   $0x1
80107642:	e8 46 f1 ff ff       	call   8010678d <argint>
80107647:	83 c4 10             	add    $0x10,%esp
8010764a:	85 c0                	test   %eax,%eax
8010764c:	79 0a                	jns    80107658 <sys_exec+0x40>
        return -1;
8010764e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107653:	e9 c6 00 00 00       	jmp    8010771e <sys_exec+0x106>
    }
    memset(argv, 0, sizeof(argv));
80107658:	83 ec 04             	sub    $0x4,%esp
8010765b:	68 80 00 00 00       	push   $0x80
80107660:	6a 00                	push   $0x0
80107662:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
80107668:	50                   	push   %eax
80107669:	e8 09 ee ff ff       	call   80106477 <memset>
8010766e:	83 c4 10             	add    $0x10,%esp
    for (i = 0;; i++) {
80107671:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        if (i >= NELEM(argv)) return -1;
80107678:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010767b:	83 f8 1f             	cmp    $0x1f,%eax
8010767e:	76 0a                	jbe    8010768a <sys_exec+0x72>
80107680:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107685:	e9 94 00 00 00       	jmp    8010771e <sys_exec+0x106>
        if (fetchint(uargv + 4 * i, (int*) &uarg) < 0) return -1;
8010768a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010768d:	c1 e0 02             	shl    $0x2,%eax
80107690:	89 c2                	mov    %eax,%edx
80107692:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
80107698:	01 c2                	add    %eax,%edx
8010769a:	83 ec 08             	sub    $0x8,%esp
8010769d:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
801076a3:	50                   	push   %eax
801076a4:	52                   	push   %edx
801076a5:	e8 42 f0 ff ff       	call   801066ec <fetchint>
801076aa:	83 c4 10             	add    $0x10,%esp
801076ad:	85 c0                	test   %eax,%eax
801076af:	79 07                	jns    801076b8 <sys_exec+0xa0>
801076b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801076b6:	eb 66                	jmp    8010771e <sys_exec+0x106>
        if (uarg == 0) {
801076b8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
801076be:	85 c0                	test   %eax,%eax
801076c0:	75 27                	jne    801076e9 <sys_exec+0xd1>
            argv[i] = 0;
801076c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
801076c5:	c7 84 85 70 ff ff ff 	movl   $0x0,-0x90(%ebp,%eax,4)
801076cc:	00 00 00 00 
            break;
801076d0:	90                   	nop
        }
        if (fetchstr(uarg, &argv[i]) < 0) return -1;
    }
    return exec(path, argv);
801076d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
801076d4:	83 ec 08             	sub    $0x8,%esp
801076d7:	8d 95 70 ff ff ff    	lea    -0x90(%ebp),%edx
801076dd:	52                   	push   %edx
801076de:	50                   	push   %eax
801076df:	e8 0b a0 ff ff       	call   801016ef <exec>
801076e4:	83 c4 10             	add    $0x10,%esp
801076e7:	eb 35                	jmp    8010771e <sys_exec+0x106>
        if (fetchstr(uarg, &argv[i]) < 0) return -1;
801076e9:	8d 95 70 ff ff ff    	lea    -0x90(%ebp),%edx
801076ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
801076f2:	c1 e0 02             	shl    $0x2,%eax
801076f5:	01 c2                	add    %eax,%edx
801076f7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
801076fd:	83 ec 08             	sub    $0x8,%esp
80107700:	52                   	push   %edx
80107701:	50                   	push   %eax
80107702:	e8 24 f0 ff ff       	call   8010672b <fetchstr>
80107707:	83 c4 10             	add    $0x10,%esp
8010770a:	85 c0                	test   %eax,%eax
8010770c:	79 07                	jns    80107715 <sys_exec+0xfd>
8010770e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107713:	eb 09                	jmp    8010771e <sys_exec+0x106>
    for (i = 0;; i++) {
80107715:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        if (i >= NELEM(argv)) return -1;
80107719:	e9 5a ff ff ff       	jmp    80107678 <sys_exec+0x60>
}
8010771e:	c9                   	leave  
8010771f:	c3                   	ret    

80107720 <sys_pipe>:

int sys_pipe(void) {
80107720:	55                   	push   %ebp
80107721:	89 e5                	mov    %esp,%ebp
80107723:	83 ec 28             	sub    $0x28,%esp
    int* fd;
    struct file *rf, *wf;
    int fd0, fd1;

    if (argptr(0, (void*) &fd, 2 * sizeof(fd[0])) < 0) return -1;
80107726:	83 ec 04             	sub    $0x4,%esp
80107729:	6a 08                	push   $0x8
8010772b:	8d 45 ec             	lea    -0x14(%ebp),%eax
8010772e:	50                   	push   %eax
8010772f:	6a 00                	push   $0x0
80107731:	e8 84 f0 ff ff       	call   801067ba <argptr>
80107736:	83 c4 10             	add    $0x10,%esp
80107739:	85 c0                	test   %eax,%eax
8010773b:	79 0a                	jns    80107747 <sys_pipe+0x27>
8010773d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107742:	e9 ae 00 00 00       	jmp    801077f5 <sys_pipe+0xd5>
    if (pipealloc(&rf, &wf) < 0) return -1;
80107747:	83 ec 08             	sub    $0x8,%esp
8010774a:	8d 45 e4             	lea    -0x1c(%ebp),%eax
8010774d:	50                   	push   %eax
8010774e:	8d 45 e8             	lea    -0x18(%ebp),%eax
80107751:	50                   	push   %eax
80107752:	e8 77 d8 ff ff       	call   80104fce <pipealloc>
80107757:	83 c4 10             	add    $0x10,%esp
8010775a:	85 c0                	test   %eax,%eax
8010775c:	79 0a                	jns    80107768 <sys_pipe+0x48>
8010775e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107763:	e9 8d 00 00 00       	jmp    801077f5 <sys_pipe+0xd5>
    fd0 = -1;
80107768:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
    if ((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0) {
8010776f:	8b 45 e8             	mov    -0x18(%ebp),%eax
80107772:	83 ec 0c             	sub    $0xc,%esp
80107775:	50                   	push   %eax
80107776:	e8 d0 f1 ff ff       	call   8010694b <fdalloc>
8010777b:	83 c4 10             	add    $0x10,%esp
8010777e:	89 45 f4             	mov    %eax,-0xc(%ebp)
80107781:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80107785:	78 18                	js     8010779f <sys_pipe+0x7f>
80107787:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010778a:	83 ec 0c             	sub    $0xc,%esp
8010778d:	50                   	push   %eax
8010778e:	e8 b8 f1 ff ff       	call   8010694b <fdalloc>
80107793:	83 c4 10             	add    $0x10,%esp
80107796:	89 45 f0             	mov    %eax,-0x10(%ebp)
80107799:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8010779d:	79 3e                	jns    801077dd <sys_pipe+0xbd>
        if (fd0 >= 0) myproc()->ofile[fd0] = 0;
8010779f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
801077a3:	78 13                	js     801077b8 <sys_pipe+0x98>
801077a5:	e8 e7 dc ff ff       	call   80105491 <myproc>
801077aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
801077ad:	83 c2 08             	add    $0x8,%edx
801077b0:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
801077b7:	00 
        fileclose(rf);
801077b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
801077bb:	83 ec 0c             	sub    $0xc,%esp
801077be:	50                   	push   %eax
801077bf:	e8 77 a4 ff ff       	call   80101c3b <fileclose>
801077c4:	83 c4 10             	add    $0x10,%esp
        fileclose(wf);
801077c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801077ca:	83 ec 0c             	sub    $0xc,%esp
801077cd:	50                   	push   %eax
801077ce:	e8 68 a4 ff ff       	call   80101c3b <fileclose>
801077d3:	83 c4 10             	add    $0x10,%esp
        return -1;
801077d6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801077db:	eb 18                	jmp    801077f5 <sys_pipe+0xd5>
    }
    fd[0] = fd0;
801077dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
801077e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
801077e3:	89 10                	mov    %edx,(%eax)
    fd[1] = fd1;
801077e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
801077e8:	8d 50 04             	lea    0x4(%eax),%edx
801077eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
801077ee:	89 02                	mov    %eax,(%edx)
    return 0;
801077f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
801077f5:	c9                   	leave  
801077f6:	c3                   	ret    

801077f7 <sys_chown>:

int sys_chown(void) {
801077f7:	55                   	push   %ebp
801077f8:	89 e5                	mov    %esp,%ebp
801077fa:	83 ec 18             	sub    $0x18,%esp
    char* filename;
    int uid;

    if (argstr(0, &filename) < 0 || argint(1, (int*) &uid) < 0) {
801077fd:	83 ec 08             	sub    $0x8,%esp
80107800:	8d 45 f4             	lea    -0xc(%ebp),%eax
80107803:	50                   	push   %eax
80107804:	6a 00                	push   $0x0
80107806:	e8 17 f0 ff ff       	call   80106822 <argstr>
8010780b:	83 c4 10             	add    $0x10,%esp
8010780e:	85 c0                	test   %eax,%eax
80107810:	78 15                	js     80107827 <sys_chown+0x30>
80107812:	83 ec 08             	sub    $0x8,%esp
80107815:	8d 45 f0             	lea    -0x10(%ebp),%eax
80107818:	50                   	push   %eax
80107819:	6a 01                	push   $0x1
8010781b:	e8 6d ef ff ff       	call   8010678d <argint>
80107820:	83 c4 10             	add    $0x10,%esp
80107823:	85 c0                	test   %eax,%eax
80107825:	79 07                	jns    8010782e <sys_chown+0x37>
        return -1;
80107827:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010782c:	eb 13                	jmp    80107841 <sys_chown+0x4a>
    }

    return chown(filename, uid);
8010782e:	8b 55 f0             	mov    -0x10(%ebp),%edx
80107831:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107834:	83 ec 08             	sub    $0x8,%esp
80107837:	52                   	push   %edx
80107838:	50                   	push   %eax
80107839:	e8 87 bc ff ff       	call   801034c5 <chown>
8010783e:	83 c4 10             	add    $0x10,%esp
}
80107841:	c9                   	leave  
80107842:	c3                   	ret    

80107843 <sys_chmod>:

int sys_chmod() {
80107843:	55                   	push   %ebp
80107844:	89 e5                	mov    %esp,%ebp
80107846:	83 ec 18             	sub    $0x18,%esp
    char* filename;
    int perm;

    if (argstr(0, &filename) < 0 || argint(1, (int*) &perm) < 0) {
80107849:	83 ec 08             	sub    $0x8,%esp
8010784c:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010784f:	50                   	push   %eax
80107850:	6a 00                	push   $0x0
80107852:	e8 cb ef ff ff       	call   80106822 <argstr>
80107857:	83 c4 10             	add    $0x10,%esp
8010785a:	85 c0                	test   %eax,%eax
8010785c:	78 15                	js     80107873 <sys_chmod+0x30>
8010785e:	83 ec 08             	sub    $0x8,%esp
80107861:	8d 45 f0             	lea    -0x10(%ebp),%eax
80107864:	50                   	push   %eax
80107865:	6a 01                	push   $0x1
80107867:	e8 21 ef ff ff       	call   8010678d <argint>
8010786c:	83 c4 10             	add    $0x10,%esp
8010786f:	85 c0                	test   %eax,%eax
80107871:	79 07                	jns    8010787a <sys_chmod+0x37>
        return -1;
80107873:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107878:	eb 13                	jmp    8010788d <sys_chmod+0x4a>
    }

    return chmod(filename, perm);
8010787a:	8b 55 f0             	mov    -0x10(%ebp),%edx
8010787d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107880:	83 ec 08             	sub    $0x8,%esp
80107883:	52                   	push   %edx
80107884:	50                   	push   %eax
80107885:	e8 0d bd ff ff       	call   80103597 <chmod>
8010788a:	83 c4 10             	add    $0x10,%esp
}
8010788d:	c9                   	leave  
8010788e:	c3                   	ret    

8010788f <sys_report_stats>:
int sys_report_stats(void) {
8010788f:	55                   	push   %ebp
80107890:	89 e5                	mov    %esp,%ebp
80107892:	83 ec 18             	sub    $0x18,%esp
    struct disk_stat* dstat;

    if (argptr(0, (void*) &dstat, sizeof(*dstat)) < 0) return -1;
80107895:	83 ec 04             	sub    $0x4,%esp
80107898:	6a 14                	push   $0x14
8010789a:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010789d:	50                   	push   %eax
8010789e:	6a 00                	push   $0x0
801078a0:	e8 15 ef ff ff       	call   801067ba <argptr>
801078a5:	83 c4 10             	add    $0x10,%esp
801078a8:	85 c0                	test   %eax,%eax
801078aa:	79 07                	jns    801078b3 <sys_report_stats+0x24>
801078ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801078b1:	eb 0f                	jmp    801078c2 <sys_report_stats+0x33>
    return report_stats(dstat);
801078b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
801078b6:	83 ec 0c             	sub    $0xc,%esp
801078b9:	50                   	push   %eax
801078ba:	e8 68 c7 ff ff       	call   80104027 <report_stats>
801078bf:	83 c4 10             	add    $0x10,%esp
}
801078c2:	c9                   	leave  
801078c3:	c3                   	ret    

801078c4 <sys_fork>:
#include "param.h"
#include "memlayout.h"
#include "mmu.h"
#include "proc.h"

int sys_fork(void) { return fork(); }
801078c4:	55                   	push   %ebp
801078c5:	89 e5                	mov    %esp,%ebp
801078c7:	83 ec 08             	sub    $0x8,%esp
801078ca:	e8 cb de ff ff       	call   8010579a <fork>
801078cf:	c9                   	leave  
801078d0:	c3                   	ret    

801078d1 <sys_exit>:

int sys_exit(void) {
801078d1:	55                   	push   %ebp
801078d2:	89 e5                	mov    %esp,%ebp
801078d4:	83 ec 08             	sub    $0x8,%esp
    exit();
801078d7:	e8 43 e0 ff ff       	call   8010591f <exit>
    return 0;  // not reached
801078dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
801078e1:	c9                   	leave  
801078e2:	c3                   	ret    

801078e3 <sys_wait>:

int sys_wait(void) { return wait(); }
801078e3:	55                   	push   %ebp
801078e4:	89 e5                	mov    %esp,%ebp
801078e6:	83 ec 08             	sub    $0x8,%esp
801078e9:	e8 51 e1 ff ff       	call   80105a3f <wait>
801078ee:	c9                   	leave  
801078ef:	c3                   	ret    

801078f0 <sys_kill>:

int sys_kill(void) {
801078f0:	55                   	push   %ebp
801078f1:	89 e5                	mov    %esp,%ebp
801078f3:	83 ec 18             	sub    $0x18,%esp
    int pid;

    if (argint(0, &pid) < 0) return -1;
801078f6:	83 ec 08             	sub    $0x8,%esp
801078f9:	8d 45 f4             	lea    -0xc(%ebp),%eax
801078fc:	50                   	push   %eax
801078fd:	6a 00                	push   $0x0
801078ff:	e8 89 ee ff ff       	call   8010678d <argint>
80107904:	83 c4 10             	add    $0x10,%esp
80107907:	85 c0                	test   %eax,%eax
80107909:	79 07                	jns    80107912 <sys_kill+0x22>
8010790b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107910:	eb 0f                	jmp    80107921 <sys_kill+0x31>
    return kill(pid);
80107912:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107915:	83 ec 0c             	sub    $0xc,%esp
80107918:	50                   	push   %eax
80107919:	e8 5e e5 ff ff       	call   80105e7c <kill>
8010791e:	83 c4 10             	add    $0x10,%esp
}
80107921:	c9                   	leave  
80107922:	c3                   	ret    

80107923 <sys_getpid>:

int sys_getpid(void) { return myproc()->pid; }
80107923:	55                   	push   %ebp
80107924:	89 e5                	mov    %esp,%ebp
80107926:	83 ec 08             	sub    $0x8,%esp
80107929:	e8 63 db ff ff       	call   80105491 <myproc>
8010792e:	8b 40 10             	mov    0x10(%eax),%eax
80107931:	c9                   	leave  
80107932:	c3                   	ret    

80107933 <sys_setuid>:

int sys_setuid(void) {
80107933:	55                   	push   %ebp
80107934:	89 e5                	mov    %esp,%ebp
80107936:	83 ec 18             	sub    $0x18,%esp
    int uid;

    if (argint(0, &uid) < 0) {
80107939:	83 ec 08             	sub    $0x8,%esp
8010793c:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010793f:	50                   	push   %eax
80107940:	6a 00                	push   $0x0
80107942:	e8 46 ee ff ff       	call   8010678d <argint>
80107947:	83 c4 10             	add    $0x10,%esp
8010794a:	85 c0                	test   %eax,%eax
8010794c:	79 07                	jns    80107955 <sys_setuid+0x22>
        return -1;
8010794e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107953:	eb 0f                	jmp    80107964 <sys_setuid+0x31>
    }
    return setuid(uid);
80107955:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107958:	83 ec 0c             	sub    $0xc,%esp
8010795b:	50                   	push   %eax
8010795c:	e8 99 e6 ff ff       	call   80105ffa <setuid>
80107961:	83 c4 10             	add    $0x10,%esp
}
80107964:	c9                   	leave  
80107965:	c3                   	ret    

80107966 <sys_getuid>:

int sys_getuid(void) { return getuid(); }
80107966:	55                   	push   %ebp
80107967:	89 e5                	mov    %esp,%ebp
80107969:	83 ec 08             	sub    $0x8,%esp
8010796c:	e8 c7 e6 ff ff       	call   80106038 <getuid>
80107971:	c9                   	leave  
80107972:	c3                   	ret    

80107973 <sys_sbrk>:

int sys_sbrk(void) {
80107973:	55                   	push   %ebp
80107974:	89 e5                	mov    %esp,%ebp
80107976:	83 ec 18             	sub    $0x18,%esp
    int addr;
    int n;

    if (argint(0, &n) < 0) return -1;
80107979:	83 ec 08             	sub    $0x8,%esp
8010797c:	8d 45 f0             	lea    -0x10(%ebp),%eax
8010797f:	50                   	push   %eax
80107980:	6a 00                	push   $0x0
80107982:	e8 06 ee ff ff       	call   8010678d <argint>
80107987:	83 c4 10             	add    $0x10,%esp
8010798a:	85 c0                	test   %eax,%eax
8010798c:	79 07                	jns    80107995 <sys_sbrk+0x22>
8010798e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107993:	eb 27                	jmp    801079bc <sys_sbrk+0x49>
    addr = myproc()->sz;
80107995:	e8 f7 da ff ff       	call   80105491 <myproc>
8010799a:	8b 00                	mov    (%eax),%eax
8010799c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (growproc(n) < 0) return -1;
8010799f:	8b 45 f0             	mov    -0x10(%ebp),%eax
801079a2:	83 ec 0c             	sub    $0xc,%esp
801079a5:	50                   	push   %eax
801079a6:	e8 54 dd ff ff       	call   801056ff <growproc>
801079ab:	83 c4 10             	add    $0x10,%esp
801079ae:	85 c0                	test   %eax,%eax
801079b0:	79 07                	jns    801079b9 <sys_sbrk+0x46>
801079b2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801079b7:	eb 03                	jmp    801079bc <sys_sbrk+0x49>
    return addr;
801079b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
801079bc:	c9                   	leave  
801079bd:	c3                   	ret    

801079be <sys_sleep>:

int sys_sleep(void) {
801079be:	55                   	push   %ebp
801079bf:	89 e5                	mov    %esp,%ebp
801079c1:	83 ec 18             	sub    $0x18,%esp
    int n;
    uint ticks0;

    if (argint(0, &n) < 0) return -1;
801079c4:	83 ec 08             	sub    $0x8,%esp
801079c7:	8d 45 f0             	lea    -0x10(%ebp),%eax
801079ca:	50                   	push   %eax
801079cb:	6a 00                	push   $0x0
801079cd:	e8 bb ed ff ff       	call   8010678d <argint>
801079d2:	83 c4 10             	add    $0x10,%esp
801079d5:	85 c0                	test   %eax,%eax
801079d7:	79 07                	jns    801079e0 <sys_sleep+0x22>
801079d9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801079de:	eb 76                	jmp    80107a56 <sys_sleep+0x98>
    acquire(&tickslock);
801079e0:	83 ec 0c             	sub    $0xc,%esp
801079e3:	68 c0 61 11 80       	push   $0x801161c0
801079e8:	e8 f5 e7 ff ff       	call   801061e2 <acquire>
801079ed:	83 c4 10             	add    $0x10,%esp
    ticks0 = ticks;
801079f0:	a1 f4 61 11 80       	mov    0x801161f4,%eax
801079f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (ticks - ticks0 < n) {
801079f8:	eb 38                	jmp    80107a32 <sys_sleep+0x74>
        if (myproc()->killed) {
801079fa:	e8 92 da ff ff       	call   80105491 <myproc>
801079ff:	8b 40 24             	mov    0x24(%eax),%eax
80107a02:	85 c0                	test   %eax,%eax
80107a04:	74 17                	je     80107a1d <sys_sleep+0x5f>
            release(&tickslock);
80107a06:	83 ec 0c             	sub    $0xc,%esp
80107a09:	68 c0 61 11 80       	push   $0x801161c0
80107a0e:	e8 42 e8 ff ff       	call   80106255 <release>
80107a13:	83 c4 10             	add    $0x10,%esp
            return -1;
80107a16:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80107a1b:	eb 39                	jmp    80107a56 <sys_sleep+0x98>
        }
        sleep(&ticks, &tickslock);
80107a1d:	83 ec 08             	sub    $0x8,%esp
80107a20:	68 c0 61 11 80       	push   $0x801161c0
80107a25:	68 f4 61 11 80       	push   $0x801161f4
80107a2a:	e8 2f e3 ff ff       	call   80105d5e <sleep>
80107a2f:	83 c4 10             	add    $0x10,%esp
    while (ticks - ticks0 < n) {
80107a32:	a1 f4 61 11 80       	mov    0x801161f4,%eax
80107a37:	2b 45 f4             	sub    -0xc(%ebp),%eax
80107a3a:	8b 55 f0             	mov    -0x10(%ebp),%edx
80107a3d:	39 d0                	cmp    %edx,%eax
80107a3f:	72 b9                	jb     801079fa <sys_sleep+0x3c>
    }
    release(&tickslock);
80107a41:	83 ec 0c             	sub    $0xc,%esp
80107a44:	68 c0 61 11 80       	push   $0x801161c0
80107a49:	e8 07 e8 ff ff       	call   80106255 <release>
80107a4e:	83 c4 10             	add    $0x10,%esp
    return 0;
80107a51:	b8 00 00 00 00       	mov    $0x0,%eax
}
80107a56:	c9                   	leave  
80107a57:	c3                   	ret    

80107a58 <sys_uptime>:

// return how many clock tick interrupts have occurred
// since start.
int sys_uptime(void) {
80107a58:	55                   	push   %ebp
80107a59:	89 e5                	mov    %esp,%ebp
80107a5b:	83 ec 18             	sub    $0x18,%esp
    uint xticks;

    acquire(&tickslock);
80107a5e:	83 ec 0c             	sub    $0xc,%esp
80107a61:	68 c0 61 11 80       	push   $0x801161c0
80107a66:	e8 77 e7 ff ff       	call   801061e2 <acquire>
80107a6b:	83 c4 10             	add    $0x10,%esp
    xticks = ticks;
80107a6e:	a1 f4 61 11 80       	mov    0x801161f4,%eax
80107a73:	89 45 f4             	mov    %eax,-0xc(%ebp)
    release(&tickslock);
80107a76:	83 ec 0c             	sub    $0xc,%esp
80107a79:	68 c0 61 11 80       	push   $0x801161c0
80107a7e:	e8 d2 e7 ff ff       	call   80106255 <release>
80107a83:	83 c4 10             	add    $0x10,%esp
    return xticks;
80107a86:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
80107a89:	c9                   	leave  
80107a8a:	c3                   	ret    

80107a8b <lidt>:
{
80107a8b:	55                   	push   %ebp
80107a8c:	89 e5                	mov    %esp,%ebp
80107a8e:	83 ec 10             	sub    $0x10,%esp
  pd[0] = size-1;
80107a91:	8b 45 0c             	mov    0xc(%ebp),%eax
80107a94:	83 e8 01             	sub    $0x1,%eax
80107a97:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  pd[1] = (uint)p;
80107a9b:	8b 45 08             	mov    0x8(%ebp),%eax
80107a9e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  pd[2] = (uint)p >> 16;
80107aa2:	8b 45 08             	mov    0x8(%ebp),%eax
80107aa5:	c1 e8 10             	shr    $0x10,%eax
80107aa8:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  __asm__ volatile("lidt (%0)" : : "r" (pd));
80107aac:	8d 45 fa             	lea    -0x6(%ebp),%eax
80107aaf:	0f 01 18             	lidtl  (%eax)
}
80107ab2:	90                   	nop
80107ab3:	c9                   	leave  
80107ab4:	c3                   	ret    

80107ab5 <rcr2>:

static inline uint
rcr2(void)
{
80107ab5:	55                   	push   %ebp
80107ab6:	89 e5                	mov    %esp,%ebp
80107ab8:	83 ec 10             	sub    $0x10,%esp
  uint val;
  __asm__ volatile("movl %%cr2,%0" : "=r" (val));
80107abb:	0f 20 d0             	mov    %cr2,%eax
80107abe:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return val;
80107ac1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
80107ac4:	c9                   	leave  
80107ac5:	c3                   	ret    

80107ac6 <tvinit>:
struct gatedesc idt[256];
extern uint vectors[];  // in vectors.S: array of 256 entry pointers
struct spinlock tickslock;
uint ticks;

void tvinit(void) {
80107ac6:	55                   	push   %ebp
80107ac7:	89 e5                	mov    %esp,%ebp
80107ac9:	83 ec 18             	sub    $0x18,%esp
    int i;

    for (i = 0; i < 256; i++) SETGATE(idt[i], 0, SEG_KCODE << 3, vectors[i], 0);
80107acc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80107ad3:	e9 c3 00 00 00       	jmp    80107b9b <tvinit+0xd5>
80107ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107adb:	8b 04 85 00 a0 10 80 	mov    -0x7fef6000(,%eax,4),%eax
80107ae2:	89 c2                	mov    %eax,%edx
80107ae4:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107ae7:	66 89 14 c5 c0 59 11 	mov    %dx,-0x7feea640(,%eax,8)
80107aee:	80 
80107aef:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107af2:	66 c7 04 c5 c2 59 11 	movw   $0x8,-0x7feea63e(,%eax,8)
80107af9:	80 08 00 
80107afc:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107aff:	0f b6 14 c5 c4 59 11 	movzbl -0x7feea63c(,%eax,8),%edx
80107b06:	80 
80107b07:	83 e2 e0             	and    $0xffffffe0,%edx
80107b0a:	88 14 c5 c4 59 11 80 	mov    %dl,-0x7feea63c(,%eax,8)
80107b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b14:	0f b6 14 c5 c4 59 11 	movzbl -0x7feea63c(,%eax,8),%edx
80107b1b:	80 
80107b1c:	83 e2 1f             	and    $0x1f,%edx
80107b1f:	88 14 c5 c4 59 11 80 	mov    %dl,-0x7feea63c(,%eax,8)
80107b26:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b29:	0f b6 14 c5 c5 59 11 	movzbl -0x7feea63b(,%eax,8),%edx
80107b30:	80 
80107b31:	83 e2 f0             	and    $0xfffffff0,%edx
80107b34:	83 ca 0e             	or     $0xe,%edx
80107b37:	88 14 c5 c5 59 11 80 	mov    %dl,-0x7feea63b(,%eax,8)
80107b3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b41:	0f b6 14 c5 c5 59 11 	movzbl -0x7feea63b(,%eax,8),%edx
80107b48:	80 
80107b49:	83 e2 ef             	and    $0xffffffef,%edx
80107b4c:	88 14 c5 c5 59 11 80 	mov    %dl,-0x7feea63b(,%eax,8)
80107b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b56:	0f b6 14 c5 c5 59 11 	movzbl -0x7feea63b(,%eax,8),%edx
80107b5d:	80 
80107b5e:	83 e2 9f             	and    $0xffffff9f,%edx
80107b61:	88 14 c5 c5 59 11 80 	mov    %dl,-0x7feea63b(,%eax,8)
80107b68:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b6b:	0f b6 14 c5 c5 59 11 	movzbl -0x7feea63b(,%eax,8),%edx
80107b72:	80 
80107b73:	83 ca 80             	or     $0xffffff80,%edx
80107b76:	88 14 c5 c5 59 11 80 	mov    %dl,-0x7feea63b(,%eax,8)
80107b7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b80:	8b 04 85 00 a0 10 80 	mov    -0x7fef6000(,%eax,4),%eax
80107b87:	c1 e8 10             	shr    $0x10,%eax
80107b8a:	89 c2                	mov    %eax,%edx
80107b8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107b8f:	66 89 14 c5 c6 59 11 	mov    %dx,-0x7feea63a(,%eax,8)
80107b96:	80 
80107b97:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80107b9b:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
80107ba2:	0f 8e 30 ff ff ff    	jle    80107ad8 <tvinit+0x12>
    SETGATE(idt[T_SYSCALL], 1, SEG_KCODE << 3, vectors[T_SYSCALL], DPL_USER);
80107ba8:	a1 00 a1 10 80       	mov    0x8010a100,%eax
80107bad:	66 a3 c0 5b 11 80    	mov    %ax,0x80115bc0
80107bb3:	66 c7 05 c2 5b 11 80 	movw   $0x8,0x80115bc2
80107bba:	08 00 
80107bbc:	0f b6 05 c4 5b 11 80 	movzbl 0x80115bc4,%eax
80107bc3:	83 e0 e0             	and    $0xffffffe0,%eax
80107bc6:	a2 c4 5b 11 80       	mov    %al,0x80115bc4
80107bcb:	0f b6 05 c4 5b 11 80 	movzbl 0x80115bc4,%eax
80107bd2:	83 e0 1f             	and    $0x1f,%eax
80107bd5:	a2 c4 5b 11 80       	mov    %al,0x80115bc4
80107bda:	0f b6 05 c5 5b 11 80 	movzbl 0x80115bc5,%eax
80107be1:	83 c8 0f             	or     $0xf,%eax
80107be4:	a2 c5 5b 11 80       	mov    %al,0x80115bc5
80107be9:	0f b6 05 c5 5b 11 80 	movzbl 0x80115bc5,%eax
80107bf0:	83 e0 ef             	and    $0xffffffef,%eax
80107bf3:	a2 c5 5b 11 80       	mov    %al,0x80115bc5
80107bf8:	0f b6 05 c5 5b 11 80 	movzbl 0x80115bc5,%eax
80107bff:	83 c8 60             	or     $0x60,%eax
80107c02:	a2 c5 5b 11 80       	mov    %al,0x80115bc5
80107c07:	0f b6 05 c5 5b 11 80 	movzbl 0x80115bc5,%eax
80107c0e:	83 c8 80             	or     $0xffffff80,%eax
80107c11:	a2 c5 5b 11 80       	mov    %al,0x80115bc5
80107c16:	a1 00 a1 10 80       	mov    0x8010a100,%eax
80107c1b:	c1 e8 10             	shr    $0x10,%eax
80107c1e:	66 a3 c6 5b 11 80    	mov    %ax,0x80115bc6

    initlock(&tickslock, "time");
80107c24:	83 ec 08             	sub    $0x8,%esp
80107c27:	68 8c 92 10 80       	push   $0x8010928c
80107c2c:	68 c0 61 11 80       	push   $0x801161c0
80107c31:	e8 7b e5 ff ff       	call   801061b1 <initlock>
80107c36:	83 c4 10             	add    $0x10,%esp
}
80107c39:	90                   	nop
80107c3a:	c9                   	leave  
80107c3b:	c3                   	ret    

80107c3c <idtinit>:

void idtinit(void) { lidt(idt, sizeof(idt)); }
80107c3c:	55                   	push   %ebp
80107c3d:	89 e5                	mov    %esp,%ebp
80107c3f:	68 00 08 00 00       	push   $0x800
80107c44:	68 c0 59 11 80       	push   $0x801159c0
80107c49:	e8 3d fe ff ff       	call   80107a8b <lidt>
80107c4e:	83 c4 08             	add    $0x8,%esp
80107c51:	90                   	nop
80107c52:	c9                   	leave  
80107c53:	c3                   	ret    

80107c54 <trap>:

//PAGEBREAK: 41
void trap(struct trapframe* tf) {
80107c54:	55                   	push   %ebp
80107c55:	89 e5                	mov    %esp,%ebp
80107c57:	57                   	push   %edi
80107c58:	56                   	push   %esi
80107c59:	53                   	push   %ebx
80107c5a:	83 ec 1c             	sub    $0x1c,%esp
    if (tf->trapno == T_SYSCALL) {
80107c5d:	8b 45 08             	mov    0x8(%ebp),%eax
80107c60:	8b 40 30             	mov    0x30(%eax),%eax
80107c63:	83 f8 40             	cmp    $0x40,%eax
80107c66:	75 3b                	jne    80107ca3 <trap+0x4f>
        if (myproc()->killed) exit();
80107c68:	e8 24 d8 ff ff       	call   80105491 <myproc>
80107c6d:	8b 40 24             	mov    0x24(%eax),%eax
80107c70:	85 c0                	test   %eax,%eax
80107c72:	74 05                	je     80107c79 <trap+0x25>
80107c74:	e8 a6 dc ff ff       	call   8010591f <exit>
        myproc()->tf = tf;
80107c79:	e8 13 d8 ff ff       	call   80105491 <myproc>
80107c7e:	8b 55 08             	mov    0x8(%ebp),%edx
80107c81:	89 50 18             	mov    %edx,0x18(%eax)
        syscall();
80107c84:	e8 d0 eb ff ff       	call   80106859 <syscall>
        if (myproc()->killed) exit();
80107c89:	e8 03 d8 ff ff       	call   80105491 <myproc>
80107c8e:	8b 40 24             	mov    0x24(%eax),%eax
80107c91:	85 c0                	test   %eax,%eax
80107c93:	0f 84 06 02 00 00    	je     80107e9f <trap+0x24b>
80107c99:	e8 81 dc ff ff       	call   8010591f <exit>
        return;
80107c9e:	e9 fc 01 00 00       	jmp    80107e9f <trap+0x24b>
    }

    switch (tf->trapno) {
80107ca3:	8b 45 08             	mov    0x8(%ebp),%eax
80107ca6:	8b 40 30             	mov    0x30(%eax),%eax
80107ca9:	83 e8 20             	sub    $0x20,%eax
80107cac:	83 f8 1f             	cmp    $0x1f,%eax
80107caf:	0f 87 b5 00 00 00    	ja     80107d6a <trap+0x116>
80107cb5:	8b 04 85 34 93 10 80 	mov    -0x7fef6ccc(,%eax,4),%eax
80107cbc:	ff e0                	jmp    *%eax
        case T_IRQ0 + IRQ_TIMER:
            if (cpuid() == 0) {
80107cbe:	e8 3b d7 ff ff       	call   801053fe <cpuid>
80107cc3:	85 c0                	test   %eax,%eax
80107cc5:	75 3d                	jne    80107d04 <trap+0xb0>
                acquire(&tickslock);
80107cc7:	83 ec 0c             	sub    $0xc,%esp
80107cca:	68 c0 61 11 80       	push   $0x801161c0
80107ccf:	e8 0e e5 ff ff       	call   801061e2 <acquire>
80107cd4:	83 c4 10             	add    $0x10,%esp
                ticks++;
80107cd7:	a1 f4 61 11 80       	mov    0x801161f4,%eax
80107cdc:	83 c0 01             	add    $0x1,%eax
80107cdf:	a3 f4 61 11 80       	mov    %eax,0x801161f4
                wakeup(&ticks);
80107ce4:	83 ec 0c             	sub    $0xc,%esp
80107ce7:	68 f4 61 11 80       	push   $0x801161f4
80107cec:	e8 54 e1 ff ff       	call   80105e45 <wakeup>
80107cf1:	83 c4 10             	add    $0x10,%esp
                release(&tickslock);
80107cf4:	83 ec 0c             	sub    $0xc,%esp
80107cf7:	68 c0 61 11 80       	push   $0x801161c0
80107cfc:	e8 54 e5 ff ff       	call   80106255 <release>
80107d01:	83 c4 10             	add    $0x10,%esp
            }
            lapiceoi();
80107d04:	e8 07 c5 ff ff       	call   80104210 <lapiceoi>
            break;
80107d09:	e9 11 01 00 00       	jmp    80107e1f <trap+0x1cb>
        case T_IRQ0 + IRQ_IDE:
            ideintr();
80107d0e:	e8 d1 bc ff ff       	call   801039e4 <ideintr>
            lapiceoi();
80107d13:	e8 f8 c4 ff ff       	call   80104210 <lapiceoi>
            break;
80107d18:	e9 02 01 00 00       	jmp    80107e1f <trap+0x1cb>
        case T_IRQ0 + IRQ_IDE + 1:
            // Bochs generates spurious IDE1 interrupts.
            break;
        case T_IRQ0 + IRQ_KBD:
            kbdintr();
80107d1d:	e8 93 c2 ff ff       	call   80103fb5 <kbdintr>
            lapiceoi();
80107d22:	e8 e9 c4 ff ff       	call   80104210 <lapiceoi>
            break;
80107d27:	e9 f3 00 00 00       	jmp    80107e1f <trap+0x1cb>
        case T_IRQ0 + IRQ_COM1:
            uartintr();
80107d2c:	e8 44 03 00 00       	call   80108075 <uartintr>
            lapiceoi();
80107d31:	e8 da c4 ff ff       	call   80104210 <lapiceoi>
            break;
80107d36:	e9 e4 00 00 00       	jmp    80107e1f <trap+0x1cb>
        case T_IRQ0 + 7:
        case T_IRQ0 + IRQ_SPURIOUS:
            cprintf("cpu%d: spurious interrupt at %x:%x\n", cpuid(), tf->cs,
80107d3b:	8b 45 08             	mov    0x8(%ebp),%eax
80107d3e:	8b 70 38             	mov    0x38(%eax),%esi
80107d41:	8b 45 08             	mov    0x8(%ebp),%eax
80107d44:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
80107d48:	0f b7 d8             	movzwl %ax,%ebx
80107d4b:	e8 ae d6 ff ff       	call   801053fe <cpuid>
80107d50:	56                   	push   %esi
80107d51:	53                   	push   %ebx
80107d52:	50                   	push   %eax
80107d53:	68 94 92 10 80       	push   $0x80109294
80107d58:	e8 d1 91 ff ff       	call   80100f2e <cprintf>
80107d5d:	83 c4 10             	add    $0x10,%esp
                    tf->eip);
            lapiceoi();
80107d60:	e8 ab c4 ff ff       	call   80104210 <lapiceoi>
            break;
80107d65:	e9 b5 00 00 00       	jmp    80107e1f <trap+0x1cb>

        //PAGEBREAK: 13
        default:
            if (myproc() == 0 || (tf->cs & 3) == 0) {
80107d6a:	e8 22 d7 ff ff       	call   80105491 <myproc>
80107d6f:	85 c0                	test   %eax,%eax
80107d71:	74 11                	je     80107d84 <trap+0x130>
80107d73:	8b 45 08             	mov    0x8(%ebp),%eax
80107d76:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
80107d7a:	0f b7 c0             	movzwl %ax,%eax
80107d7d:	83 e0 03             	and    $0x3,%eax
80107d80:	85 c0                	test   %eax,%eax
80107d82:	75 39                	jne    80107dbd <trap+0x169>
                // In kernel, it must be our mistake.
                cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
80107d84:	e8 2c fd ff ff       	call   80107ab5 <rcr2>
80107d89:	89 c3                	mov    %eax,%ebx
80107d8b:	8b 45 08             	mov    0x8(%ebp),%eax
80107d8e:	8b 70 38             	mov    0x38(%eax),%esi
80107d91:	e8 68 d6 ff ff       	call   801053fe <cpuid>
80107d96:	8b 55 08             	mov    0x8(%ebp),%edx
80107d99:	8b 52 30             	mov    0x30(%edx),%edx
80107d9c:	83 ec 0c             	sub    $0xc,%esp
80107d9f:	53                   	push   %ebx
80107da0:	56                   	push   %esi
80107da1:	50                   	push   %eax
80107da2:	52                   	push   %edx
80107da3:	68 b8 92 10 80       	push   $0x801092b8
80107da8:	e8 81 91 ff ff       	call   80100f2e <cprintf>
80107dad:	83 c4 20             	add    $0x20,%esp
                        tf->trapno, cpuid(), tf->eip, rcr2());
                panic("trap");
80107db0:	83 ec 0c             	sub    $0xc,%esp
80107db3:	68 ea 92 10 80       	push   $0x801092ea
80107db8:	e8 26 93 ff ff       	call   801010e3 <panic>
            }
            // In user space, assume process misbehaved.
            cprintf(
80107dbd:	e8 f3 fc ff ff       	call   80107ab5 <rcr2>
80107dc2:	89 c6                	mov    %eax,%esi
80107dc4:	8b 45 08             	mov    0x8(%ebp),%eax
80107dc7:	8b 40 38             	mov    0x38(%eax),%eax
80107dca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80107dcd:	e8 2c d6 ff ff       	call   801053fe <cpuid>
80107dd2:	89 c3                	mov    %eax,%ebx
80107dd4:	8b 45 08             	mov    0x8(%ebp),%eax
80107dd7:	8b 48 34             	mov    0x34(%eax),%ecx
80107dda:	89 4d e0             	mov    %ecx,-0x20(%ebp)
80107ddd:	8b 45 08             	mov    0x8(%ebp),%eax
80107de0:	8b 78 30             	mov    0x30(%eax),%edi
                "pid %d %s: trap %d err %d on cpu %d "
                "eip 0x%x addr 0x%x--kill proc\n",
                myproc()->pid, myproc()->name, tf->trapno, tf->err, cpuid(),
80107de3:	e8 a9 d6 ff ff       	call   80105491 <myproc>
80107de8:	8d 50 6c             	lea    0x6c(%eax),%edx
80107deb:	89 55 dc             	mov    %edx,-0x24(%ebp)
80107dee:	e8 9e d6 ff ff       	call   80105491 <myproc>
            cprintf(
80107df3:	8b 40 10             	mov    0x10(%eax),%eax
80107df6:	56                   	push   %esi
80107df7:	ff 75 e4             	push   -0x1c(%ebp)
80107dfa:	53                   	push   %ebx
80107dfb:	ff 75 e0             	push   -0x20(%ebp)
80107dfe:	57                   	push   %edi
80107dff:	ff 75 dc             	push   -0x24(%ebp)
80107e02:	50                   	push   %eax
80107e03:	68 f0 92 10 80       	push   $0x801092f0
80107e08:	e8 21 91 ff ff       	call   80100f2e <cprintf>
80107e0d:	83 c4 20             	add    $0x20,%esp
                tf->eip, rcr2());
            myproc()->killed = 1;
80107e10:	e8 7c d6 ff ff       	call   80105491 <myproc>
80107e15:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
80107e1c:	eb 01                	jmp    80107e1f <trap+0x1cb>
            break;
80107e1e:	90                   	nop
    }

    // Force process exit if it has been killed and is in user space.
    // (If it is still executing in the kernel, let it keep running
    // until it gets to the regular system call return.)
    if (myproc() && myproc()->killed && (tf->cs & 3) == DPL_USER) exit();
80107e1f:	e8 6d d6 ff ff       	call   80105491 <myproc>
80107e24:	85 c0                	test   %eax,%eax
80107e26:	74 23                	je     80107e4b <trap+0x1f7>
80107e28:	e8 64 d6 ff ff       	call   80105491 <myproc>
80107e2d:	8b 40 24             	mov    0x24(%eax),%eax
80107e30:	85 c0                	test   %eax,%eax
80107e32:	74 17                	je     80107e4b <trap+0x1f7>
80107e34:	8b 45 08             	mov    0x8(%ebp),%eax
80107e37:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
80107e3b:	0f b7 c0             	movzwl %ax,%eax
80107e3e:	83 e0 03             	and    $0x3,%eax
80107e41:	83 f8 03             	cmp    $0x3,%eax
80107e44:	75 05                	jne    80107e4b <trap+0x1f7>
80107e46:	e8 d4 da ff ff       	call   8010591f <exit>

    // Force process to give up CPU on clock tick.
    // If interrupts were on while locks held, would need to check nlock.
    if (myproc() && myproc()->state == RUNNING &&
80107e4b:	e8 41 d6 ff ff       	call   80105491 <myproc>
80107e50:	85 c0                	test   %eax,%eax
80107e52:	74 1d                	je     80107e71 <trap+0x21d>
80107e54:	e8 38 d6 ff ff       	call   80105491 <myproc>
80107e59:	8b 40 0c             	mov    0xc(%eax),%eax
80107e5c:	83 f8 04             	cmp    $0x4,%eax
80107e5f:	75 10                	jne    80107e71 <trap+0x21d>
        tf->trapno == T_IRQ0 + IRQ_TIMER)
80107e61:	8b 45 08             	mov    0x8(%ebp),%eax
80107e64:	8b 40 30             	mov    0x30(%eax),%eax
    if (myproc() && myproc()->state == RUNNING &&
80107e67:	83 f8 20             	cmp    $0x20,%eax
80107e6a:	75 05                	jne    80107e71 <trap+0x21d>
        yield();
80107e6c:	e8 6d de ff ff       	call   80105cde <yield>

    // Check if the process has been killed since we yielded
    if (myproc() && myproc()->killed && (tf->cs & 3) == DPL_USER) exit();
80107e71:	e8 1b d6 ff ff       	call   80105491 <myproc>
80107e76:	85 c0                	test   %eax,%eax
80107e78:	74 26                	je     80107ea0 <trap+0x24c>
80107e7a:	e8 12 d6 ff ff       	call   80105491 <myproc>
80107e7f:	8b 40 24             	mov    0x24(%eax),%eax
80107e82:	85 c0                	test   %eax,%eax
80107e84:	74 1a                	je     80107ea0 <trap+0x24c>
80107e86:	8b 45 08             	mov    0x8(%ebp),%eax
80107e89:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
80107e8d:	0f b7 c0             	movzwl %ax,%eax
80107e90:	83 e0 03             	and    $0x3,%eax
80107e93:	83 f8 03             	cmp    $0x3,%eax
80107e96:	75 08                	jne    80107ea0 <trap+0x24c>
80107e98:	e8 82 da ff ff       	call   8010591f <exit>
80107e9d:	eb 01                	jmp    80107ea0 <trap+0x24c>
        return;
80107e9f:	90                   	nop
}
80107ea0:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107ea3:	5b                   	pop    %ebx
80107ea4:	5e                   	pop    %esi
80107ea5:	5f                   	pop    %edi
80107ea6:	5d                   	pop    %ebp
80107ea7:	c3                   	ret    

80107ea8 <inb>:
{
80107ea8:	55                   	push   %ebp
80107ea9:	89 e5                	mov    %esp,%ebp
80107eab:	83 ec 14             	sub    $0x14,%esp
80107eae:	8b 45 08             	mov    0x8(%ebp),%eax
80107eb1:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
  __asm__ volatile("in %1,%0" : "=a" (data) : "d" (port));
80107eb5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
80107eb9:	89 c2                	mov    %eax,%edx
80107ebb:	ec                   	in     (%dx),%al
80107ebc:	88 45 ff             	mov    %al,-0x1(%ebp)
  return data;
80107ebf:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
80107ec3:	c9                   	leave  
80107ec4:	c3                   	ret    

80107ec5 <outb>:
{
80107ec5:	55                   	push   %ebp
80107ec6:	89 e5                	mov    %esp,%ebp
80107ec8:	83 ec 08             	sub    $0x8,%esp
80107ecb:	8b 45 08             	mov    0x8(%ebp),%eax
80107ece:	8b 55 0c             	mov    0xc(%ebp),%edx
80107ed1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
80107ed5:	89 d0                	mov    %edx,%eax
80107ed7:	88 45 f8             	mov    %al,-0x8(%ebp)
  __asm__ volatile("out %0,%1" : : "a" (data), "d" (port));
80107eda:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
80107ede:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
80107ee2:	ee                   	out    %al,(%dx)
}
80107ee3:	90                   	nop
80107ee4:	c9                   	leave  
80107ee5:	c3                   	ret    

80107ee6 <uartinit>:

#define COM1 0x3f8

static int uart;  // is there a uart?

void uartinit(void) {
80107ee6:	55                   	push   %ebp
80107ee7:	89 e5                	mov    %esp,%ebp
80107ee9:	83 ec 18             	sub    $0x18,%esp
    char* p;

    // Turn off the FIFO
    outb(COM1 + 2, 0);
80107eec:	6a 00                	push   $0x0
80107eee:	68 fa 03 00 00       	push   $0x3fa
80107ef3:	e8 cd ff ff ff       	call   80107ec5 <outb>
80107ef8:	83 c4 08             	add    $0x8,%esp

    // 9600 baud, 8 data bits, 1 stop bit, parity off.
    outb(COM1 + 3, 0x80);  // Unlock divisor
80107efb:	68 80 00 00 00       	push   $0x80
80107f00:	68 fb 03 00 00       	push   $0x3fb
80107f05:	e8 bb ff ff ff       	call   80107ec5 <outb>
80107f0a:	83 c4 08             	add    $0x8,%esp
    outb(COM1 + 0, 115200 / 9600);
80107f0d:	6a 0c                	push   $0xc
80107f0f:	68 f8 03 00 00       	push   $0x3f8
80107f14:	e8 ac ff ff ff       	call   80107ec5 <outb>
80107f19:	83 c4 08             	add    $0x8,%esp
    outb(COM1 + 1, 0);
80107f1c:	6a 00                	push   $0x0
80107f1e:	68 f9 03 00 00       	push   $0x3f9
80107f23:	e8 9d ff ff ff       	call   80107ec5 <outb>
80107f28:	83 c4 08             	add    $0x8,%esp
    outb(COM1 + 3, 0x03);  // Lock divisor, 8 data bits.
80107f2b:	6a 03                	push   $0x3
80107f2d:	68 fb 03 00 00       	push   $0x3fb
80107f32:	e8 8e ff ff ff       	call   80107ec5 <outb>
80107f37:	83 c4 08             	add    $0x8,%esp
    outb(COM1 + 4, 0);
80107f3a:	6a 00                	push   $0x0
80107f3c:	68 fc 03 00 00       	push   $0x3fc
80107f41:	e8 7f ff ff ff       	call   80107ec5 <outb>
80107f46:	83 c4 08             	add    $0x8,%esp
    outb(COM1 + 1, 0x01);  // Enable receive interrupts.
80107f49:	6a 01                	push   $0x1
80107f4b:	68 f9 03 00 00       	push   $0x3f9
80107f50:	e8 70 ff ff ff       	call   80107ec5 <outb>
80107f55:	83 c4 08             	add    $0x8,%esp

    // If status is 0xFF, no serial port.
    if (inb(COM1 + 5) == 0xFF) return;
80107f58:	68 fd 03 00 00       	push   $0x3fd
80107f5d:	e8 46 ff ff ff       	call   80107ea8 <inb>
80107f62:	83 c4 04             	add    $0x4,%esp
80107f65:	3c ff                	cmp    $0xff,%al
80107f67:	74 61                	je     80107fca <uartinit+0xe4>
    uart = 1;
80107f69:	c7 05 f8 61 11 80 01 	movl   $0x1,0x801161f8
80107f70:	00 00 00 

    // Acknowledge pre-existing interrupt conditions;
    // enable interrupts.
    inb(COM1 + 2);
80107f73:	68 fa 03 00 00       	push   $0x3fa
80107f78:	e8 2b ff ff ff       	call   80107ea8 <inb>
80107f7d:	83 c4 04             	add    $0x4,%esp
    inb(COM1 + 0);
80107f80:	68 f8 03 00 00       	push   $0x3f8
80107f85:	e8 1e ff ff ff       	call   80107ea8 <inb>
80107f8a:	83 c4 04             	add    $0x4,%esp
    ioapicenable(IRQ_COM1, 0);
80107f8d:	83 ec 08             	sub    $0x8,%esp
80107f90:	6a 00                	push   $0x0
80107f92:	6a 04                	push   $0x4
80107f94:	e8 e9 bc ff ff       	call   80103c82 <ioapicenable>
80107f99:	83 c4 10             	add    $0x10,%esp

    // Announce that we're here.
    for (p = "xv6...\n"; *p; p++) uartputc(*p);
80107f9c:	c7 45 f4 b4 93 10 80 	movl   $0x801093b4,-0xc(%ebp)
80107fa3:	eb 19                	jmp    80107fbe <uartinit+0xd8>
80107fa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107fa8:	0f b6 00             	movzbl (%eax),%eax
80107fab:	0f be c0             	movsbl %al,%eax
80107fae:	83 ec 0c             	sub    $0xc,%esp
80107fb1:	50                   	push   %eax
80107fb2:	e8 16 00 00 00       	call   80107fcd <uartputc>
80107fb7:	83 c4 10             	add    $0x10,%esp
80107fba:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80107fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
80107fc1:	0f b6 00             	movzbl (%eax),%eax
80107fc4:	84 c0                	test   %al,%al
80107fc6:	75 dd                	jne    80107fa5 <uartinit+0xbf>
80107fc8:	eb 01                	jmp    80107fcb <uartinit+0xe5>
    if (inb(COM1 + 5) == 0xFF) return;
80107fca:	90                   	nop
}
80107fcb:	c9                   	leave  
80107fcc:	c3                   	ret    

80107fcd <uartputc>:

void uartputc(int c) {
80107fcd:	55                   	push   %ebp
80107fce:	89 e5                	mov    %esp,%ebp
80107fd0:	83 ec 18             	sub    $0x18,%esp
    int i;

    if (!uart) return;
80107fd3:	a1 f8 61 11 80       	mov    0x801161f8,%eax
80107fd8:	85 c0                	test   %eax,%eax
80107fda:	74 53                	je     8010802f <uartputc+0x62>
    for (i = 0; i < 128 && !(inb(COM1 + 5) & 0x20); i++) microdelay(10);
80107fdc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80107fe3:	eb 11                	jmp    80107ff6 <uartputc+0x29>
80107fe5:	83 ec 0c             	sub    $0xc,%esp
80107fe8:	6a 0a                	push   $0xa
80107fea:	e8 3c c2 ff ff       	call   8010422b <microdelay>
80107fef:	83 c4 10             	add    $0x10,%esp
80107ff2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80107ff6:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
80107ffa:	7f 1a                	jg     80108016 <uartputc+0x49>
80107ffc:	83 ec 0c             	sub    $0xc,%esp
80107fff:	68 fd 03 00 00       	push   $0x3fd
80108004:	e8 9f fe ff ff       	call   80107ea8 <inb>
80108009:	83 c4 10             	add    $0x10,%esp
8010800c:	0f b6 c0             	movzbl %al,%eax
8010800f:	83 e0 20             	and    $0x20,%eax
80108012:	85 c0                	test   %eax,%eax
80108014:	74 cf                	je     80107fe5 <uartputc+0x18>
    outb(COM1 + 0, c);
80108016:	8b 45 08             	mov    0x8(%ebp),%eax
80108019:	0f b6 c0             	movzbl %al,%eax
8010801c:	83 ec 08             	sub    $0x8,%esp
8010801f:	50                   	push   %eax
80108020:	68 f8 03 00 00       	push   $0x3f8
80108025:	e8 9b fe ff ff       	call   80107ec5 <outb>
8010802a:	83 c4 10             	add    $0x10,%esp
8010802d:	eb 01                	jmp    80108030 <uartputc+0x63>
    if (!uart) return;
8010802f:	90                   	nop
}
80108030:	c9                   	leave  
80108031:	c3                   	ret    

80108032 <uartgetc>:

static int uartgetc(void) {
80108032:	55                   	push   %ebp
80108033:	89 e5                	mov    %esp,%ebp
    if (!uart) return -1;
80108035:	a1 f8 61 11 80       	mov    0x801161f8,%eax
8010803a:	85 c0                	test   %eax,%eax
8010803c:	75 07                	jne    80108045 <uartgetc+0x13>
8010803e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80108043:	eb 2e                	jmp    80108073 <uartgetc+0x41>
    if (!(inb(COM1 + 5) & 0x01)) return -1;
80108045:	68 fd 03 00 00       	push   $0x3fd
8010804a:	e8 59 fe ff ff       	call   80107ea8 <inb>
8010804f:	83 c4 04             	add    $0x4,%esp
80108052:	0f b6 c0             	movzbl %al,%eax
80108055:	83 e0 01             	and    $0x1,%eax
80108058:	85 c0                	test   %eax,%eax
8010805a:	75 07                	jne    80108063 <uartgetc+0x31>
8010805c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80108061:	eb 10                	jmp    80108073 <uartgetc+0x41>
    return inb(COM1 + 0);
80108063:	68 f8 03 00 00       	push   $0x3f8
80108068:	e8 3b fe ff ff       	call   80107ea8 <inb>
8010806d:	83 c4 04             	add    $0x4,%esp
80108070:	0f b6 c0             	movzbl %al,%eax
}
80108073:	c9                   	leave  
80108074:	c3                   	ret    

80108075 <uartintr>:

void uartintr(void) { consoleintr(uartgetc); }
80108075:	55                   	push   %ebp
80108076:	89 e5                	mov    %esp,%ebp
80108078:	83 ec 08             	sub    $0x8,%esp
8010807b:	83 ec 0c             	sub    $0xc,%esp
8010807e:	68 32 80 10 80       	push   $0x80108032
80108083:	e8 f5 92 ff ff       	call   8010137d <consoleintr>
80108088:	83 c4 10             	add    $0x10,%esp
8010808b:	90                   	nop
8010808c:	c9                   	leave  
8010808d:	c3                   	ret    

8010808e <lgdt>:
{
8010808e:	55                   	push   %ebp
8010808f:	89 e5                	mov    %esp,%ebp
80108091:	83 ec 10             	sub    $0x10,%esp
  pd[0] = size-1;
80108094:	8b 45 0c             	mov    0xc(%ebp),%eax
80108097:	83 e8 01             	sub    $0x1,%eax
8010809a:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
  pd[1] = (uint)p;
8010809e:	8b 45 08             	mov    0x8(%ebp),%eax
801080a1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  pd[2] = (uint)p >> 16;
801080a5:	8b 45 08             	mov    0x8(%ebp),%eax
801080a8:	c1 e8 10             	shr    $0x10,%eax
801080ab:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
  __asm__ volatile("lgdt (%0)" : : "r" (pd));
801080af:	8d 45 fa             	lea    -0x6(%ebp),%eax
801080b2:	0f 01 10             	lgdtl  (%eax)
}
801080b5:	90                   	nop
801080b6:	c9                   	leave  
801080b7:	c3                   	ret    

801080b8 <ltr>:
{
801080b8:	55                   	push   %ebp
801080b9:	89 e5                	mov    %esp,%ebp
801080bb:	83 ec 04             	sub    $0x4,%esp
801080be:	8b 45 08             	mov    0x8(%ebp),%eax
801080c1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
  __asm__ volatile("ltr %0" : : "r" (sel));
801080c5:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
801080c9:	0f 00 d8             	ltr    %ax
}
801080cc:	90                   	nop
801080cd:	c9                   	leave  
801080ce:	c3                   	ret    

801080cf <lcr3>:

static inline void
lcr3(uint val)
{
801080cf:	55                   	push   %ebp
801080d0:	89 e5                	mov    %esp,%ebp
  __asm__ volatile("movl %0,%%cr3" : : "r" (val));
801080d2:	8b 45 08             	mov    0x8(%ebp),%eax
801080d5:	0f 22 d8             	mov    %eax,%cr3
}
801080d8:	90                   	nop
801080d9:	5d                   	pop    %ebp
801080da:	c3                   	ret    

801080db <seginit>:
extern char data[];  // defined by kernel.ld
pde_t* kpgdir;       // for use in scheduler()

// Set up CPU's kernel segment descriptors.
// Run once on entry on each CPU.
void seginit(void) {
801080db:	55                   	push   %ebp
801080dc:	89 e5                	mov    %esp,%ebp
801080de:	83 ec 18             	sub    $0x18,%esp

    // Map "logical" addresses to virtual addresses using identity map.
    // Cannot share a CODE descriptor for both kernel and user
    // because it would have to have DPL_USR, but the CPU forbids
    // an interrupt from CPL=0 to DPL=3.
    c = &cpus[cpuid()];
801080e1:	e8 18 d3 ff ff       	call   801053fe <cpuid>
801080e6:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
801080ec:	05 e0 33 11 80       	add    $0x801133e0,%eax
801080f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    c->gdt[SEG_KCODE] = SEG(STA_X | STA_R, 0, 0xffffffff, 0);
801080f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
801080f7:	66 c7 40 78 ff ff    	movw   $0xffff,0x78(%eax)
801080fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108100:	66 c7 40 7a 00 00    	movw   $0x0,0x7a(%eax)
80108106:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108109:	c6 40 7c 00          	movb   $0x0,0x7c(%eax)
8010810d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108110:	0f b6 50 7d          	movzbl 0x7d(%eax),%edx
80108114:	83 e2 f0             	and    $0xfffffff0,%edx
80108117:	83 ca 0a             	or     $0xa,%edx
8010811a:	88 50 7d             	mov    %dl,0x7d(%eax)
8010811d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108120:	0f b6 50 7d          	movzbl 0x7d(%eax),%edx
80108124:	83 ca 10             	or     $0x10,%edx
80108127:	88 50 7d             	mov    %dl,0x7d(%eax)
8010812a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010812d:	0f b6 50 7d          	movzbl 0x7d(%eax),%edx
80108131:	83 e2 9f             	and    $0xffffff9f,%edx
80108134:	88 50 7d             	mov    %dl,0x7d(%eax)
80108137:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010813a:	0f b6 50 7d          	movzbl 0x7d(%eax),%edx
8010813e:	83 ca 80             	or     $0xffffff80,%edx
80108141:	88 50 7d             	mov    %dl,0x7d(%eax)
80108144:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108147:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
8010814b:	83 ca 0f             	or     $0xf,%edx
8010814e:	88 50 7e             	mov    %dl,0x7e(%eax)
80108151:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108154:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
80108158:	83 e2 ef             	and    $0xffffffef,%edx
8010815b:	88 50 7e             	mov    %dl,0x7e(%eax)
8010815e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108161:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
80108165:	83 e2 df             	and    $0xffffffdf,%edx
80108168:	88 50 7e             	mov    %dl,0x7e(%eax)
8010816b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010816e:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
80108172:	83 ca 40             	or     $0x40,%edx
80108175:	88 50 7e             	mov    %dl,0x7e(%eax)
80108178:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010817b:	0f b6 50 7e          	movzbl 0x7e(%eax),%edx
8010817f:	83 ca 80             	or     $0xffffff80,%edx
80108182:	88 50 7e             	mov    %dl,0x7e(%eax)
80108185:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108188:	c6 40 7f 00          	movb   $0x0,0x7f(%eax)
    c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
8010818c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010818f:	66 c7 80 80 00 00 00 	movw   $0xffff,0x80(%eax)
80108196:	ff ff 
80108198:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010819b:	66 c7 80 82 00 00 00 	movw   $0x0,0x82(%eax)
801081a2:	00 00 
801081a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
801081a7:	c6 80 84 00 00 00 00 	movb   $0x0,0x84(%eax)
801081ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
801081b1:	0f b6 90 85 00 00 00 	movzbl 0x85(%eax),%edx
801081b8:	83 e2 f0             	and    $0xfffffff0,%edx
801081bb:	83 ca 02             	or     $0x2,%edx
801081be:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
801081c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
801081c7:	0f b6 90 85 00 00 00 	movzbl 0x85(%eax),%edx
801081ce:	83 ca 10             	or     $0x10,%edx
801081d1:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
801081d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
801081da:	0f b6 90 85 00 00 00 	movzbl 0x85(%eax),%edx
801081e1:	83 e2 9f             	and    $0xffffff9f,%edx
801081e4:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
801081ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
801081ed:	0f b6 90 85 00 00 00 	movzbl 0x85(%eax),%edx
801081f4:	83 ca 80             	or     $0xffffff80,%edx
801081f7:	88 90 85 00 00 00    	mov    %dl,0x85(%eax)
801081fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108200:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
80108207:	83 ca 0f             	or     $0xf,%edx
8010820a:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
80108210:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108213:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
8010821a:	83 e2 ef             	and    $0xffffffef,%edx
8010821d:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
80108223:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108226:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
8010822d:	83 e2 df             	and    $0xffffffdf,%edx
80108230:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
80108236:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108239:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
80108240:	83 ca 40             	or     $0x40,%edx
80108243:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
80108249:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010824c:	0f b6 90 86 00 00 00 	movzbl 0x86(%eax),%edx
80108253:	83 ca 80             	or     $0xffffff80,%edx
80108256:	88 90 86 00 00 00    	mov    %dl,0x86(%eax)
8010825c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010825f:	c6 80 87 00 00 00 00 	movb   $0x0,0x87(%eax)
    c->gdt[SEG_UCODE] = SEG(STA_X | STA_R, 0, 0xffffffff, DPL_USER);
80108266:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108269:	66 c7 80 88 00 00 00 	movw   $0xffff,0x88(%eax)
80108270:	ff ff 
80108272:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108275:	66 c7 80 8a 00 00 00 	movw   $0x0,0x8a(%eax)
8010827c:	00 00 
8010827e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108281:	c6 80 8c 00 00 00 00 	movb   $0x0,0x8c(%eax)
80108288:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010828b:	0f b6 90 8d 00 00 00 	movzbl 0x8d(%eax),%edx
80108292:	83 e2 f0             	and    $0xfffffff0,%edx
80108295:	83 ca 0a             	or     $0xa,%edx
80108298:	88 90 8d 00 00 00    	mov    %dl,0x8d(%eax)
8010829e:	8b 45 f4             	mov    -0xc(%ebp),%eax
801082a1:	0f b6 90 8d 00 00 00 	movzbl 0x8d(%eax),%edx
801082a8:	83 ca 10             	or     $0x10,%edx
801082ab:	88 90 8d 00 00 00    	mov    %dl,0x8d(%eax)
801082b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
801082b4:	0f b6 90 8d 00 00 00 	movzbl 0x8d(%eax),%edx
801082bb:	83 ca 60             	or     $0x60,%edx
801082be:	88 90 8d 00 00 00    	mov    %dl,0x8d(%eax)
801082c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
801082c7:	0f b6 90 8d 00 00 00 	movzbl 0x8d(%eax),%edx
801082ce:	83 ca 80             	or     $0xffffff80,%edx
801082d1:	88 90 8d 00 00 00    	mov    %dl,0x8d(%eax)
801082d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
801082da:	0f b6 90 8e 00 00 00 	movzbl 0x8e(%eax),%edx
801082e1:	83 ca 0f             	or     $0xf,%edx
801082e4:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
801082ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
801082ed:	0f b6 90 8e 00 00 00 	movzbl 0x8e(%eax),%edx
801082f4:	83 e2 ef             	and    $0xffffffef,%edx
801082f7:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
801082fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108300:	0f b6 90 8e 00 00 00 	movzbl 0x8e(%eax),%edx
80108307:	83 e2 df             	and    $0xffffffdf,%edx
8010830a:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
80108310:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108313:	0f b6 90 8e 00 00 00 	movzbl 0x8e(%eax),%edx
8010831a:	83 ca 40             	or     $0x40,%edx
8010831d:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
80108323:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108326:	0f b6 90 8e 00 00 00 	movzbl 0x8e(%eax),%edx
8010832d:	83 ca 80             	or     $0xffffff80,%edx
80108330:	88 90 8e 00 00 00    	mov    %dl,0x8e(%eax)
80108336:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108339:	c6 80 8f 00 00 00 00 	movb   $0x0,0x8f(%eax)
    c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
80108340:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108343:	66 c7 80 90 00 00 00 	movw   $0xffff,0x90(%eax)
8010834a:	ff ff 
8010834c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010834f:	66 c7 80 92 00 00 00 	movw   $0x0,0x92(%eax)
80108356:	00 00 
80108358:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010835b:	c6 80 94 00 00 00 00 	movb   $0x0,0x94(%eax)
80108362:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108365:	0f b6 90 95 00 00 00 	movzbl 0x95(%eax),%edx
8010836c:	83 e2 f0             	and    $0xfffffff0,%edx
8010836f:	83 ca 02             	or     $0x2,%edx
80108372:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
80108378:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010837b:	0f b6 90 95 00 00 00 	movzbl 0x95(%eax),%edx
80108382:	83 ca 10             	or     $0x10,%edx
80108385:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
8010838b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010838e:	0f b6 90 95 00 00 00 	movzbl 0x95(%eax),%edx
80108395:	83 ca 60             	or     $0x60,%edx
80108398:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
8010839e:	8b 45 f4             	mov    -0xc(%ebp),%eax
801083a1:	0f b6 90 95 00 00 00 	movzbl 0x95(%eax),%edx
801083a8:	83 ca 80             	or     $0xffffff80,%edx
801083ab:	88 90 95 00 00 00    	mov    %dl,0x95(%eax)
801083b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
801083b4:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
801083bb:	83 ca 0f             	or     $0xf,%edx
801083be:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
801083c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
801083c7:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
801083ce:	83 e2 ef             	and    $0xffffffef,%edx
801083d1:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
801083d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
801083da:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
801083e1:	83 e2 df             	and    $0xffffffdf,%edx
801083e4:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
801083ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
801083ed:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
801083f4:	83 ca 40             	or     $0x40,%edx
801083f7:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
801083fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108400:	0f b6 90 96 00 00 00 	movzbl 0x96(%eax),%edx
80108407:	83 ca 80             	or     $0xffffff80,%edx
8010840a:	88 90 96 00 00 00    	mov    %dl,0x96(%eax)
80108410:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108413:	c6 80 97 00 00 00 00 	movb   $0x0,0x97(%eax)
    lgdt(c->gdt, sizeof(c->gdt));
8010841a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010841d:	83 c0 70             	add    $0x70,%eax
80108420:	83 ec 08             	sub    $0x8,%esp
80108423:	6a 30                	push   $0x30
80108425:	50                   	push   %eax
80108426:	e8 63 fc ff ff       	call   8010808e <lgdt>
8010842b:	83 c4 10             	add    $0x10,%esp
}
8010842e:	90                   	nop
8010842f:	c9                   	leave  
80108430:	c3                   	ret    

80108431 <walkpgdir>:

// Return the address of the PTE in page table pgdir
// that corresponds to virtual address va.  If alloc!=0,
// create any required page table pages.
static pte_t* walkpgdir(pde_t* pgdir, const void* va, int alloc) {
80108431:	55                   	push   %ebp
80108432:	89 e5                	mov    %esp,%ebp
80108434:	83 ec 18             	sub    $0x18,%esp
    pde_t* pde;
    pte_t* pgtab;

    pde = &pgdir[PDX(va)];
80108437:	8b 45 0c             	mov    0xc(%ebp),%eax
8010843a:	c1 e8 16             	shr    $0x16,%eax
8010843d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80108444:	8b 45 08             	mov    0x8(%ebp),%eax
80108447:	01 d0                	add    %edx,%eax
80108449:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (*pde & PTE_P) {
8010844c:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010844f:	8b 00                	mov    (%eax),%eax
80108451:	83 e0 01             	and    $0x1,%eax
80108454:	85 c0                	test   %eax,%eax
80108456:	74 14                	je     8010846c <walkpgdir+0x3b>
        pgtab = (pte_t*) P2V(PTE_ADDR(*pde));
80108458:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010845b:	8b 00                	mov    (%eax),%eax
8010845d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80108462:	05 00 00 00 80       	add    $0x80000000,%eax
80108467:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010846a:	eb 42                	jmp    801084ae <walkpgdir+0x7d>
    } else {
        if (!alloc || (pgtab = (pte_t*) kalloc()) == 0) return 0;
8010846c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
80108470:	74 0e                	je     80108480 <walkpgdir+0x4f>
80108472:	e8 7d b9 ff ff       	call   80103df4 <kalloc>
80108477:	89 45 f4             	mov    %eax,-0xc(%ebp)
8010847a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
8010847e:	75 07                	jne    80108487 <walkpgdir+0x56>
80108480:	b8 00 00 00 00       	mov    $0x0,%eax
80108485:	eb 3e                	jmp    801084c5 <walkpgdir+0x94>
        // Make sure all those PTE_P bits are zero.
        memset(pgtab, 0, PGSIZE);
80108487:	83 ec 04             	sub    $0x4,%esp
8010848a:	68 00 10 00 00       	push   $0x1000
8010848f:	6a 00                	push   $0x0
80108491:	ff 75 f4             	push   -0xc(%ebp)
80108494:	e8 de df ff ff       	call   80106477 <memset>
80108499:	83 c4 10             	add    $0x10,%esp
        // The permissions here are overly generous, but they can
        // be further restricted by the permissions in the page table
        // entries, if necessary.
        *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
8010849c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010849f:	05 00 00 00 80       	add    $0x80000000,%eax
801084a4:	83 c8 07             	or     $0x7,%eax
801084a7:	89 c2                	mov    %eax,%edx
801084a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
801084ac:	89 10                	mov    %edx,(%eax)
    }
    return &pgtab[PTX(va)];
801084ae:	8b 45 0c             	mov    0xc(%ebp),%eax
801084b1:	c1 e8 0c             	shr    $0xc,%eax
801084b4:	25 ff 03 00 00       	and    $0x3ff,%eax
801084b9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
801084c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
801084c3:	01 d0                	add    %edx,%eax
}
801084c5:	c9                   	leave  
801084c6:	c3                   	ret    

801084c7 <mappages>:

// Create PTEs for virtual addresses starting at va that refer to
// physical addresses starting at pa. va and size might not
// be page-aligned.
static int mappages(pde_t* pgdir, void* va, uint size, uint pa, int perm) {
801084c7:	55                   	push   %ebp
801084c8:	89 e5                	mov    %esp,%ebp
801084ca:	83 ec 18             	sub    $0x18,%esp
    char *a, *last;
    pte_t* pte;

    a = (char*) PGROUNDDOWN((uint) va);
801084cd:	8b 45 0c             	mov    0xc(%ebp),%eax
801084d0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
801084d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    last = (char*) PGROUNDDOWN(((uint) va) + size - 1);
801084d8:	8b 55 0c             	mov    0xc(%ebp),%edx
801084db:	8b 45 10             	mov    0x10(%ebp),%eax
801084de:	01 d0                	add    %edx,%eax
801084e0:	83 e8 01             	sub    $0x1,%eax
801084e3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
801084e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (;;) {
        if ((pte = walkpgdir(pgdir, a, 1)) == 0) return -1;
801084eb:	83 ec 04             	sub    $0x4,%esp
801084ee:	6a 01                	push   $0x1
801084f0:	ff 75 f4             	push   -0xc(%ebp)
801084f3:	ff 75 08             	push   0x8(%ebp)
801084f6:	e8 36 ff ff ff       	call   80108431 <walkpgdir>
801084fb:	83 c4 10             	add    $0x10,%esp
801084fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
80108501:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80108505:	75 07                	jne    8010850e <mappages+0x47>
80108507:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010850c:	eb 47                	jmp    80108555 <mappages+0x8e>
        if (*pte & PTE_P) panic("remap");
8010850e:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108511:	8b 00                	mov    (%eax),%eax
80108513:	83 e0 01             	and    $0x1,%eax
80108516:	85 c0                	test   %eax,%eax
80108518:	74 0d                	je     80108527 <mappages+0x60>
8010851a:	83 ec 0c             	sub    $0xc,%esp
8010851d:	68 bc 93 10 80       	push   $0x801093bc
80108522:	e8 bc 8b ff ff       	call   801010e3 <panic>
        *pte = pa | perm | PTE_P;
80108527:	8b 45 18             	mov    0x18(%ebp),%eax
8010852a:	0b 45 14             	or     0x14(%ebp),%eax
8010852d:	83 c8 01             	or     $0x1,%eax
80108530:	89 c2                	mov    %eax,%edx
80108532:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108535:	89 10                	mov    %edx,(%eax)
        if (a == last) break;
80108537:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010853a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
8010853d:	74 10                	je     8010854f <mappages+0x88>
        a += PGSIZE;
8010853f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
        pa += PGSIZE;
80108546:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
        if ((pte = walkpgdir(pgdir, a, 1)) == 0) return -1;
8010854d:	eb 9c                	jmp    801084eb <mappages+0x24>
        if (a == last) break;
8010854f:	90                   	nop
    }
    return 0;
80108550:	b8 00 00 00 00       	mov    $0x0,%eax
}
80108555:	c9                   	leave  
80108556:	c3                   	ret    

80108557 <setupkvm>:
    {(void*) data, V2P(data), PHYSTOP, PTE_W},        // kern data+memory
    {(void*) DEVSPACE, DEVSPACE, 0, PTE_W},           // more devices
};

// Set up kernel part of a page table.
pde_t* setupkvm(void) {
80108557:	55                   	push   %ebp
80108558:	89 e5                	mov    %esp,%ebp
8010855a:	53                   	push   %ebx
8010855b:	83 ec 14             	sub    $0x14,%esp
    pde_t* pgdir;
    struct kmap* k;

    if ((pgdir = (pde_t*) kalloc()) == 0) return 0;
8010855e:	e8 91 b8 ff ff       	call   80103df4 <kalloc>
80108563:	89 45 f0             	mov    %eax,-0x10(%ebp)
80108566:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8010856a:	75 07                	jne    80108573 <setupkvm+0x1c>
8010856c:	b8 00 00 00 00       	mov    $0x0,%eax
80108571:	eb 78                	jmp    801085eb <setupkvm+0x94>
    memset(pgdir, 0, PGSIZE);
80108573:	83 ec 04             	sub    $0x4,%esp
80108576:	68 00 10 00 00       	push   $0x1000
8010857b:	6a 00                	push   $0x0
8010857d:	ff 75 f0             	push   -0x10(%ebp)
80108580:	e8 f2 de ff ff       	call   80106477 <memset>
80108585:	83 c4 10             	add    $0x10,%esp
    if (P2V(PHYSTOP) > (void*) DEVSPACE) panic("PHYSTOP too high");
    for (k = kmap; k < &kmap[NELEM(kmap)]; k++)
80108588:	c7 45 f4 a0 c0 10 80 	movl   $0x8010c0a0,-0xc(%ebp)
8010858f:	eb 4e                	jmp    801085df <setupkvm+0x88>
        if (mappages(pgdir, k->virt, k->phys_end - k->phys_start,
80108591:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108594:	8b 48 0c             	mov    0xc(%eax),%ecx
                     (uint) k->phys_start, k->perm) < 0) {
80108597:	8b 45 f4             	mov    -0xc(%ebp),%eax
8010859a:	8b 50 04             	mov    0x4(%eax),%edx
        if (mappages(pgdir, k->virt, k->phys_end - k->phys_start,
8010859d:	8b 45 f4             	mov    -0xc(%ebp),%eax
801085a0:	8b 58 08             	mov    0x8(%eax),%ebx
801085a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
801085a6:	8b 40 04             	mov    0x4(%eax),%eax
801085a9:	29 c3                	sub    %eax,%ebx
801085ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
801085ae:	8b 00                	mov    (%eax),%eax
801085b0:	83 ec 0c             	sub    $0xc,%esp
801085b3:	51                   	push   %ecx
801085b4:	52                   	push   %edx
801085b5:	53                   	push   %ebx
801085b6:	50                   	push   %eax
801085b7:	ff 75 f0             	push   -0x10(%ebp)
801085ba:	e8 08 ff ff ff       	call   801084c7 <mappages>
801085bf:	83 c4 20             	add    $0x20,%esp
801085c2:	85 c0                	test   %eax,%eax
801085c4:	79 15                	jns    801085db <setupkvm+0x84>
            freevm(pgdir);
801085c6:	83 ec 0c             	sub    $0xc,%esp
801085c9:	ff 75 f0             	push   -0x10(%ebp)
801085cc:	e8 f5 04 00 00       	call   80108ac6 <freevm>
801085d1:	83 c4 10             	add    $0x10,%esp
            return 0;
801085d4:	b8 00 00 00 00       	mov    $0x0,%eax
801085d9:	eb 10                	jmp    801085eb <setupkvm+0x94>
    for (k = kmap; k < &kmap[NELEM(kmap)]; k++)
801085db:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
801085df:	81 7d f4 e0 c0 10 80 	cmpl   $0x8010c0e0,-0xc(%ebp)
801085e6:	72 a9                	jb     80108591 <setupkvm+0x3a>
        }
    return pgdir;
801085e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
801085eb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801085ee:	c9                   	leave  
801085ef:	c3                   	ret    

801085f0 <kvmalloc>:

// Allocate one page table for the machine for the kernel address
// space for scheduler processes.
void kvmalloc(void) {
801085f0:	55                   	push   %ebp
801085f1:	89 e5                	mov    %esp,%ebp
801085f3:	83 ec 08             	sub    $0x8,%esp
    kpgdir = setupkvm();
801085f6:	e8 5c ff ff ff       	call   80108557 <setupkvm>
801085fb:	a3 fc 61 11 80       	mov    %eax,0x801161fc
    switchkvm();
80108600:	e8 03 00 00 00       	call   80108608 <switchkvm>
}
80108605:	90                   	nop
80108606:	c9                   	leave  
80108607:	c3                   	ret    

80108608 <switchkvm>:

// Switch h/w page table register to the kernel-only page table,
// for when no process is running.
void switchkvm(void) {
80108608:	55                   	push   %ebp
80108609:	89 e5                	mov    %esp,%ebp
    lcr3(V2P(kpgdir));  // switch to the kernel page table
8010860b:	a1 fc 61 11 80       	mov    0x801161fc,%eax
80108610:	05 00 00 00 80       	add    $0x80000000,%eax
80108615:	50                   	push   %eax
80108616:	e8 b4 fa ff ff       	call   801080cf <lcr3>
8010861b:	83 c4 04             	add    $0x4,%esp
}
8010861e:	90                   	nop
8010861f:	c9                   	leave  
80108620:	c3                   	ret    

80108621 <switchuvm>:

// Switch TSS and h/w page table to correspond to process p.
void switchuvm(struct proc* p) {
80108621:	55                   	push   %ebp
80108622:	89 e5                	mov    %esp,%ebp
80108624:	56                   	push   %esi
80108625:	53                   	push   %ebx
80108626:	83 ec 10             	sub    $0x10,%esp
    if (p == 0) panic("switchuvm: no process");
80108629:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
8010862d:	75 0d                	jne    8010863c <switchuvm+0x1b>
8010862f:	83 ec 0c             	sub    $0xc,%esp
80108632:	68 c2 93 10 80       	push   $0x801093c2
80108637:	e8 a7 8a ff ff       	call   801010e3 <panic>
    if (p->kstack == 0) panic("switchuvm: no kstack");
8010863c:	8b 45 08             	mov    0x8(%ebp),%eax
8010863f:	8b 40 08             	mov    0x8(%eax),%eax
80108642:	85 c0                	test   %eax,%eax
80108644:	75 0d                	jne    80108653 <switchuvm+0x32>
80108646:	83 ec 0c             	sub    $0xc,%esp
80108649:	68 d8 93 10 80       	push   $0x801093d8
8010864e:	e8 90 8a ff ff       	call   801010e3 <panic>
    if (p->pgdir == 0) panic("switchuvm: no pgdir");
80108653:	8b 45 08             	mov    0x8(%ebp),%eax
80108656:	8b 40 04             	mov    0x4(%eax),%eax
80108659:	85 c0                	test   %eax,%eax
8010865b:	75 0d                	jne    8010866a <switchuvm+0x49>
8010865d:	83 ec 0c             	sub    $0xc,%esp
80108660:	68 ed 93 10 80       	push   $0x801093ed
80108665:	e8 79 8a ff ff       	call   801010e3 <panic>

    pushcli();
8010866a:	e8 fd dc ff ff       	call   8010636c <pushcli>
    mycpu()->gdt[SEG_TSS] =
8010866f:	e8 a5 cd ff ff       	call   80105419 <mycpu>
80108674:	89 c3                	mov    %eax,%ebx
        SEG16(STS_T32A, &mycpu()->ts, sizeof(mycpu()->ts) - 1, 0);
80108676:	e8 9e cd ff ff       	call   80105419 <mycpu>
8010867b:	83 c0 08             	add    $0x8,%eax
    mycpu()->gdt[SEG_TSS] =
8010867e:	89 c6                	mov    %eax,%esi
        SEG16(STS_T32A, &mycpu()->ts, sizeof(mycpu()->ts) - 1, 0);
80108680:	e8 94 cd ff ff       	call   80105419 <mycpu>
80108685:	83 c0 08             	add    $0x8,%eax
80108688:	c1 e8 10             	shr    $0x10,%eax
    mycpu()->gdt[SEG_TSS] =
8010868b:	88 45 f7             	mov    %al,-0x9(%ebp)
        SEG16(STS_T32A, &mycpu()->ts, sizeof(mycpu()->ts) - 1, 0);
8010868e:	e8 86 cd ff ff       	call   80105419 <mycpu>
80108693:	83 c0 08             	add    $0x8,%eax
80108696:	c1 e8 18             	shr    $0x18,%eax
    mycpu()->gdt[SEG_TSS] =
80108699:	89 c2                	mov    %eax,%edx
8010869b:	66 c7 83 98 00 00 00 	movw   $0x67,0x98(%ebx)
801086a2:	67 00 
801086a4:	66 89 b3 9a 00 00 00 	mov    %si,0x9a(%ebx)
801086ab:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
801086af:	88 83 9c 00 00 00    	mov    %al,0x9c(%ebx)
801086b5:	0f b6 83 9d 00 00 00 	movzbl 0x9d(%ebx),%eax
801086bc:	83 e0 f0             	and    $0xfffffff0,%eax
801086bf:	83 c8 09             	or     $0x9,%eax
801086c2:	88 83 9d 00 00 00    	mov    %al,0x9d(%ebx)
801086c8:	0f b6 83 9d 00 00 00 	movzbl 0x9d(%ebx),%eax
801086cf:	83 c8 10             	or     $0x10,%eax
801086d2:	88 83 9d 00 00 00    	mov    %al,0x9d(%ebx)
801086d8:	0f b6 83 9d 00 00 00 	movzbl 0x9d(%ebx),%eax
801086df:	83 e0 9f             	and    $0xffffff9f,%eax
801086e2:	88 83 9d 00 00 00    	mov    %al,0x9d(%ebx)
801086e8:	0f b6 83 9d 00 00 00 	movzbl 0x9d(%ebx),%eax
801086ef:	83 c8 80             	or     $0xffffff80,%eax
801086f2:	88 83 9d 00 00 00    	mov    %al,0x9d(%ebx)
801086f8:	0f b6 83 9e 00 00 00 	movzbl 0x9e(%ebx),%eax
801086ff:	83 e0 f0             	and    $0xfffffff0,%eax
80108702:	88 83 9e 00 00 00    	mov    %al,0x9e(%ebx)
80108708:	0f b6 83 9e 00 00 00 	movzbl 0x9e(%ebx),%eax
8010870f:	83 e0 ef             	and    $0xffffffef,%eax
80108712:	88 83 9e 00 00 00    	mov    %al,0x9e(%ebx)
80108718:	0f b6 83 9e 00 00 00 	movzbl 0x9e(%ebx),%eax
8010871f:	83 e0 df             	and    $0xffffffdf,%eax
80108722:	88 83 9e 00 00 00    	mov    %al,0x9e(%ebx)
80108728:	0f b6 83 9e 00 00 00 	movzbl 0x9e(%ebx),%eax
8010872f:	83 c8 40             	or     $0x40,%eax
80108732:	88 83 9e 00 00 00    	mov    %al,0x9e(%ebx)
80108738:	0f b6 83 9e 00 00 00 	movzbl 0x9e(%ebx),%eax
8010873f:	83 e0 7f             	and    $0x7f,%eax
80108742:	88 83 9e 00 00 00    	mov    %al,0x9e(%ebx)
80108748:	88 93 9f 00 00 00    	mov    %dl,0x9f(%ebx)
    mycpu()->gdt[SEG_TSS].s = 0;
8010874e:	e8 c6 cc ff ff       	call   80105419 <mycpu>
80108753:	0f b6 90 9d 00 00 00 	movzbl 0x9d(%eax),%edx
8010875a:	83 e2 ef             	and    $0xffffffef,%edx
8010875d:	88 90 9d 00 00 00    	mov    %dl,0x9d(%eax)
    mycpu()->ts.ss0 = SEG_KDATA << 3;
80108763:	e8 b1 cc ff ff       	call   80105419 <mycpu>
80108768:	66 c7 40 10 10 00    	movw   $0x10,0x10(%eax)
    mycpu()->ts.esp0 = (uint) p->kstack + KSTACKSIZE;
8010876e:	8b 45 08             	mov    0x8(%ebp),%eax
80108771:	8b 40 08             	mov    0x8(%eax),%eax
80108774:	89 c3                	mov    %eax,%ebx
80108776:	e8 9e cc ff ff       	call   80105419 <mycpu>
8010877b:	8d 93 00 10 00 00    	lea    0x1000(%ebx),%edx
80108781:	89 50 0c             	mov    %edx,0xc(%eax)
    // setting IOPL=0 in eflags *and* iomb beyond the tss segment limit
    // forbids I/O instructions (e.g., inb and outb) from user space
    mycpu()->ts.iomb = (ushort) 0xFFFF;
80108784:	e8 90 cc ff ff       	call   80105419 <mycpu>
80108789:	66 c7 40 6e ff ff    	movw   $0xffff,0x6e(%eax)
    ltr(SEG_TSS << 3);
8010878f:	83 ec 0c             	sub    $0xc,%esp
80108792:	6a 28                	push   $0x28
80108794:	e8 1f f9 ff ff       	call   801080b8 <ltr>
80108799:	83 c4 10             	add    $0x10,%esp
    lcr3(V2P(p->pgdir));  // switch to process's address space
8010879c:	8b 45 08             	mov    0x8(%ebp),%eax
8010879f:	8b 40 04             	mov    0x4(%eax),%eax
801087a2:	05 00 00 00 80       	add    $0x80000000,%eax
801087a7:	83 ec 0c             	sub    $0xc,%esp
801087aa:	50                   	push   %eax
801087ab:	e8 1f f9 ff ff       	call   801080cf <lcr3>
801087b0:	83 c4 10             	add    $0x10,%esp
    popcli();
801087b3:	e8 01 dc ff ff       	call   801063b9 <popcli>
}
801087b8:	90                   	nop
801087b9:	8d 65 f8             	lea    -0x8(%ebp),%esp
801087bc:	5b                   	pop    %ebx
801087bd:	5e                   	pop    %esi
801087be:	5d                   	pop    %ebp
801087bf:	c3                   	ret    

801087c0 <inituvm>:

// Load the initcode into address 0 of pgdir.
// sz must be less than a page.
void inituvm(pde_t* pgdir, char* init, uint sz) {
801087c0:	55                   	push   %ebp
801087c1:	89 e5                	mov    %esp,%ebp
801087c3:	83 ec 18             	sub    $0x18,%esp
    char* mem;

    if (sz >= PGSIZE) panic("inituvm: more than a page");
801087c6:	81 7d 10 ff 0f 00 00 	cmpl   $0xfff,0x10(%ebp)
801087cd:	76 0d                	jbe    801087dc <inituvm+0x1c>
801087cf:	83 ec 0c             	sub    $0xc,%esp
801087d2:	68 01 94 10 80       	push   $0x80109401
801087d7:	e8 07 89 ff ff       	call   801010e3 <panic>
    mem = kalloc();
801087dc:	e8 13 b6 ff ff       	call   80103df4 <kalloc>
801087e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    memset(mem, 0, PGSIZE);
801087e4:	83 ec 04             	sub    $0x4,%esp
801087e7:	68 00 10 00 00       	push   $0x1000
801087ec:	6a 00                	push   $0x0
801087ee:	ff 75 f4             	push   -0xc(%ebp)
801087f1:	e8 81 dc ff ff       	call   80106477 <memset>
801087f6:	83 c4 10             	add    $0x10,%esp
    mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W | PTE_U);
801087f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
801087fc:	05 00 00 00 80       	add    $0x80000000,%eax
80108801:	83 ec 0c             	sub    $0xc,%esp
80108804:	6a 06                	push   $0x6
80108806:	50                   	push   %eax
80108807:	68 00 10 00 00       	push   $0x1000
8010880c:	6a 00                	push   $0x0
8010880e:	ff 75 08             	push   0x8(%ebp)
80108811:	e8 b1 fc ff ff       	call   801084c7 <mappages>
80108816:	83 c4 20             	add    $0x20,%esp
    memmove(mem, init, sz);
80108819:	83 ec 04             	sub    $0x4,%esp
8010881c:	ff 75 10             	push   0x10(%ebp)
8010881f:	ff 75 0c             	push   0xc(%ebp)
80108822:	ff 75 f4             	push   -0xc(%ebp)
80108825:	e8 0c dd ff ff       	call   80106536 <memmove>
8010882a:	83 c4 10             	add    $0x10,%esp
}
8010882d:	90                   	nop
8010882e:	c9                   	leave  
8010882f:	c3                   	ret    

80108830 <loaduvm>:

// Load a program segment into pgdir.  addr must be page-aligned
// and the pages from addr to addr+sz must already be mapped.
int loaduvm(pde_t* pgdir, char* addr, struct inode* ip, uint offset, uint sz) {
80108830:	55                   	push   %ebp
80108831:	89 e5                	mov    %esp,%ebp
80108833:	83 ec 18             	sub    $0x18,%esp
    uint i, pa, n;
    pte_t* pte;

    if ((uint) addr % PGSIZE != 0) panic("loaduvm: addr must be page aligned");
80108836:	8b 45 0c             	mov    0xc(%ebp),%eax
80108839:	25 ff 0f 00 00       	and    $0xfff,%eax
8010883e:	85 c0                	test   %eax,%eax
80108840:	74 0d                	je     8010884f <loaduvm+0x1f>
80108842:	83 ec 0c             	sub    $0xc,%esp
80108845:	68 1c 94 10 80       	push   $0x8010941c
8010884a:	e8 94 88 ff ff       	call   801010e3 <panic>
    for (i = 0; i < sz; i += PGSIZE) {
8010884f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80108856:	e9 8f 00 00 00       	jmp    801088ea <loaduvm+0xba>
        if ((pte = walkpgdir(pgdir, addr + i, 0)) == 0)
8010885b:	8b 55 0c             	mov    0xc(%ebp),%edx
8010885e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108861:	01 d0                	add    %edx,%eax
80108863:	83 ec 04             	sub    $0x4,%esp
80108866:	6a 00                	push   $0x0
80108868:	50                   	push   %eax
80108869:	ff 75 08             	push   0x8(%ebp)
8010886c:	e8 c0 fb ff ff       	call   80108431 <walkpgdir>
80108871:	83 c4 10             	add    $0x10,%esp
80108874:	89 45 ec             	mov    %eax,-0x14(%ebp)
80108877:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
8010887b:	75 0d                	jne    8010888a <loaduvm+0x5a>
            panic("loaduvm: address should exist");
8010887d:	83 ec 0c             	sub    $0xc,%esp
80108880:	68 3f 94 10 80       	push   $0x8010943f
80108885:	e8 59 88 ff ff       	call   801010e3 <panic>
        pa = PTE_ADDR(*pte);
8010888a:	8b 45 ec             	mov    -0x14(%ebp),%eax
8010888d:	8b 00                	mov    (%eax),%eax
8010888f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80108894:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (sz - i < PGSIZE)
80108897:	8b 45 18             	mov    0x18(%ebp),%eax
8010889a:	2b 45 f4             	sub    -0xc(%ebp),%eax
8010889d:	3d ff 0f 00 00       	cmp    $0xfff,%eax
801088a2:	77 0b                	ja     801088af <loaduvm+0x7f>
            n = sz - i;
801088a4:	8b 45 18             	mov    0x18(%ebp),%eax
801088a7:	2b 45 f4             	sub    -0xc(%ebp),%eax
801088aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
801088ad:	eb 07                	jmp    801088b6 <loaduvm+0x86>
        else
            n = PGSIZE;
801088af:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
        if (readi(ip, P2V(pa), offset + i, n) != n) return -1;
801088b6:	8b 55 14             	mov    0x14(%ebp),%edx
801088b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
801088bc:	01 d0                	add    %edx,%eax
801088be:	8b 55 e8             	mov    -0x18(%ebp),%edx
801088c1:	81 c2 00 00 00 80    	add    $0x80000000,%edx
801088c7:	ff 75 f0             	push   -0x10(%ebp)
801088ca:	50                   	push   %eax
801088cb:	52                   	push   %edx
801088cc:	ff 75 10             	push   0x10(%ebp)
801088cf:	e8 47 a5 ff ff       	call   80102e1b <readi>
801088d4:	83 c4 10             	add    $0x10,%esp
801088d7:	39 45 f0             	cmp    %eax,-0x10(%ebp)
801088da:	74 07                	je     801088e3 <loaduvm+0xb3>
801088dc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801088e1:	eb 18                	jmp    801088fb <loaduvm+0xcb>
    for (i = 0; i < sz; i += PGSIZE) {
801088e3:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
801088ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
801088ed:	3b 45 18             	cmp    0x18(%ebp),%eax
801088f0:	0f 82 65 ff ff ff    	jb     8010885b <loaduvm+0x2b>
    }
    return 0;
801088f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
801088fb:	c9                   	leave  
801088fc:	c3                   	ret    

801088fd <allocuvm>:

// Allocate page tables and physical memory to grow process from oldsz to
// newsz, which need not be page aligned.  Returns new size or 0 on error.
int allocuvm(pde_t* pgdir, uint oldsz, uint newsz) {
801088fd:	55                   	push   %ebp
801088fe:	89 e5                	mov    %esp,%ebp
80108900:	83 ec 18             	sub    $0x18,%esp
    char* mem;
    uint a;

    if (newsz >= KERNBASE) return 0;
80108903:	8b 45 10             	mov    0x10(%ebp),%eax
80108906:	85 c0                	test   %eax,%eax
80108908:	79 0a                	jns    80108914 <allocuvm+0x17>
8010890a:	b8 00 00 00 00       	mov    $0x0,%eax
8010890f:	e9 ec 00 00 00       	jmp    80108a00 <allocuvm+0x103>
    if (newsz < oldsz) return oldsz;
80108914:	8b 45 10             	mov    0x10(%ebp),%eax
80108917:	3b 45 0c             	cmp    0xc(%ebp),%eax
8010891a:	73 08                	jae    80108924 <allocuvm+0x27>
8010891c:	8b 45 0c             	mov    0xc(%ebp),%eax
8010891f:	e9 dc 00 00 00       	jmp    80108a00 <allocuvm+0x103>

    a = PGROUNDUP(oldsz);
80108924:	8b 45 0c             	mov    0xc(%ebp),%eax
80108927:	05 ff 0f 00 00       	add    $0xfff,%eax
8010892c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80108931:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; a < newsz; a += PGSIZE) {
80108934:	e9 b8 00 00 00       	jmp    801089f1 <allocuvm+0xf4>
        mem = kalloc();
80108939:	e8 b6 b4 ff ff       	call   80103df4 <kalloc>
8010893e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (mem == 0) {
80108941:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80108945:	75 2e                	jne    80108975 <allocuvm+0x78>
            cprintf("allocuvm out of memory\n");
80108947:	83 ec 0c             	sub    $0xc,%esp
8010894a:	68 5d 94 10 80       	push   $0x8010945d
8010894f:	e8 da 85 ff ff       	call   80100f2e <cprintf>
80108954:	83 c4 10             	add    $0x10,%esp
            deallocuvm(pgdir, newsz, oldsz);
80108957:	83 ec 04             	sub    $0x4,%esp
8010895a:	ff 75 0c             	push   0xc(%ebp)
8010895d:	ff 75 10             	push   0x10(%ebp)
80108960:	ff 75 08             	push   0x8(%ebp)
80108963:	e8 9a 00 00 00       	call   80108a02 <deallocuvm>
80108968:	83 c4 10             	add    $0x10,%esp
            return 0;
8010896b:	b8 00 00 00 00       	mov    $0x0,%eax
80108970:	e9 8b 00 00 00       	jmp    80108a00 <allocuvm+0x103>
        }
        memset(mem, 0, PGSIZE);
80108975:	83 ec 04             	sub    $0x4,%esp
80108978:	68 00 10 00 00       	push   $0x1000
8010897d:	6a 00                	push   $0x0
8010897f:	ff 75 f0             	push   -0x10(%ebp)
80108982:	e8 f0 da ff ff       	call   80106477 <memset>
80108987:	83 c4 10             	add    $0x10,%esp
        if (mappages(pgdir, (char*) a, PGSIZE, V2P(mem), PTE_W | PTE_U) < 0) {
8010898a:	8b 45 f0             	mov    -0x10(%ebp),%eax
8010898d:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
80108993:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108996:	83 ec 0c             	sub    $0xc,%esp
80108999:	6a 06                	push   $0x6
8010899b:	52                   	push   %edx
8010899c:	68 00 10 00 00       	push   $0x1000
801089a1:	50                   	push   %eax
801089a2:	ff 75 08             	push   0x8(%ebp)
801089a5:	e8 1d fb ff ff       	call   801084c7 <mappages>
801089aa:	83 c4 20             	add    $0x20,%esp
801089ad:	85 c0                	test   %eax,%eax
801089af:	79 39                	jns    801089ea <allocuvm+0xed>
            cprintf("allocuvm out of memory (2)\n");
801089b1:	83 ec 0c             	sub    $0xc,%esp
801089b4:	68 75 94 10 80       	push   $0x80109475
801089b9:	e8 70 85 ff ff       	call   80100f2e <cprintf>
801089be:	83 c4 10             	add    $0x10,%esp
            deallocuvm(pgdir, newsz, oldsz);
801089c1:	83 ec 04             	sub    $0x4,%esp
801089c4:	ff 75 0c             	push   0xc(%ebp)
801089c7:	ff 75 10             	push   0x10(%ebp)
801089ca:	ff 75 08             	push   0x8(%ebp)
801089cd:	e8 30 00 00 00       	call   80108a02 <deallocuvm>
801089d2:	83 c4 10             	add    $0x10,%esp
            kfree(mem);
801089d5:	83 ec 0c             	sub    $0xc,%esp
801089d8:	ff 75 f0             	push   -0x10(%ebp)
801089db:	e8 7a b3 ff ff       	call   80103d5a <kfree>
801089e0:	83 c4 10             	add    $0x10,%esp
            return 0;
801089e3:	b8 00 00 00 00       	mov    $0x0,%eax
801089e8:	eb 16                	jmp    80108a00 <allocuvm+0x103>
    for (; a < newsz; a += PGSIZE) {
801089ea:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
801089f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
801089f4:	3b 45 10             	cmp    0x10(%ebp),%eax
801089f7:	0f 82 3c ff ff ff    	jb     80108939 <allocuvm+0x3c>
        }
    }
    return newsz;
801089fd:	8b 45 10             	mov    0x10(%ebp),%eax
}
80108a00:	c9                   	leave  
80108a01:	c3                   	ret    

80108a02 <deallocuvm>:

// Deallocate user pages to bring the process size from oldsz to
// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
// need to be less than oldsz.  oldsz can be larger than the actual
// process size.  Returns the new process size.
int deallocuvm(pde_t* pgdir, uint oldsz, uint newsz) {
80108a02:	55                   	push   %ebp
80108a03:	89 e5                	mov    %esp,%ebp
80108a05:	83 ec 18             	sub    $0x18,%esp
    pte_t* pte;
    uint a, pa;

    if (newsz >= oldsz) return oldsz;
80108a08:	8b 45 10             	mov    0x10(%ebp),%eax
80108a0b:	3b 45 0c             	cmp    0xc(%ebp),%eax
80108a0e:	72 08                	jb     80108a18 <deallocuvm+0x16>
80108a10:	8b 45 0c             	mov    0xc(%ebp),%eax
80108a13:	e9 ac 00 00 00       	jmp    80108ac4 <deallocuvm+0xc2>

    a = PGROUNDUP(newsz);
80108a18:	8b 45 10             	mov    0x10(%ebp),%eax
80108a1b:	05 ff 0f 00 00       	add    $0xfff,%eax
80108a20:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80108a25:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; a < oldsz; a += PGSIZE) {
80108a28:	e9 88 00 00 00       	jmp    80108ab5 <deallocuvm+0xb3>
        pte = walkpgdir(pgdir, (char*) a, 0);
80108a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108a30:	83 ec 04             	sub    $0x4,%esp
80108a33:	6a 00                	push   $0x0
80108a35:	50                   	push   %eax
80108a36:	ff 75 08             	push   0x8(%ebp)
80108a39:	e8 f3 f9 ff ff       	call   80108431 <walkpgdir>
80108a3e:	83 c4 10             	add    $0x10,%esp
80108a41:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (!pte)
80108a44:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80108a48:	75 16                	jne    80108a60 <deallocuvm+0x5e>
            a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
80108a4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108a4d:	c1 e8 16             	shr    $0x16,%eax
80108a50:	83 c0 01             	add    $0x1,%eax
80108a53:	c1 e0 16             	shl    $0x16,%eax
80108a56:	2d 00 10 00 00       	sub    $0x1000,%eax
80108a5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
80108a5e:	eb 4e                	jmp    80108aae <deallocuvm+0xac>
        else if ((*pte & PTE_P) != 0) {
80108a60:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108a63:	8b 00                	mov    (%eax),%eax
80108a65:	83 e0 01             	and    $0x1,%eax
80108a68:	85 c0                	test   %eax,%eax
80108a6a:	74 42                	je     80108aae <deallocuvm+0xac>
            pa = PTE_ADDR(*pte);
80108a6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108a6f:	8b 00                	mov    (%eax),%eax
80108a71:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80108a76:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (pa == 0) panic("kfree");
80108a79:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80108a7d:	75 0d                	jne    80108a8c <deallocuvm+0x8a>
80108a7f:	83 ec 0c             	sub    $0xc,%esp
80108a82:	68 91 94 10 80       	push   $0x80109491
80108a87:	e8 57 86 ff ff       	call   801010e3 <panic>
            char* v = P2V(pa);
80108a8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108a8f:	05 00 00 00 80       	add    $0x80000000,%eax
80108a94:	89 45 e8             	mov    %eax,-0x18(%ebp)
            kfree(v);
80108a97:	83 ec 0c             	sub    $0xc,%esp
80108a9a:	ff 75 e8             	push   -0x18(%ebp)
80108a9d:	e8 b8 b2 ff ff       	call   80103d5a <kfree>
80108aa2:	83 c4 10             	add    $0x10,%esp
            *pte = 0;
80108aa5:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108aa8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    for (; a < oldsz; a += PGSIZE) {
80108aae:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
80108ab5:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108ab8:	3b 45 0c             	cmp    0xc(%ebp),%eax
80108abb:	0f 82 6c ff ff ff    	jb     80108a2d <deallocuvm+0x2b>
        }
    }
    return newsz;
80108ac1:	8b 45 10             	mov    0x10(%ebp),%eax
}
80108ac4:	c9                   	leave  
80108ac5:	c3                   	ret    

80108ac6 <freevm>:

// Free a page table and all the physical memory pages
// in the user part.
void freevm(pde_t* pgdir) {
80108ac6:	55                   	push   %ebp
80108ac7:	89 e5                	mov    %esp,%ebp
80108ac9:	83 ec 18             	sub    $0x18,%esp
    uint i;

    if (pgdir == 0) panic("freevm: no pgdir");
80108acc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80108ad0:	75 0d                	jne    80108adf <freevm+0x19>
80108ad2:	83 ec 0c             	sub    $0xc,%esp
80108ad5:	68 97 94 10 80       	push   $0x80109497
80108ada:	e8 04 86 ff ff       	call   801010e3 <panic>
    deallocuvm(pgdir, KERNBASE, 0);
80108adf:	83 ec 04             	sub    $0x4,%esp
80108ae2:	6a 00                	push   $0x0
80108ae4:	68 00 00 00 80       	push   $0x80000000
80108ae9:	ff 75 08             	push   0x8(%ebp)
80108aec:	e8 11 ff ff ff       	call   80108a02 <deallocuvm>
80108af1:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < NPDENTRIES; i++) {
80108af4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80108afb:	eb 48                	jmp    80108b45 <freevm+0x7f>
        if (pgdir[i] & PTE_P) {
80108afd:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108b00:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80108b07:	8b 45 08             	mov    0x8(%ebp),%eax
80108b0a:	01 d0                	add    %edx,%eax
80108b0c:	8b 00                	mov    (%eax),%eax
80108b0e:	83 e0 01             	and    $0x1,%eax
80108b11:	85 c0                	test   %eax,%eax
80108b13:	74 2c                	je     80108b41 <freevm+0x7b>
            char* v = P2V(PTE_ADDR(pgdir[i]));
80108b15:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108b18:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
80108b1f:	8b 45 08             	mov    0x8(%ebp),%eax
80108b22:	01 d0                	add    %edx,%eax
80108b24:	8b 00                	mov    (%eax),%eax
80108b26:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80108b2b:	05 00 00 00 80       	add    $0x80000000,%eax
80108b30:	89 45 f0             	mov    %eax,-0x10(%ebp)
            kfree(v);
80108b33:	83 ec 0c             	sub    $0xc,%esp
80108b36:	ff 75 f0             	push   -0x10(%ebp)
80108b39:	e8 1c b2 ff ff       	call   80103d5a <kfree>
80108b3e:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < NPDENTRIES; i++) {
80108b41:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
80108b45:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
80108b4c:	76 af                	jbe    80108afd <freevm+0x37>
        }
    }
    kfree((char*) pgdir);
80108b4e:	83 ec 0c             	sub    $0xc,%esp
80108b51:	ff 75 08             	push   0x8(%ebp)
80108b54:	e8 01 b2 ff ff       	call   80103d5a <kfree>
80108b59:	83 c4 10             	add    $0x10,%esp
}
80108b5c:	90                   	nop
80108b5d:	c9                   	leave  
80108b5e:	c3                   	ret    

80108b5f <clearpteu>:

// Clear PTE_U on a page. Used to create an inaccessible
// page beneath the user stack.
void clearpteu(pde_t* pgdir, char* uva) {
80108b5f:	55                   	push   %ebp
80108b60:	89 e5                	mov    %esp,%ebp
80108b62:	83 ec 18             	sub    $0x18,%esp
    pte_t* pte;

    pte = walkpgdir(pgdir, uva, 0);
80108b65:	83 ec 04             	sub    $0x4,%esp
80108b68:	6a 00                	push   $0x0
80108b6a:	ff 75 0c             	push   0xc(%ebp)
80108b6d:	ff 75 08             	push   0x8(%ebp)
80108b70:	e8 bc f8 ff ff       	call   80108431 <walkpgdir>
80108b75:	83 c4 10             	add    $0x10,%esp
80108b78:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (pte == 0) panic("clearpteu");
80108b7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
80108b7f:	75 0d                	jne    80108b8e <clearpteu+0x2f>
80108b81:	83 ec 0c             	sub    $0xc,%esp
80108b84:	68 a8 94 10 80       	push   $0x801094a8
80108b89:	e8 55 85 ff ff       	call   801010e3 <panic>
    *pte &= ~PTE_U;
80108b8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108b91:	8b 00                	mov    (%eax),%eax
80108b93:	83 e0 fb             	and    $0xfffffffb,%eax
80108b96:	89 c2                	mov    %eax,%edx
80108b98:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108b9b:	89 10                	mov    %edx,(%eax)
}
80108b9d:	90                   	nop
80108b9e:	c9                   	leave  
80108b9f:	c3                   	ret    

80108ba0 <copyuvm>:

// Given a parent process's page table, create a copy
// of it for a child.
pde_t* copyuvm(pde_t* pgdir, uint sz) {
80108ba0:	55                   	push   %ebp
80108ba1:	89 e5                	mov    %esp,%ebp
80108ba3:	83 ec 28             	sub    $0x28,%esp
    pde_t* d;
    pte_t* pte;
    uint pa, i, flags;
    char* mem;

    if ((d = setupkvm()) == 0) return 0;
80108ba6:	e8 ac f9 ff ff       	call   80108557 <setupkvm>
80108bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
80108bae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80108bb2:	75 0a                	jne    80108bbe <copyuvm+0x1e>
80108bb4:	b8 00 00 00 00       	mov    $0x0,%eax
80108bb9:	e9 f8 00 00 00       	jmp    80108cb6 <copyuvm+0x116>
    for (i = 0; i < sz; i += PGSIZE) {
80108bbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
80108bc5:	e9 c7 00 00 00       	jmp    80108c91 <copyuvm+0xf1>
        if ((pte = walkpgdir(pgdir, (void*) i, 0)) == 0)
80108bca:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108bcd:	83 ec 04             	sub    $0x4,%esp
80108bd0:	6a 00                	push   $0x0
80108bd2:	50                   	push   %eax
80108bd3:	ff 75 08             	push   0x8(%ebp)
80108bd6:	e8 56 f8 ff ff       	call   80108431 <walkpgdir>
80108bdb:	83 c4 10             	add    $0x10,%esp
80108bde:	89 45 ec             	mov    %eax,-0x14(%ebp)
80108be1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
80108be5:	75 0d                	jne    80108bf4 <copyuvm+0x54>
            panic("copyuvm: pte should exist");
80108be7:	83 ec 0c             	sub    $0xc,%esp
80108bea:	68 b2 94 10 80       	push   $0x801094b2
80108bef:	e8 ef 84 ff ff       	call   801010e3 <panic>
        if (!(*pte & PTE_P)) panic("copyuvm: page not present");
80108bf4:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108bf7:	8b 00                	mov    (%eax),%eax
80108bf9:	83 e0 01             	and    $0x1,%eax
80108bfc:	85 c0                	test   %eax,%eax
80108bfe:	75 0d                	jne    80108c0d <copyuvm+0x6d>
80108c00:	83 ec 0c             	sub    $0xc,%esp
80108c03:	68 cc 94 10 80       	push   $0x801094cc
80108c08:	e8 d6 84 ff ff       	call   801010e3 <panic>
        pa = PTE_ADDR(*pte);
80108c0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108c10:	8b 00                	mov    (%eax),%eax
80108c12:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80108c17:	89 45 e8             	mov    %eax,-0x18(%ebp)
        flags = PTE_FLAGS(*pte);
80108c1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108c1d:	8b 00                	mov    (%eax),%eax
80108c1f:	25 ff 0f 00 00       	and    $0xfff,%eax
80108c24:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if ((mem = kalloc()) == 0) goto bad;
80108c27:	e8 c8 b1 ff ff       	call   80103df4 <kalloc>
80108c2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
80108c2f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
80108c33:	74 6d                	je     80108ca2 <copyuvm+0x102>
        memmove(mem, (char*) P2V(pa), PGSIZE);
80108c35:	8b 45 e8             	mov    -0x18(%ebp),%eax
80108c38:	05 00 00 00 80       	add    $0x80000000,%eax
80108c3d:	83 ec 04             	sub    $0x4,%esp
80108c40:	68 00 10 00 00       	push   $0x1000
80108c45:	50                   	push   %eax
80108c46:	ff 75 e0             	push   -0x20(%ebp)
80108c49:	e8 e8 d8 ff ff       	call   80106536 <memmove>
80108c4e:	83 c4 10             	add    $0x10,%esp
        if (mappages(d, (void*) i, PGSIZE, V2P(mem), flags) < 0) {
80108c51:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80108c54:	8b 45 e0             	mov    -0x20(%ebp),%eax
80108c57:	8d 88 00 00 00 80    	lea    -0x80000000(%eax),%ecx
80108c5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108c60:	83 ec 0c             	sub    $0xc,%esp
80108c63:	52                   	push   %edx
80108c64:	51                   	push   %ecx
80108c65:	68 00 10 00 00       	push   $0x1000
80108c6a:	50                   	push   %eax
80108c6b:	ff 75 f0             	push   -0x10(%ebp)
80108c6e:	e8 54 f8 ff ff       	call   801084c7 <mappages>
80108c73:	83 c4 20             	add    $0x20,%esp
80108c76:	85 c0                	test   %eax,%eax
80108c78:	79 10                	jns    80108c8a <copyuvm+0xea>
            kfree(mem);
80108c7a:	83 ec 0c             	sub    $0xc,%esp
80108c7d:	ff 75 e0             	push   -0x20(%ebp)
80108c80:	e8 d5 b0 ff ff       	call   80103d5a <kfree>
80108c85:	83 c4 10             	add    $0x10,%esp
            goto bad;
80108c88:	eb 19                	jmp    80108ca3 <copyuvm+0x103>
    for (i = 0; i < sz; i += PGSIZE) {
80108c8a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
80108c91:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108c94:	3b 45 0c             	cmp    0xc(%ebp),%eax
80108c97:	0f 82 2d ff ff ff    	jb     80108bca <copyuvm+0x2a>
        }
    }
    return d;
80108c9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108ca0:	eb 14                	jmp    80108cb6 <copyuvm+0x116>
        if ((mem = kalloc()) == 0) goto bad;
80108ca2:	90                   	nop

bad:
    freevm(d);
80108ca3:	83 ec 0c             	sub    $0xc,%esp
80108ca6:	ff 75 f0             	push   -0x10(%ebp)
80108ca9:	e8 18 fe ff ff       	call   80108ac6 <freevm>
80108cae:	83 c4 10             	add    $0x10,%esp
    return 0;
80108cb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
80108cb6:	c9                   	leave  
80108cb7:	c3                   	ret    

80108cb8 <uva2ka>:

//PAGEBREAK!
// Map user virtual address to kernel address.
char* uva2ka(pde_t* pgdir, char* uva) {
80108cb8:	55                   	push   %ebp
80108cb9:	89 e5                	mov    %esp,%ebp
80108cbb:	83 ec 18             	sub    $0x18,%esp
    pte_t* pte;

    pte = walkpgdir(pgdir, uva, 0);
80108cbe:	83 ec 04             	sub    $0x4,%esp
80108cc1:	6a 00                	push   $0x0
80108cc3:	ff 75 0c             	push   0xc(%ebp)
80108cc6:	ff 75 08             	push   0x8(%ebp)
80108cc9:	e8 63 f7 ff ff       	call   80108431 <walkpgdir>
80108cce:	83 c4 10             	add    $0x10,%esp
80108cd1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((*pte & PTE_P) == 0) return 0;
80108cd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108cd7:	8b 00                	mov    (%eax),%eax
80108cd9:	83 e0 01             	and    $0x1,%eax
80108cdc:	85 c0                	test   %eax,%eax
80108cde:	75 07                	jne    80108ce7 <uva2ka+0x2f>
80108ce0:	b8 00 00 00 00       	mov    $0x0,%eax
80108ce5:	eb 22                	jmp    80108d09 <uva2ka+0x51>
    if ((*pte & PTE_U) == 0) return 0;
80108ce7:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108cea:	8b 00                	mov    (%eax),%eax
80108cec:	83 e0 04             	and    $0x4,%eax
80108cef:	85 c0                	test   %eax,%eax
80108cf1:	75 07                	jne    80108cfa <uva2ka+0x42>
80108cf3:	b8 00 00 00 00       	mov    $0x0,%eax
80108cf8:	eb 0f                	jmp    80108d09 <uva2ka+0x51>
    return (char*) P2V(PTE_ADDR(*pte));
80108cfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
80108cfd:	8b 00                	mov    (%eax),%eax
80108cff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80108d04:	05 00 00 00 80       	add    $0x80000000,%eax
}
80108d09:	c9                   	leave  
80108d0a:	c3                   	ret    

80108d0b <copyout>:

// Copy len bytes from p to user address va in page table pgdir.
// Most useful when pgdir is not the current page table.
// uva2ka ensures this only works for PTE_U pages.
int copyout(pde_t* pgdir, uint va, void* p, uint len) {
80108d0b:	55                   	push   %ebp
80108d0c:	89 e5                	mov    %esp,%ebp
80108d0e:	83 ec 18             	sub    $0x18,%esp
    char *buf, *pa0;
    uint n, va0;

    buf = (char*) p;
80108d11:	8b 45 10             	mov    0x10(%ebp),%eax
80108d14:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (len > 0) {
80108d17:	eb 7f                	jmp    80108d98 <copyout+0x8d>
        va0 = (uint) PGROUNDDOWN(va);
80108d19:	8b 45 0c             	mov    0xc(%ebp),%eax
80108d1c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80108d21:	89 45 ec             	mov    %eax,-0x14(%ebp)
        pa0 = uva2ka(pgdir, (char*) va0);
80108d24:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108d27:	83 ec 08             	sub    $0x8,%esp
80108d2a:	50                   	push   %eax
80108d2b:	ff 75 08             	push   0x8(%ebp)
80108d2e:	e8 85 ff ff ff       	call   80108cb8 <uva2ka>
80108d33:	83 c4 10             	add    $0x10,%esp
80108d36:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (pa0 == 0) return -1;
80108d39:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
80108d3d:	75 07                	jne    80108d46 <copyout+0x3b>
80108d3f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80108d44:	eb 61                	jmp    80108da7 <copyout+0x9c>
        n = PGSIZE - (va - va0);
80108d46:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108d49:	2b 45 0c             	sub    0xc(%ebp),%eax
80108d4c:	05 00 10 00 00       	add    $0x1000,%eax
80108d51:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (n > len) n = len;
80108d54:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108d57:	3b 45 14             	cmp    0x14(%ebp),%eax
80108d5a:	76 06                	jbe    80108d62 <copyout+0x57>
80108d5c:	8b 45 14             	mov    0x14(%ebp),%eax
80108d5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        memmove(pa0 + (va - va0), buf, n);
80108d62:	8b 45 0c             	mov    0xc(%ebp),%eax
80108d65:	2b 45 ec             	sub    -0x14(%ebp),%eax
80108d68:	89 c2                	mov    %eax,%edx
80108d6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
80108d6d:	01 d0                	add    %edx,%eax
80108d6f:	83 ec 04             	sub    $0x4,%esp
80108d72:	ff 75 f0             	push   -0x10(%ebp)
80108d75:	ff 75 f4             	push   -0xc(%ebp)
80108d78:	50                   	push   %eax
80108d79:	e8 b8 d7 ff ff       	call   80106536 <memmove>
80108d7e:	83 c4 10             	add    $0x10,%esp
        len -= n;
80108d81:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108d84:	29 45 14             	sub    %eax,0x14(%ebp)
        buf += n;
80108d87:	8b 45 f0             	mov    -0x10(%ebp),%eax
80108d8a:	01 45 f4             	add    %eax,-0xc(%ebp)
        va = va0 + PGSIZE;
80108d8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
80108d90:	05 00 10 00 00       	add    $0x1000,%eax
80108d95:	89 45 0c             	mov    %eax,0xc(%ebp)
    while (len > 0) {
80108d98:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
80108d9c:	0f 85 77 ff ff ff    	jne    80108d19 <copyout+0xe>
    }
    return 0;
80108da2:	b8 00 00 00 00       	mov    $0x0,%eax
}
80108da7:	c9                   	leave  
80108da8:	c3                   	ret    
